/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MedicoesThrift : TBase
  {
    private double _circuferenciaAbdominal;
    private double _perimetroPanturrilha;
    private int _pressaoArterialSistolica;
    private int _pressaoArterialDiastolica;
    private int _frequenciaRespiratoria;
    private int _frequenciaCardiaca;
    private double _temperatura;
    private int _saturacaoO2;
    private int _glicemiaCapilar;
    private long _tipoGlicemiaCapilar;
    private double _peso;
    private double _altura;
    private double _perimetroCefalico;

    public double CircuferenciaAbdominal
    {
      get
      {
        return _circuferenciaAbdominal;
      }
      set
      {
        __isset.circuferenciaAbdominal = true;
        this._circuferenciaAbdominal = value;
      }
    }

    public double PerimetroPanturrilha
    {
      get
      {
        return _perimetroPanturrilha;
      }
      set
      {
        __isset.perimetroPanturrilha = true;
        this._perimetroPanturrilha = value;
      }
    }

    public int PressaoArterialSistolica
    {
      get
      {
        return _pressaoArterialSistolica;
      }
      set
      {
        __isset.pressaoArterialSistolica = true;
        this._pressaoArterialSistolica = value;
      }
    }

    public int PressaoArterialDiastolica
    {
      get
      {
        return _pressaoArterialDiastolica;
      }
      set
      {
        __isset.pressaoArterialDiastolica = true;
        this._pressaoArterialDiastolica = value;
      }
    }

    public int FrequenciaRespiratoria
    {
      get
      {
        return _frequenciaRespiratoria;
      }
      set
      {
        __isset.frequenciaRespiratoria = true;
        this._frequenciaRespiratoria = value;
      }
    }

    public int FrequenciaCardiaca
    {
      get
      {
        return _frequenciaCardiaca;
      }
      set
      {
        __isset.frequenciaCardiaca = true;
        this._frequenciaCardiaca = value;
      }
    }

    public double Temperatura
    {
      get
      {
        return _temperatura;
      }
      set
      {
        __isset.temperatura = true;
        this._temperatura = value;
      }
    }

    public int SaturacaoO2
    {
      get
      {
        return _saturacaoO2;
      }
      set
      {
        __isset.saturacaoO2 = true;
        this._saturacaoO2 = value;
      }
    }

    public int GlicemiaCapilar
    {
      get
      {
        return _glicemiaCapilar;
      }
      set
      {
        __isset.glicemiaCapilar = true;
        this._glicemiaCapilar = value;
      }
    }

    public long TipoGlicemiaCapilar
    {
      get
      {
        return _tipoGlicemiaCapilar;
      }
      set
      {
        __isset.tipoGlicemiaCapilar = true;
        this._tipoGlicemiaCapilar = value;
      }
    }

    public double Peso
    {
      get
      {
        return _peso;
      }
      set
      {
        __isset.peso = true;
        this._peso = value;
      }
    }

    public double Altura
    {
      get
      {
        return _altura;
      }
      set
      {
        __isset.altura = true;
        this._altura = value;
      }
    }

    public double PerimetroCefalico
    {
      get
      {
        return _perimetroCefalico;
      }
      set
      {
        __isset.perimetroCefalico = true;
        this._perimetroCefalico = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool circuferenciaAbdominal;
      public bool perimetroPanturrilha;
      public bool pressaoArterialSistolica;
      public bool pressaoArterialDiastolica;
      public bool frequenciaRespiratoria;
      public bool frequenciaCardiaca;
      public bool temperatura;
      public bool saturacaoO2;
      public bool glicemiaCapilar;
      public bool tipoGlicemiaCapilar;
      public bool peso;
      public bool altura;
      public bool perimetroCefalico;
    }

    public MedicoesThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                CircuferenciaAbdominal = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                PerimetroPanturrilha = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PressaoArterialSistolica = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                PressaoArterialDiastolica = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                FrequenciaRespiratoria = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                FrequenciaCardiaca = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Temperatura = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                SaturacaoO2 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                GlicemiaCapilar = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                TipoGlicemiaCapilar = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                Peso = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                Altura = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Double) {
                PerimetroCefalico = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MedicoesThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.circuferenciaAbdominal) {
          field.Name = "circuferenciaAbdominal";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(CircuferenciaAbdominal);
          oprot.WriteFieldEnd();
        }
        if (__isset.perimetroPanturrilha) {
          field.Name = "perimetroPanturrilha";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(PerimetroPanturrilha);
          oprot.WriteFieldEnd();
        }
        if (__isset.pressaoArterialSistolica) {
          field.Name = "pressaoArterialSistolica";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PressaoArterialSistolica);
          oprot.WriteFieldEnd();
        }
        if (__isset.pressaoArterialDiastolica) {
          field.Name = "pressaoArterialDiastolica";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PressaoArterialDiastolica);
          oprot.WriteFieldEnd();
        }
        if (__isset.frequenciaRespiratoria) {
          field.Name = "frequenciaRespiratoria";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FrequenciaRespiratoria);
          oprot.WriteFieldEnd();
        }
        if (__isset.frequenciaCardiaca) {
          field.Name = "frequenciaCardiaca";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FrequenciaCardiaca);
          oprot.WriteFieldEnd();
        }
        if (__isset.temperatura) {
          field.Name = "temperatura";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Temperatura);
          oprot.WriteFieldEnd();
        }
        if (__isset.saturacaoO2) {
          field.Name = "saturacaoO2";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SaturacaoO2);
          oprot.WriteFieldEnd();
        }
        if (__isset.glicemiaCapilar) {
          field.Name = "glicemiaCapilar";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GlicemiaCapilar);
          oprot.WriteFieldEnd();
        }
        if (__isset.tipoGlicemiaCapilar) {
          field.Name = "tipoGlicemiaCapilar";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TipoGlicemiaCapilar);
          oprot.WriteFieldEnd();
        }
        if (__isset.peso) {
          field.Name = "peso";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Peso);
          oprot.WriteFieldEnd();
        }
        if (__isset.altura) {
          field.Name = "altura";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Altura);
          oprot.WriteFieldEnd();
        }
        if (__isset.perimetroCefalico) {
          field.Name = "perimetroCefalico";
          field.Type = TType.Double;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(PerimetroCefalico);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MedicoesThrift(");
      bool __first = true;
      if (__isset.circuferenciaAbdominal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CircuferenciaAbdominal: ");
        __sb.Append(CircuferenciaAbdominal);
      }
      if (__isset.perimetroPanturrilha) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PerimetroPanturrilha: ");
        __sb.Append(PerimetroPanturrilha);
      }
      if (__isset.pressaoArterialSistolica) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PressaoArterialSistolica: ");
        __sb.Append(PressaoArterialSistolica);
      }
      if (__isset.pressaoArterialDiastolica) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PressaoArterialDiastolica: ");
        __sb.Append(PressaoArterialDiastolica);
      }
      if (__isset.frequenciaRespiratoria) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FrequenciaRespiratoria: ");
        __sb.Append(FrequenciaRespiratoria);
      }
      if (__isset.frequenciaCardiaca) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FrequenciaCardiaca: ");
        __sb.Append(FrequenciaCardiaca);
      }
      if (__isset.temperatura) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Temperatura: ");
        __sb.Append(Temperatura);
      }
      if (__isset.saturacaoO2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SaturacaoO2: ");
        __sb.Append(SaturacaoO2);
      }
      if (__isset.glicemiaCapilar) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GlicemiaCapilar: ");
        __sb.Append(GlicemiaCapilar);
      }
      if (__isset.tipoGlicemiaCapilar) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoGlicemiaCapilar: ");
        __sb.Append(TipoGlicemiaCapilar);
      }
      if (__isset.peso) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Peso: ");
        __sb.Append(Peso);
      }
      if (__isset.altura) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Altura: ");
        __sb.Append(Altura);
      }
      if (__isset.perimetroCefalico) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PerimetroCefalico: ");
        __sb.Append(PerimetroCefalico);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
