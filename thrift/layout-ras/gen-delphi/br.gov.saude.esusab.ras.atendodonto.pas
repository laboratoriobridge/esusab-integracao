(**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit br.gov.saude.esusab.ras.atendodonto;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport,
  br.gov.saude.esusab.ras.common;

const
  cbr_gov_saude_esusab_ras_atendodonto_Option_AnsiStr_Binary = False;
  cbr_gov_saude_esusab_ras_atendodonto_Option_Register_Types = False;
  cbr_gov_saude_esusab_ras_atendodonto_Option_ConstPrefix    = False;
  cbr_gov_saude_esusab_ras_atendodonto_Option_Events         = False;
  cbr_gov_saude_esusab_ras_atendodonto_Option_XmlDoc         = False;

type
  IProcedimentoQuantidadeThrift = interface;
  IFichaAtendimentoOdontologicoChildThrift = interface;
  IFichaAtendimentoOdontologicoMasterThrift = interface;

  IProcedimentoQuantidadeThrift = interface(IBase)
    function GetCoMsProcedimento: string;
    procedure SetCoMsProcedimento( const Value: string);
    function GetQuantidade: Integer;
    procedure SetQuantidade( const Value: Integer);

    property CoMsProcedimento: string read GetCoMsProcedimento write SetCoMsProcedimento;
    property Quantidade: Integer read GetQuantidade write SetQuantidade;

    function Get__isset_CoMsProcedimento: Boolean;
    function Get__isset_Quantidade: Boolean;

    property __isset_CoMsProcedimento: Boolean read Get__isset_CoMsProcedimento;
    property __isset_Quantidade: Boolean read Get__isset_Quantidade;
  end;

  TProcedimentoQuantidadeThriftImpl = class(TInterfacedObject, IBase, IProcedimentoQuantidadeThrift)
  private
    FCoMsProcedimento: string;
    FQuantidade: Integer;
    
    F__isset_CoMsProcedimento: Boolean;
    F__isset_Quantidade: Boolean;
    
    function GetCoMsProcedimento: string;
    procedure SetCoMsProcedimento( const Value: string);
    function GetQuantidade: Integer;
    procedure SetQuantidade( const Value: Integer);

    function Get__isset_CoMsProcedimento: Boolean;
    function Get__isset_Quantidade: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property CoMsProcedimento: string read GetCoMsProcedimento write SetCoMsProcedimento;
    property Quantidade: Integer read GetQuantidade write SetQuantidade;

    // isset
    property __isset_CoMsProcedimento: Boolean read Get__isset_CoMsProcedimento;
    property __isset_Quantidade: Boolean read Get__isset_Quantidade;
  end;

  IFichaAtendimentoOdontologicoChildThrift = interface(IBase)
    function GetDtNascimento: Int64;
    procedure SetDtNascimento( const Value: Int64);
    function GetCnsCidadao: string;
    procedure SetCnsCidadao( const Value: string);
    function GetNumProntuario: string;
    procedure SetNumProntuario( const Value: string);
    function GetGestante: Boolean;
    procedure SetGestante( const Value: Boolean);
    function GetNecessidadesEspeciais: Boolean;
    procedure SetNecessidadesEspeciais( const Value: Boolean);
    function GetLocalAtendimento: Int64;
    procedure SetLocalAtendimento( const Value: Int64);
    function GetTipoAtendimento: Int64;
    procedure SetTipoAtendimento( const Value: Int64);
    function GetTiposEncamOdonto: IThriftList<Int64>;
    procedure SetTiposEncamOdonto( const Value: IThriftList<Int64>);
    function GetTiposFornecimOdonto: IThriftList<Int64>;
    procedure SetTiposFornecimOdonto( const Value: IThriftList<Int64>);
    function GetTiposVigilanciaSaudeBucal: IThriftList<Int64>;
    procedure SetTiposVigilanciaSaudeBucal( const Value: IThriftList<Int64>);
    function GetTiposConsultaOdonto: IThriftList<Int64>;
    procedure SetTiposConsultaOdonto( const Value: IThriftList<Int64>);
    function GetProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift>;
    procedure SetProcedimentosRealizados( const Value: IThriftList<IProcedimentoQuantidadeThrift>);
    function GetSexo: Int64;
    procedure SetSexo( const Value: Int64);
    function GetTurno: Int64;
    procedure SetTurno( const Value: Int64);
    function GetDataHoraInicialAtendimento: Int64;
    procedure SetDataHoraInicialAtendimento( const Value: Int64);
    function GetDataHoraFinalAtendimento: Int64;
    procedure SetDataHoraFinalAtendimento( const Value: Int64);
    function GetCpfCidadao: string;
    procedure SetCpfCidadao( const Value: string);
    function GetMedicamentos: IThriftList<IMedicamentoThrift>;
    procedure SetMedicamentos( const Value: IThriftList<IMedicamentoThrift>);
    function GetEncaminhamentos: IThriftList<IEncaminhamentoExternoThrift>;
    procedure SetEncaminhamentos( const Value: IThriftList<IEncaminhamentoExternoThrift>);
    function GetResultadosExames: IThriftList<IResultadosExameThrift>;
    procedure SetResultadosExames( const Value: IThriftList<IResultadosExameThrift>);
    function GetPesoAcompanhamentoNutricional: Double;
    procedure SetPesoAcompanhamentoNutricional( const Value: Double);
    function GetAlturaAcompanhamentoNutricional: Double;
    procedure SetAlturaAcompanhamentoNutricional( const Value: Double);
    function GetMedicoes: IMedicoesThrift;
    procedure SetMedicoes( const Value: IMedicoesThrift);

    property DtNascimento: Int64 read GetDtNascimento write SetDtNascimento;
    property CnsCidadao: string read GetCnsCidadao write SetCnsCidadao;
    property NumProntuario: string read GetNumProntuario write SetNumProntuario;
    property Gestante: Boolean read GetGestante write SetGestante;
    property NecessidadesEspeciais: Boolean read GetNecessidadesEspeciais write SetNecessidadesEspeciais;
    property LocalAtendimento: Int64 read GetLocalAtendimento write SetLocalAtendimento;
    property TipoAtendimento: Int64 read GetTipoAtendimento write SetTipoAtendimento;
    property TiposEncamOdonto: IThriftList<Int64> read GetTiposEncamOdonto write SetTiposEncamOdonto;
    property TiposFornecimOdonto: IThriftList<Int64> read GetTiposFornecimOdonto write SetTiposFornecimOdonto;
    property TiposVigilanciaSaudeBucal: IThriftList<Int64> read GetTiposVigilanciaSaudeBucal write SetTiposVigilanciaSaudeBucal;
    property TiposConsultaOdonto: IThriftList<Int64> read GetTiposConsultaOdonto write SetTiposConsultaOdonto;
    property ProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift> read GetProcedimentosRealizados write SetProcedimentosRealizados;
    property Sexo: Int64 read GetSexo write SetSexo;
    property Turno: Int64 read GetTurno write SetTurno;
    property DataHoraInicialAtendimento: Int64 read GetDataHoraInicialAtendimento write SetDataHoraInicialAtendimento;
    property DataHoraFinalAtendimento: Int64 read GetDataHoraFinalAtendimento write SetDataHoraFinalAtendimento;
    property CpfCidadao: string read GetCpfCidadao write SetCpfCidadao;
    property Medicamentos: IThriftList<IMedicamentoThrift> read GetMedicamentos write SetMedicamentos;
    property Encaminhamentos: IThriftList<IEncaminhamentoExternoThrift> read GetEncaminhamentos write SetEncaminhamentos;
    property ResultadosExames: IThriftList<IResultadosExameThrift> read GetResultadosExames write SetResultadosExames;
    property PesoAcompanhamentoNutricional: Double read GetPesoAcompanhamentoNutricional write SetPesoAcompanhamentoNutricional;
    property AlturaAcompanhamentoNutricional: Double read GetAlturaAcompanhamentoNutricional write SetAlturaAcompanhamentoNutricional;
    property Medicoes: IMedicoesThrift read GetMedicoes write SetMedicoes;

    function Get__isset_DtNascimento: Boolean;
    function Get__isset_CnsCidadao: Boolean;
    function Get__isset_NumProntuario: Boolean;
    function Get__isset_Gestante: Boolean;
    function Get__isset_NecessidadesEspeciais: Boolean;
    function Get__isset_LocalAtendimento: Boolean;
    function Get__isset_TipoAtendimento: Boolean;
    function Get__isset_TiposEncamOdonto: Boolean;
    function Get__isset_TiposFornecimOdonto: Boolean;
    function Get__isset_TiposVigilanciaSaudeBucal: Boolean;
    function Get__isset_TiposConsultaOdonto: Boolean;
    function Get__isset_ProcedimentosRealizados: Boolean;
    function Get__isset_Sexo: Boolean;
    function Get__isset_Turno: Boolean;
    function Get__isset_DataHoraInicialAtendimento: Boolean;
    function Get__isset_DataHoraFinalAtendimento: Boolean;
    function Get__isset_CpfCidadao: Boolean;
    function Get__isset_Medicamentos: Boolean;
    function Get__isset_Encaminhamentos: Boolean;
    function Get__isset_ResultadosExames: Boolean;
    function Get__isset_PesoAcompanhamentoNutricional: Boolean;
    function Get__isset_AlturaAcompanhamentoNutricional: Boolean;
    function Get__isset_Medicoes: Boolean;

    property __isset_DtNascimento: Boolean read Get__isset_DtNascimento;
    property __isset_CnsCidadao: Boolean read Get__isset_CnsCidadao;
    property __isset_NumProntuario: Boolean read Get__isset_NumProntuario;
    property __isset_Gestante: Boolean read Get__isset_Gestante;
    property __isset_NecessidadesEspeciais: Boolean read Get__isset_NecessidadesEspeciais;
    property __isset_LocalAtendimento: Boolean read Get__isset_LocalAtendimento;
    property __isset_TipoAtendimento: Boolean read Get__isset_TipoAtendimento;
    property __isset_TiposEncamOdonto: Boolean read Get__isset_TiposEncamOdonto;
    property __isset_TiposFornecimOdonto: Boolean read Get__isset_TiposFornecimOdonto;
    property __isset_TiposVigilanciaSaudeBucal: Boolean read Get__isset_TiposVigilanciaSaudeBucal;
    property __isset_TiposConsultaOdonto: Boolean read Get__isset_TiposConsultaOdonto;
    property __isset_ProcedimentosRealizados: Boolean read Get__isset_ProcedimentosRealizados;
    property __isset_Sexo: Boolean read Get__isset_Sexo;
    property __isset_Turno: Boolean read Get__isset_Turno;
    property __isset_DataHoraInicialAtendimento: Boolean read Get__isset_DataHoraInicialAtendimento;
    property __isset_DataHoraFinalAtendimento: Boolean read Get__isset_DataHoraFinalAtendimento;
    property __isset_CpfCidadao: Boolean read Get__isset_CpfCidadao;
    property __isset_Medicamentos: Boolean read Get__isset_Medicamentos;
    property __isset_Encaminhamentos: Boolean read Get__isset_Encaminhamentos;
    property __isset_ResultadosExames: Boolean read Get__isset_ResultadosExames;
    property __isset_PesoAcompanhamentoNutricional: Boolean read Get__isset_PesoAcompanhamentoNutricional;
    property __isset_AlturaAcompanhamentoNutricional: Boolean read Get__isset_AlturaAcompanhamentoNutricional;
    property __isset_Medicoes: Boolean read Get__isset_Medicoes;
  end;

  TFichaAtendimentoOdontologicoChildThriftImpl = class(TInterfacedObject, IBase, IFichaAtendimentoOdontologicoChildThrift)
  private
    FDtNascimento: Int64;
    FCnsCidadao: string;
    FNumProntuario: string;
    FGestante: Boolean;
    FNecessidadesEspeciais: Boolean;
    FLocalAtendimento: Int64;
    FTipoAtendimento: Int64;
    FTiposEncamOdonto: IThriftList<Int64>;
    FTiposFornecimOdonto: IThriftList<Int64>;
    FTiposVigilanciaSaudeBucal: IThriftList<Int64>;
    FTiposConsultaOdonto: IThriftList<Int64>;
    FProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift>;
    FSexo: Int64;
    FTurno: Int64;
    FDataHoraInicialAtendimento: Int64;
    FDataHoraFinalAtendimento: Int64;
    FCpfCidadao: string;
    FMedicamentos: IThriftList<IMedicamentoThrift>;
    FEncaminhamentos: IThriftList<IEncaminhamentoExternoThrift>;
    FResultadosExames: IThriftList<IResultadosExameThrift>;
    FPesoAcompanhamentoNutricional: Double;
    FAlturaAcompanhamentoNutricional: Double;
    FMedicoes: IMedicoesThrift;
    
    F__isset_DtNascimento: Boolean;
    F__isset_CnsCidadao: Boolean;
    F__isset_NumProntuario: Boolean;
    F__isset_Gestante: Boolean;
    F__isset_NecessidadesEspeciais: Boolean;
    F__isset_LocalAtendimento: Boolean;
    F__isset_TipoAtendimento: Boolean;
    F__isset_TiposEncamOdonto: Boolean;
    F__isset_TiposFornecimOdonto: Boolean;
    F__isset_TiposVigilanciaSaudeBucal: Boolean;
    F__isset_TiposConsultaOdonto: Boolean;
    F__isset_ProcedimentosRealizados: Boolean;
    F__isset_Sexo: Boolean;
    F__isset_Turno: Boolean;
    F__isset_DataHoraInicialAtendimento: Boolean;
    F__isset_DataHoraFinalAtendimento: Boolean;
    F__isset_CpfCidadao: Boolean;
    F__isset_Medicamentos: Boolean;
    F__isset_Encaminhamentos: Boolean;
    F__isset_ResultadosExames: Boolean;
    F__isset_PesoAcompanhamentoNutricional: Boolean;
    F__isset_AlturaAcompanhamentoNutricional: Boolean;
    F__isset_Medicoes: Boolean;
    
    function GetDtNascimento: Int64;
    procedure SetDtNascimento( const Value: Int64);
    function GetCnsCidadao: string;
    procedure SetCnsCidadao( const Value: string);
    function GetNumProntuario: string;
    procedure SetNumProntuario( const Value: string);
    function GetGestante: Boolean;
    procedure SetGestante( const Value: Boolean);
    function GetNecessidadesEspeciais: Boolean;
    procedure SetNecessidadesEspeciais( const Value: Boolean);
    function GetLocalAtendimento: Int64;
    procedure SetLocalAtendimento( const Value: Int64);
    function GetTipoAtendimento: Int64;
    procedure SetTipoAtendimento( const Value: Int64);
    function GetTiposEncamOdonto: IThriftList<Int64>;
    procedure SetTiposEncamOdonto( const Value: IThriftList<Int64>);
    function GetTiposFornecimOdonto: IThriftList<Int64>;
    procedure SetTiposFornecimOdonto( const Value: IThriftList<Int64>);
    function GetTiposVigilanciaSaudeBucal: IThriftList<Int64>;
    procedure SetTiposVigilanciaSaudeBucal( const Value: IThriftList<Int64>);
    function GetTiposConsultaOdonto: IThriftList<Int64>;
    procedure SetTiposConsultaOdonto( const Value: IThriftList<Int64>);
    function GetProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift>;
    procedure SetProcedimentosRealizados( const Value: IThriftList<IProcedimentoQuantidadeThrift>);
    function GetSexo: Int64;
    procedure SetSexo( const Value: Int64);
    function GetTurno: Int64;
    procedure SetTurno( const Value: Int64);
    function GetDataHoraInicialAtendimento: Int64;
    procedure SetDataHoraInicialAtendimento( const Value: Int64);
    function GetDataHoraFinalAtendimento: Int64;
    procedure SetDataHoraFinalAtendimento( const Value: Int64);
    function GetCpfCidadao: string;
    procedure SetCpfCidadao( const Value: string);
    function GetMedicamentos: IThriftList<IMedicamentoThrift>;
    procedure SetMedicamentos( const Value: IThriftList<IMedicamentoThrift>);
    function GetEncaminhamentos: IThriftList<IEncaminhamentoExternoThrift>;
    procedure SetEncaminhamentos( const Value: IThriftList<IEncaminhamentoExternoThrift>);
    function GetResultadosExames: IThriftList<IResultadosExameThrift>;
    procedure SetResultadosExames( const Value: IThriftList<IResultadosExameThrift>);
    function GetPesoAcompanhamentoNutricional: Double;
    procedure SetPesoAcompanhamentoNutricional( const Value: Double);
    function GetAlturaAcompanhamentoNutricional: Double;
    procedure SetAlturaAcompanhamentoNutricional( const Value: Double);
    function GetMedicoes: IMedicoesThrift;
    procedure SetMedicoes( const Value: IMedicoesThrift);

    function Get__isset_DtNascimento: Boolean;
    function Get__isset_CnsCidadao: Boolean;
    function Get__isset_NumProntuario: Boolean;
    function Get__isset_Gestante: Boolean;
    function Get__isset_NecessidadesEspeciais: Boolean;
    function Get__isset_LocalAtendimento: Boolean;
    function Get__isset_TipoAtendimento: Boolean;
    function Get__isset_TiposEncamOdonto: Boolean;
    function Get__isset_TiposFornecimOdonto: Boolean;
    function Get__isset_TiposVigilanciaSaudeBucal: Boolean;
    function Get__isset_TiposConsultaOdonto: Boolean;
    function Get__isset_ProcedimentosRealizados: Boolean;
    function Get__isset_Sexo: Boolean;
    function Get__isset_Turno: Boolean;
    function Get__isset_DataHoraInicialAtendimento: Boolean;
    function Get__isset_DataHoraFinalAtendimento: Boolean;
    function Get__isset_CpfCidadao: Boolean;
    function Get__isset_Medicamentos: Boolean;
    function Get__isset_Encaminhamentos: Boolean;
    function Get__isset_ResultadosExames: Boolean;
    function Get__isset_PesoAcompanhamentoNutricional: Boolean;
    function Get__isset_AlturaAcompanhamentoNutricional: Boolean;
    function Get__isset_Medicoes: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property DtNascimento: Int64 read GetDtNascimento write SetDtNascimento;
    property CnsCidadao: string read GetCnsCidadao write SetCnsCidadao;
    property NumProntuario: string read GetNumProntuario write SetNumProntuario;
    property Gestante: Boolean read GetGestante write SetGestante;
    property NecessidadesEspeciais: Boolean read GetNecessidadesEspeciais write SetNecessidadesEspeciais;
    property LocalAtendimento: Int64 read GetLocalAtendimento write SetLocalAtendimento;
    property TipoAtendimento: Int64 read GetTipoAtendimento write SetTipoAtendimento;
    property TiposEncamOdonto: IThriftList<Int64> read GetTiposEncamOdonto write SetTiposEncamOdonto;
    property TiposFornecimOdonto: IThriftList<Int64> read GetTiposFornecimOdonto write SetTiposFornecimOdonto;
    property TiposVigilanciaSaudeBucal: IThriftList<Int64> read GetTiposVigilanciaSaudeBucal write SetTiposVigilanciaSaudeBucal;
    property TiposConsultaOdonto: IThriftList<Int64> read GetTiposConsultaOdonto write SetTiposConsultaOdonto;
    property ProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift> read GetProcedimentosRealizados write SetProcedimentosRealizados;
    property Sexo: Int64 read GetSexo write SetSexo;
    property Turno: Int64 read GetTurno write SetTurno;
    property DataHoraInicialAtendimento: Int64 read GetDataHoraInicialAtendimento write SetDataHoraInicialAtendimento;
    property DataHoraFinalAtendimento: Int64 read GetDataHoraFinalAtendimento write SetDataHoraFinalAtendimento;
    property CpfCidadao: string read GetCpfCidadao write SetCpfCidadao;
    property Medicamentos: IThriftList<IMedicamentoThrift> read GetMedicamentos write SetMedicamentos;
    property Encaminhamentos: IThriftList<IEncaminhamentoExternoThrift> read GetEncaminhamentos write SetEncaminhamentos;
    property ResultadosExames: IThriftList<IResultadosExameThrift> read GetResultadosExames write SetResultadosExames;
    property PesoAcompanhamentoNutricional: Double read GetPesoAcompanhamentoNutricional write SetPesoAcompanhamentoNutricional;
    property AlturaAcompanhamentoNutricional: Double read GetAlturaAcompanhamentoNutricional write SetAlturaAcompanhamentoNutricional;
    property Medicoes: IMedicoesThrift read GetMedicoes write SetMedicoes;

    // isset
    property __isset_DtNascimento: Boolean read Get__isset_DtNascimento;
    property __isset_CnsCidadao: Boolean read Get__isset_CnsCidadao;
    property __isset_NumProntuario: Boolean read Get__isset_NumProntuario;
    property __isset_Gestante: Boolean read Get__isset_Gestante;
    property __isset_NecessidadesEspeciais: Boolean read Get__isset_NecessidadesEspeciais;
    property __isset_LocalAtendimento: Boolean read Get__isset_LocalAtendimento;
    property __isset_TipoAtendimento: Boolean read Get__isset_TipoAtendimento;
    property __isset_TiposEncamOdonto: Boolean read Get__isset_TiposEncamOdonto;
    property __isset_TiposFornecimOdonto: Boolean read Get__isset_TiposFornecimOdonto;
    property __isset_TiposVigilanciaSaudeBucal: Boolean read Get__isset_TiposVigilanciaSaudeBucal;
    property __isset_TiposConsultaOdonto: Boolean read Get__isset_TiposConsultaOdonto;
    property __isset_ProcedimentosRealizados: Boolean read Get__isset_ProcedimentosRealizados;
    property __isset_Sexo: Boolean read Get__isset_Sexo;
    property __isset_Turno: Boolean read Get__isset_Turno;
    property __isset_DataHoraInicialAtendimento: Boolean read Get__isset_DataHoraInicialAtendimento;
    property __isset_DataHoraFinalAtendimento: Boolean read Get__isset_DataHoraFinalAtendimento;
    property __isset_CpfCidadao: Boolean read Get__isset_CpfCidadao;
    property __isset_Medicamentos: Boolean read Get__isset_Medicamentos;
    property __isset_Encaminhamentos: Boolean read Get__isset_Encaminhamentos;
    property __isset_ResultadosExames: Boolean read Get__isset_ResultadosExames;
    property __isset_PesoAcompanhamentoNutricional: Boolean read Get__isset_PesoAcompanhamentoNutricional;
    property __isset_AlturaAcompanhamentoNutricional: Boolean read Get__isset_AlturaAcompanhamentoNutricional;
    property __isset_Medicoes: Boolean read Get__isset_Medicoes;
  end;

  IFichaAtendimentoOdontologicoMasterThrift = interface(IBase)
    function GetUuidFicha: string;
    procedure SetUuidFicha( const Value: string);
    function GetHeaderTransport: IVariasLotacoesHeaderThrift;
    procedure SetHeaderTransport( const Value: IVariasLotacoesHeaderThrift);
    function GetAtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift>;
    procedure SetAtendimentosOdontologicos( const Value: IThriftList<IFichaAtendimentoOdontologicoChildThrift>);
    function GetTpCdsOrigem: Integer;
    procedure SetTpCdsOrigem( const Value: Integer);

    property UuidFicha: string read GetUuidFicha write SetUuidFicha;
    property HeaderTransport: IVariasLotacoesHeaderThrift read GetHeaderTransport write SetHeaderTransport;
    property AtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift> read GetAtendimentosOdontologicos write SetAtendimentosOdontologicos;
    property TpCdsOrigem: Integer read GetTpCdsOrigem write SetTpCdsOrigem;

    function Get__isset_HeaderTransport: Boolean;
    function Get__isset_AtendimentosOdontologicos: Boolean;
    function Get__isset_TpCdsOrigem: Boolean;

    property __isset_HeaderTransport: Boolean read Get__isset_HeaderTransport;
    property __isset_AtendimentosOdontologicos: Boolean read Get__isset_AtendimentosOdontologicos;
    property __isset_TpCdsOrigem: Boolean read Get__isset_TpCdsOrigem;
  end;

  TFichaAtendimentoOdontologicoMasterThriftImpl = class(TInterfacedObject, IBase, IFichaAtendimentoOdontologicoMasterThrift)
  private
    FUuidFicha: string;
    FHeaderTransport: IVariasLotacoesHeaderThrift;
    FAtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift>;
    FTpCdsOrigem: Integer;
    
    F__isset_HeaderTransport: Boolean;
    F__isset_AtendimentosOdontologicos: Boolean;
    F__isset_TpCdsOrigem: Boolean;
    
    function GetUuidFicha: string;
    procedure SetUuidFicha( const Value: string);
    function GetHeaderTransport: IVariasLotacoesHeaderThrift;
    procedure SetHeaderTransport( const Value: IVariasLotacoesHeaderThrift);
    function GetAtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift>;
    procedure SetAtendimentosOdontologicos( const Value: IThriftList<IFichaAtendimentoOdontologicoChildThrift>);
    function GetTpCdsOrigem: Integer;
    procedure SetTpCdsOrigem( const Value: Integer);

    function Get__isset_HeaderTransport: Boolean;
    function Get__isset_AtendimentosOdontologicos: Boolean;
    function Get__isset_TpCdsOrigem: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property UuidFicha: string read GetUuidFicha write SetUuidFicha;
    property HeaderTransport: IVariasLotacoesHeaderThrift read GetHeaderTransport write SetHeaderTransport;
    property AtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift> read GetAtendimentosOdontologicos write SetAtendimentosOdontologicos;
    property TpCdsOrigem: Integer read GetTpCdsOrigem write SetTpCdsOrigem;

    // isset
    property __isset_HeaderTransport: Boolean read Get__isset_HeaderTransport;
    property __isset_AtendimentosOdontologicos: Boolean read Get__isset_AtendimentosOdontologicos;
    property __isset_TpCdsOrigem: Boolean read Get__isset_TpCdsOrigem;
  end;

implementation

constructor TProcedimentoQuantidadeThriftImpl.Create;
begin
  inherited;
end;

destructor TProcedimentoQuantidadeThriftImpl.Destroy;
begin
  inherited;
end;

function TProcedimentoQuantidadeThriftImpl.GetCoMsProcedimento: string;
begin
  Result := FCoMsProcedimento;
end;

procedure TProcedimentoQuantidadeThriftImpl.SetCoMsProcedimento( const Value: string);
begin
  F__isset_CoMsProcedimento := True;
  FCoMsProcedimento := Value;
end;

function TProcedimentoQuantidadeThriftImpl.Get__isset_CoMsProcedimento: Boolean;
begin
  Result := F__isset_CoMsProcedimento;
end;

function TProcedimentoQuantidadeThriftImpl.GetQuantidade: Integer;
begin
  Result := FQuantidade;
end;

procedure TProcedimentoQuantidadeThriftImpl.SetQuantidade( const Value: Integer);
begin
  F__isset_Quantidade := True;
  FQuantidade := Value;
end;

function TProcedimentoQuantidadeThriftImpl.Get__isset_Quantidade: Boolean;
begin
  Result := F__isset_Quantidade;
end;

procedure TProcedimentoQuantidadeThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            CoMsProcedimento := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I32) then
          begin
            Quantidade := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TProcedimentoQuantidadeThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('ProcedimentoQuantidadeThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CoMsProcedimento) then
  begin
    field_.Name := 'coMsProcedimento';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CoMsProcedimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Quantidade) then
  begin
    field_.Name := 'quantidade';
    field_.Type_  := TType.I32;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(Quantidade);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TProcedimentoQuantidadeThriftImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (__isset_CoMsProcedimento) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CoMsProcedimento: ');
      _sb0.Append(CoMsProcedimento);
    end;
    if (__isset_Quantidade) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Quantidade: ');
      _sb0.Append(Quantidade);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;

constructor TFichaAtendimentoOdontologicoChildThriftImpl.Create;
begin
  inherited;
end;

destructor TFichaAtendimentoOdontologicoChildThriftImpl.Destroy;
begin
  inherited;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetDtNascimento: Int64;
begin
  Result := FDtNascimento;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetDtNascimento( const Value: Int64);
begin
  F__isset_DtNascimento := True;
  FDtNascimento := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_DtNascimento: Boolean;
begin
  Result := F__isset_DtNascimento;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetCnsCidadao: string;
begin
  Result := FCnsCidadao;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetCnsCidadao( const Value: string);
begin
  F__isset_CnsCidadao := True;
  FCnsCidadao := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_CnsCidadao: Boolean;
begin
  Result := F__isset_CnsCidadao;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetNumProntuario: string;
begin
  Result := FNumProntuario;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetNumProntuario( const Value: string);
begin
  F__isset_NumProntuario := True;
  FNumProntuario := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_NumProntuario: Boolean;
begin
  Result := F__isset_NumProntuario;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetGestante: Boolean;
begin
  Result := FGestante;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetGestante( const Value: Boolean);
begin
  F__isset_Gestante := True;
  FGestante := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Gestante: Boolean;
begin
  Result := F__isset_Gestante;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetNecessidadesEspeciais: Boolean;
begin
  Result := FNecessidadesEspeciais;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetNecessidadesEspeciais( const Value: Boolean);
begin
  F__isset_NecessidadesEspeciais := True;
  FNecessidadesEspeciais := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_NecessidadesEspeciais: Boolean;
begin
  Result := F__isset_NecessidadesEspeciais;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetLocalAtendimento: Int64;
begin
  Result := FLocalAtendimento;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetLocalAtendimento( const Value: Int64);
begin
  F__isset_LocalAtendimento := True;
  FLocalAtendimento := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_LocalAtendimento: Boolean;
begin
  Result := F__isset_LocalAtendimento;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTipoAtendimento: Int64;
begin
  Result := FTipoAtendimento;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTipoAtendimento( const Value: Int64);
begin
  F__isset_TipoAtendimento := True;
  FTipoAtendimento := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_TipoAtendimento: Boolean;
begin
  Result := F__isset_TipoAtendimento;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTiposEncamOdonto: IThriftList<Int64>;
begin
  Result := FTiposEncamOdonto;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTiposEncamOdonto( const Value: IThriftList<Int64>);
begin
  F__isset_TiposEncamOdonto := True;
  FTiposEncamOdonto := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_TiposEncamOdonto: Boolean;
begin
  Result := F__isset_TiposEncamOdonto;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTiposFornecimOdonto: IThriftList<Int64>;
begin
  Result := FTiposFornecimOdonto;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTiposFornecimOdonto( const Value: IThriftList<Int64>);
begin
  F__isset_TiposFornecimOdonto := True;
  FTiposFornecimOdonto := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_TiposFornecimOdonto: Boolean;
begin
  Result := F__isset_TiposFornecimOdonto;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTiposVigilanciaSaudeBucal: IThriftList<Int64>;
begin
  Result := FTiposVigilanciaSaudeBucal;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTiposVigilanciaSaudeBucal( const Value: IThriftList<Int64>);
begin
  F__isset_TiposVigilanciaSaudeBucal := True;
  FTiposVigilanciaSaudeBucal := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_TiposVigilanciaSaudeBucal: Boolean;
begin
  Result := F__isset_TiposVigilanciaSaudeBucal;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTiposConsultaOdonto: IThriftList<Int64>;
begin
  Result := FTiposConsultaOdonto;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTiposConsultaOdonto( const Value: IThriftList<Int64>);
begin
  F__isset_TiposConsultaOdonto := True;
  FTiposConsultaOdonto := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_TiposConsultaOdonto: Boolean;
begin
  Result := F__isset_TiposConsultaOdonto;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetProcedimentosRealizados: IThriftList<IProcedimentoQuantidadeThrift>;
begin
  Result := FProcedimentosRealizados;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetProcedimentosRealizados( const Value: IThriftList<IProcedimentoQuantidadeThrift>);
begin
  F__isset_ProcedimentosRealizados := True;
  FProcedimentosRealizados := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_ProcedimentosRealizados: Boolean;
begin
  Result := F__isset_ProcedimentosRealizados;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetSexo: Int64;
begin
  Result := FSexo;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetSexo( const Value: Int64);
begin
  F__isset_Sexo := True;
  FSexo := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Sexo: Boolean;
begin
  Result := F__isset_Sexo;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetTurno: Int64;
begin
  Result := FTurno;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetTurno( const Value: Int64);
begin
  F__isset_Turno := True;
  FTurno := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Turno: Boolean;
begin
  Result := F__isset_Turno;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetDataHoraInicialAtendimento: Int64;
begin
  Result := FDataHoraInicialAtendimento;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetDataHoraInicialAtendimento( const Value: Int64);
begin
  F__isset_DataHoraInicialAtendimento := True;
  FDataHoraInicialAtendimento := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_DataHoraInicialAtendimento: Boolean;
begin
  Result := F__isset_DataHoraInicialAtendimento;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetDataHoraFinalAtendimento: Int64;
begin
  Result := FDataHoraFinalAtendimento;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetDataHoraFinalAtendimento( const Value: Int64);
begin
  F__isset_DataHoraFinalAtendimento := True;
  FDataHoraFinalAtendimento := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_DataHoraFinalAtendimento: Boolean;
begin
  Result := F__isset_DataHoraFinalAtendimento;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetCpfCidadao: string;
begin
  Result := FCpfCidadao;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetCpfCidadao( const Value: string);
begin
  F__isset_CpfCidadao := True;
  FCpfCidadao := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_CpfCidadao: Boolean;
begin
  Result := F__isset_CpfCidadao;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetMedicamentos: IThriftList<IMedicamentoThrift>;
begin
  Result := FMedicamentos;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetMedicamentos( const Value: IThriftList<IMedicamentoThrift>);
begin
  F__isset_Medicamentos := True;
  FMedicamentos := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Medicamentos: Boolean;
begin
  Result := F__isset_Medicamentos;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetEncaminhamentos: IThriftList<IEncaminhamentoExternoThrift>;
begin
  Result := FEncaminhamentos;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetEncaminhamentos( const Value: IThriftList<IEncaminhamentoExternoThrift>);
begin
  F__isset_Encaminhamentos := True;
  FEncaminhamentos := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Encaminhamentos: Boolean;
begin
  Result := F__isset_Encaminhamentos;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetResultadosExames: IThriftList<IResultadosExameThrift>;
begin
  Result := FResultadosExames;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetResultadosExames( const Value: IThriftList<IResultadosExameThrift>);
begin
  F__isset_ResultadosExames := True;
  FResultadosExames := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_ResultadosExames: Boolean;
begin
  Result := F__isset_ResultadosExames;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetPesoAcompanhamentoNutricional: Double;
begin
  Result := FPesoAcompanhamentoNutricional;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetPesoAcompanhamentoNutricional( const Value: Double);
begin
  F__isset_PesoAcompanhamentoNutricional := True;
  FPesoAcompanhamentoNutricional := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_PesoAcompanhamentoNutricional: Boolean;
begin
  Result := F__isset_PesoAcompanhamentoNutricional;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetAlturaAcompanhamentoNutricional: Double;
begin
  Result := FAlturaAcompanhamentoNutricional;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetAlturaAcompanhamentoNutricional( const Value: Double);
begin
  F__isset_AlturaAcompanhamentoNutricional := True;
  FAlturaAcompanhamentoNutricional := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_AlturaAcompanhamentoNutricional: Boolean;
begin
  Result := F__isset_AlturaAcompanhamentoNutricional;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.GetMedicoes: IMedicoesThrift;
begin
  Result := FMedicoes;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.SetMedicoes( const Value: IMedicoesThrift);
begin
  F__isset_Medicoes := True;
  FMedicoes := Value;
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.Get__isset_Medicoes: Boolean;
begin
  Result := F__isset_Medicoes;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;
  _list2: IList;
  _i3: Integer;
  _elem4: Int64;
  _list5: IList;
  _i6: Integer;
  _elem7: Int64;
  _list8: IList;
  _i9: Integer;
  _elem10: Int64;
  _list11: IList;
  _i12: Integer;
  _elem13: Int64;
  _list14: IList;
  _i15: Integer;
  _elem16: IProcedimentoQuantidadeThrift;
  _list17: IList;
  _i18: Integer;
  _elem19: IMedicamentoThrift;
  _list20: IList;
  _i21: Integer;
  _elem22: IEncaminhamentoExternoThrift;
  _list23: IList;
  _i24: Integer;
  _elem25: IResultadosExameThrift;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I64) then
          begin
            DtNascimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CnsCidadao := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            NumProntuario := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            Gestante := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            NecessidadesEspeciais := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.I64) then
          begin
            LocalAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.I64) then
          begin
            TipoAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.List) then
          begin
            TiposEncamOdonto := TThriftListImpl<Int64>.Create;
            _list2 := iprot.ReadListBegin();
            for _i3 := 0 to _list2.Count - 1 do
            begin
              _elem4 := iprot.ReadI64();
              TiposEncamOdonto.Add(_elem4);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.List) then
          begin
            TiposFornecimOdonto := TThriftListImpl<Int64>.Create;
            _list5 := iprot.ReadListBegin();
            for _i6 := 0 to _list5.Count - 1 do
            begin
              _elem7 := iprot.ReadI64();
              TiposFornecimOdonto.Add(_elem7);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.List) then
          begin
            TiposVigilanciaSaudeBucal := TThriftListImpl<Int64>.Create;
            _list8 := iprot.ReadListBegin();
            for _i9 := 0 to _list8.Count - 1 do
            begin
              _elem10 := iprot.ReadI64();
              TiposVigilanciaSaudeBucal.Add(_elem10);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.List) then
          begin
            TiposConsultaOdonto := TThriftListImpl<Int64>.Create;
            _list11 := iprot.ReadListBegin();
            for _i12 := 0 to _list11.Count - 1 do
            begin
              _elem13 := iprot.ReadI64();
              TiposConsultaOdonto.Add(_elem13);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.List) then
          begin
            ProcedimentosRealizados := TThriftListImpl<IProcedimentoQuantidadeThrift>.Create;
            _list14 := iprot.ReadListBegin();
            for _i15 := 0 to _list14.Count - 1 do
            begin
              _elem16 := TProcedimentoQuantidadeThriftImpl.Create;
              _elem16.Read(iprot);
              ProcedimentosRealizados.Add(_elem16);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        14: begin
          if (field_.Type_ = TType.I64) then
          begin
            Sexo := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        15: begin
          if (field_.Type_ = TType.I64) then
          begin
            Turno := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        16: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataHoraInicialAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        17: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataHoraFinalAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        18: begin
          if (field_.Type_ = TType.String_) then
          begin
            CpfCidadao := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        19: begin
          if (field_.Type_ = TType.List) then
          begin
            Medicamentos := TThriftListImpl<IMedicamentoThrift>.Create;
            _list17 := iprot.ReadListBegin();
            for _i18 := 0 to _list17.Count - 1 do
            begin
              _elem19 := TMedicamentoThriftImpl.Create;
              _elem19.Read(iprot);
              Medicamentos.Add(_elem19);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        20: begin
          if (field_.Type_ = TType.List) then
          begin
            Encaminhamentos := TThriftListImpl<IEncaminhamentoExternoThrift>.Create;
            _list20 := iprot.ReadListBegin();
            for _i21 := 0 to _list20.Count - 1 do
            begin
              _elem22 := TEncaminhamentoExternoThriftImpl.Create;
              _elem22.Read(iprot);
              Encaminhamentos.Add(_elem22);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        21: begin
          if (field_.Type_ = TType.List) then
          begin
            ResultadosExames := TThriftListImpl<IResultadosExameThrift>.Create;
            _list23 := iprot.ReadListBegin();
            for _i24 := 0 to _list23.Count - 1 do
            begin
              _elem25 := TResultadosExameThriftImpl.Create;
              _elem25.Read(iprot);
              ResultadosExames.Add(_elem25);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        22: begin
          if (field_.Type_ = TType.Double_) then
          begin
            PesoAcompanhamentoNutricional := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        23: begin
          if (field_.Type_ = TType.Double_) then
          begin
            AlturaAcompanhamentoNutricional := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        27: begin
          if (field_.Type_ = TType.Struct) then
          begin
            Medicoes := TMedicoesThriftImpl.Create;
            Medicoes.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TFichaAtendimentoOdontologicoChildThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
  list_26 : IList;
  _iter27: Int64;
  list_28 : IList;
  _iter29: Int64;
  list_30 : IList;
  _iter31: Int64;
  list_32 : IList;
  _iter33: Int64;
  list_34 : IList;
  _iter35: IProcedimentoQuantidadeThrift;
  list_36 : IList;
  _iter37: IMedicamentoThrift;
  list_38 : IList;
  _iter39: IEncaminhamentoExternoThrift;
  list_40 : IList;
  _iter41: IResultadosExameThrift;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('FichaAtendimentoOdontologicoChildThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_DtNascimento) then
  begin
    field_.Name := 'dtNascimento';
    field_.Type_  := TType.I64;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DtNascimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CnsCidadao) then
  begin
    field_.Name := 'cnsCidadao';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CnsCidadao);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NumProntuario) then
  begin
    field_.Name := 'numProntuario';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(NumProntuario);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Gestante) then
  begin
    field_.Name := 'gestante';
    field_.Type_  := TType.Bool_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(Gestante);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NecessidadesEspeciais) then
  begin
    field_.Name := 'necessidadesEspeciais';
    field_.Type_  := TType.Bool_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(NecessidadesEspeciais);
    oprot.WriteFieldEnd();
  end;
  if (__isset_LocalAtendimento) then
  begin
    field_.Name := 'localAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(LocalAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TipoAtendimento) then
  begin
    field_.Name := 'tipoAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(TipoAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (TiposEncamOdonto <> nil) and __isset_TiposEncamOdonto then
  begin
    field_.Name := 'tiposEncamOdonto';
    field_.Type_  := TType.List;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    list_26 := TListImpl.Create(TType.I64, TiposEncamOdonto.Count);
    oprot.WriteListBegin( list_26);
    for _iter27 in TiposEncamOdonto do
    begin
      oprot.WriteI64(_iter27);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (TiposFornecimOdonto <> nil) and __isset_TiposFornecimOdonto then
  begin
    field_.Name := 'tiposFornecimOdonto';
    field_.Type_  := TType.List;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    list_28 := TListImpl.Create(TType.I64, TiposFornecimOdonto.Count);
    oprot.WriteListBegin( list_28);
    for _iter29 in TiposFornecimOdonto do
    begin
      oprot.WriteI64(_iter29);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (TiposVigilanciaSaudeBucal <> nil) and __isset_TiposVigilanciaSaudeBucal then
  begin
    field_.Name := 'tiposVigilanciaSaudeBucal';
    field_.Type_  := TType.List;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    list_30 := TListImpl.Create(TType.I64, TiposVigilanciaSaudeBucal.Count);
    oprot.WriteListBegin( list_30);
    for _iter31 in TiposVigilanciaSaudeBucal do
    begin
      oprot.WriteI64(_iter31);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (TiposConsultaOdonto <> nil) and __isset_TiposConsultaOdonto then
  begin
    field_.Name := 'tiposConsultaOdonto';
    field_.Type_  := TType.List;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    list_32 := TListImpl.Create(TType.I64, TiposConsultaOdonto.Count);
    oprot.WriteListBegin( list_32);
    for _iter33 in TiposConsultaOdonto do
    begin
      oprot.WriteI64(_iter33);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (ProcedimentosRealizados <> nil) and __isset_ProcedimentosRealizados then
  begin
    field_.Name := 'procedimentosRealizados';
    field_.Type_  := TType.List;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    list_34 := TListImpl.Create(TType.Struct, ProcedimentosRealizados.Count);
    oprot.WriteListBegin( list_34);
    for _iter35 in ProcedimentosRealizados do
    begin
      _iter35.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (__isset_Sexo) then
  begin
    field_.Name := 'sexo';
    field_.Type_  := TType.I64;
    field_.ID := 14;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(Sexo);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Turno) then
  begin
    field_.Name := 'turno';
    field_.Type_  := TType.I64;
    field_.ID := 15;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(Turno);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataHoraInicialAtendimento) then
  begin
    field_.Name := 'dataHoraInicialAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 16;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataHoraInicialAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataHoraFinalAtendimento) then
  begin
    field_.Name := 'dataHoraFinalAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 17;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataHoraFinalAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CpfCidadao) then
  begin
    field_.Name := 'cpfCidadao';
    field_.Type_  := TType.String_;
    field_.ID := 18;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CpfCidadao);
    oprot.WriteFieldEnd();
  end;
  if (Medicamentos <> nil) and __isset_Medicamentos then
  begin
    field_.Name := 'medicamentos';
    field_.Type_  := TType.List;
    field_.ID := 19;
    oprot.WriteFieldBegin(field_);
    list_36 := TListImpl.Create(TType.Struct, Medicamentos.Count);
    oprot.WriteListBegin( list_36);
    for _iter37 in Medicamentos do
    begin
      _iter37.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (Encaminhamentos <> nil) and __isset_Encaminhamentos then
  begin
    field_.Name := 'encaminhamentos';
    field_.Type_  := TType.List;
    field_.ID := 20;
    oprot.WriteFieldBegin(field_);
    list_38 := TListImpl.Create(TType.Struct, Encaminhamentos.Count);
    oprot.WriteListBegin( list_38);
    for _iter39 in Encaminhamentos do
    begin
      _iter39.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (ResultadosExames <> nil) and __isset_ResultadosExames then
  begin
    field_.Name := 'resultadosExames';
    field_.Type_  := TType.List;
    field_.ID := 21;
    oprot.WriteFieldBegin(field_);
    list_40 := TListImpl.Create(TType.Struct, ResultadosExames.Count);
    oprot.WriteListBegin( list_40);
    for _iter41 in ResultadosExames do
    begin
      _iter41.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (__isset_PesoAcompanhamentoNutricional) then
  begin
    field_.Name := 'pesoAcompanhamentoNutricional';
    field_.Type_  := TType.Double_;
    field_.ID := 22;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(PesoAcompanhamentoNutricional);
    oprot.WriteFieldEnd();
  end;
  if (__isset_AlturaAcompanhamentoNutricional) then
  begin
    field_.Name := 'alturaAcompanhamentoNutricional';
    field_.Type_  := TType.Double_;
    field_.ID := 23;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(AlturaAcompanhamentoNutricional);
    oprot.WriteFieldEnd();
  end;
  if (Medicoes <> nil) and __isset_Medicoes then
  begin
    field_.Name := 'medicoes';
    field_.Type_  := TType.Struct;
    field_.ID := 27;
    oprot.WriteFieldBegin(field_);
    Medicoes.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TFichaAtendimentoOdontologicoChildThriftImpl.ToString: string;
var
  _sb42 : TThriftStringBuilder;
  _first43 : Boolean;
begin
  _sb42 := TThriftStringBuilder.Create('(');
  try
    _first43 := TRUE;
    if (__isset_DtNascimento) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('DtNascimento: ');
      _sb42.Append(DtNascimento);
    end;
    if (__isset_CnsCidadao) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('CnsCidadao: ');
      _sb42.Append(CnsCidadao);
    end;
    if (__isset_NumProntuario) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('NumProntuario: ');
      _sb42.Append(NumProntuario);
    end;
    if (__isset_Gestante) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Gestante: ');
      _sb42.Append(Gestante);
    end;
    if (__isset_NecessidadesEspeciais) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('NecessidadesEspeciais: ');
      _sb42.Append(NecessidadesEspeciais);
    end;
    if (__isset_LocalAtendimento) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('LocalAtendimento: ');
      _sb42.Append(LocalAtendimento);
    end;
    if (__isset_TipoAtendimento) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('TipoAtendimento: ');
      _sb42.Append(TipoAtendimento);
    end;
    if (TiposEncamOdonto <> nil) and __isset_TiposEncamOdonto then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('TiposEncamOdonto: ');
      _sb42.Append(TiposEncamOdonto);
    end;
    if (TiposFornecimOdonto <> nil) and __isset_TiposFornecimOdonto then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('TiposFornecimOdonto: ');
      _sb42.Append(TiposFornecimOdonto);
    end;
    if (TiposVigilanciaSaudeBucal <> nil) and __isset_TiposVigilanciaSaudeBucal then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('TiposVigilanciaSaudeBucal: ');
      _sb42.Append(TiposVigilanciaSaudeBucal);
    end;
    if (TiposConsultaOdonto <> nil) and __isset_TiposConsultaOdonto then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('TiposConsultaOdonto: ');
      _sb42.Append(TiposConsultaOdonto);
    end;
    if (ProcedimentosRealizados <> nil) and __isset_ProcedimentosRealizados then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('ProcedimentosRealizados: ');
      _sb42.Append(ProcedimentosRealizados);
    end;
    if (__isset_Sexo) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Sexo: ');
      _sb42.Append(Sexo);
    end;
    if (__isset_Turno) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Turno: ');
      _sb42.Append(Turno);
    end;
    if (__isset_DataHoraInicialAtendimento) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('DataHoraInicialAtendimento: ');
      _sb42.Append(DataHoraInicialAtendimento);
    end;
    if (__isset_DataHoraFinalAtendimento) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('DataHoraFinalAtendimento: ');
      _sb42.Append(DataHoraFinalAtendimento);
    end;
    if (__isset_CpfCidadao) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('CpfCidadao: ');
      _sb42.Append(CpfCidadao);
    end;
    if (Medicamentos <> nil) and __isset_Medicamentos then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Medicamentos: ');
      _sb42.Append(Medicamentos);
    end;
    if (Encaminhamentos <> nil) and __isset_Encaminhamentos then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Encaminhamentos: ');
      _sb42.Append(Encaminhamentos);
    end;
    if (ResultadosExames <> nil) and __isset_ResultadosExames then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('ResultadosExames: ');
      _sb42.Append(ResultadosExames);
    end;
    if (__isset_PesoAcompanhamentoNutricional) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('PesoAcompanhamentoNutricional: ');
      _sb42.Append(PesoAcompanhamentoNutricional);
    end;
    if (__isset_AlturaAcompanhamentoNutricional) then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('AlturaAcompanhamentoNutricional: ');
      _sb42.Append(AlturaAcompanhamentoNutricional);
    end;
    if (Medicoes <> nil) and __isset_Medicoes then begin
      if not _first43 then _sb42.Append(',');
      _first43 := FALSE;
      _sb42.Append('Medicoes: ');
      if (Medicoes = nil) then _sb42.Append('<null>') else _sb42.Append(Medicoes.ToString());
    end;
    _sb42.Append(')');
    Result := _sb42.ToString;
    if _first43 then {prevent warning};
  finally
    _sb42.Free;
  end;
end;

constructor TFichaAtendimentoOdontologicoMasterThriftImpl.Create;
begin
  inherited;
end;

destructor TFichaAtendimentoOdontologicoMasterThriftImpl.Destroy;
begin
  inherited;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.GetUuidFicha: string;
begin
  Result := FUuidFicha;
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.SetUuidFicha( const Value: string);
begin
  FUuidFicha := Value;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.GetHeaderTransport: IVariasLotacoesHeaderThrift;
begin
  Result := FHeaderTransport;
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.SetHeaderTransport( const Value: IVariasLotacoesHeaderThrift);
begin
  F__isset_HeaderTransport := True;
  FHeaderTransport := Value;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.Get__isset_HeaderTransport: Boolean;
begin
  Result := F__isset_HeaderTransport;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.GetAtendimentosOdontologicos: IThriftList<IFichaAtendimentoOdontologicoChildThrift>;
begin
  Result := FAtendimentosOdontologicos;
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.SetAtendimentosOdontologicos( const Value: IThriftList<IFichaAtendimentoOdontologicoChildThrift>);
begin
  F__isset_AtendimentosOdontologicos := True;
  FAtendimentosOdontologicos := Value;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.Get__isset_AtendimentosOdontologicos: Boolean;
begin
  Result := F__isset_AtendimentosOdontologicos;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.GetTpCdsOrigem: Integer;
begin
  Result := FTpCdsOrigem;
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.SetTpCdsOrigem( const Value: Integer);
begin
  F__isset_TpCdsOrigem := True;
  FTpCdsOrigem := Value;
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.Get__isset_TpCdsOrigem: Boolean;
begin
  Result := F__isset_TpCdsOrigem;
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;
  _req_isset_UuidFicha : Boolean;
  _list44: IList;
  _i45: Integer;
  _elem46: IFichaAtendimentoOdontologicoChildThrift;

begin
  tracker := iprot.NextRecursionLevel;
  _req_isset_UuidFicha := FALSE;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            UuidFicha := iprot.ReadString();
            _req_isset_UuidFicha := TRUE;
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.Struct) then
          begin
            HeaderTransport := TVariasLotacoesHeaderThriftImpl.Create;
            HeaderTransport.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.List) then
          begin
            AtendimentosOdontologicos := TThriftListImpl<IFichaAtendimentoOdontologicoChildThrift>.Create;
            _list44 := iprot.ReadListBegin();
            for _i45 := 0 to _list44.Count - 1 do
            begin
              _elem46 := TFichaAtendimentoOdontologicoChildThriftImpl.Create;
              _elem46.Read(iprot);
              AtendimentosOdontologicos.Add(_elem46);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I32) then
          begin
            TpCdsOrigem := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
  if not _req_isset_UuidFicha
  then raise TProtocolException.Create( TProtocolException.INVALID_DATA, 'UuidFicha');
end;

procedure TFichaAtendimentoOdontologicoMasterThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
  list_47 : IList;
  _iter48: IFichaAtendimentoOdontologicoChildThrift;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('FichaAtendimentoOdontologicoMasterThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  // required field
  field_.Name := 'uuidFicha';
  field_.Type_  := TType.String_;
  field_.ID := 1;
  oprot.WriteFieldBegin(field_);
  oprot.WriteString(UuidFicha);
  oprot.WriteFieldEnd();
  if (HeaderTransport <> nil) and __isset_HeaderTransport then
  begin
    field_.Name := 'headerTransport';
    field_.Type_  := TType.Struct;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    HeaderTransport.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  if (AtendimentosOdontologicos <> nil) and __isset_AtendimentosOdontologicos then
  begin
    field_.Name := 'atendimentosOdontologicos';
    field_.Type_  := TType.List;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    list_47 := TListImpl.Create(TType.Struct, AtendimentosOdontologicos.Count);
    oprot.WriteListBegin( list_47);
    for _iter48 in AtendimentosOdontologicos do
    begin
      _iter48.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  if (__isset_TpCdsOrigem) then
  begin
    field_.Name := 'tpCdsOrigem';
    field_.Type_  := TType.I32;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(TpCdsOrigem);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TFichaAtendimentoOdontologicoMasterThriftImpl.ToString: string;
var
  _sb49 : TThriftStringBuilder;
begin
  _sb49 := TThriftStringBuilder.Create('(');
  try
    _sb49.Append(', UuidFicha: ');
    _sb49.Append(UuidFicha);
    if (HeaderTransport <> nil) and __isset_HeaderTransport then begin
      _sb49.Append(', HeaderTransport: ');
      if (HeaderTransport = nil) then _sb49.Append('<null>') else _sb49.Append(HeaderTransport.ToString());
    end;
    if (AtendimentosOdontologicos <> nil) and __isset_AtendimentosOdontologicos then begin
      _sb49.Append(', AtendimentosOdontologicos: ');
      _sb49.Append(AtendimentosOdontologicos);
    end;
    if (__isset_TpCdsOrigem) then begin
      _sb49.Append(', TpCdsOrigem: ');
      _sb49.Append(TpCdsOrigem);
    end;
    _sb49.Append(')');
    Result := _sb49.ToString;
  finally
    _sb49.Free;
  end;
end;


initialization

finalization


end.
