/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-05")
public class MedicamentoThrift implements org.apache.thrift.TBase<MedicamentoThrift, MedicamentoThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MedicamentoThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MedicamentoThrift");

  private static final org.apache.thrift.protocol.TField CODIGO_CATMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("codigoCatmat", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VIA_ADMINISTRACAO_FIELD_DESC = new org.apache.thrift.protocol.TField("viaAdministracao", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("dose", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOSE_UNICA_FIELD_DESC = new org.apache.thrift.protocol.TField("doseUnica", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField USO_CONTINUO_FIELD_DESC = new org.apache.thrift.protocol.TField("usoContinuo", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DOSE_FREQUENCIA_TIPO_FIELD_DESC = new org.apache.thrift.protocol.TField("doseFrequenciaTipo", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DOSE_FREQUENCIA_FIELD_DESC = new org.apache.thrift.protocol.TField("doseFrequencia", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DOSE_FREQUENCIA_QUANTIDADE_FIELD_DESC = new org.apache.thrift.protocol.TField("doseFrequenciaQuantidade", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DOSE_FREQUENCIA_UNIDADE_MEDIDA_FIELD_DESC = new org.apache.thrift.protocol.TField("doseFrequenciaUnidadeMedida", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField DT_INICIO_TRATAMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dtInicioTratamento", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField DURACAO_TRATAMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("duracaoTratamento", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DURACAO_TRATAMENTO_MEDIDA_FIELD_DESC = new org.apache.thrift.protocol.TField("duracaoTratamentoMedida", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField QUANTIDADE_RECEITADA_FIELD_DESC = new org.apache.thrift.protocol.TField("quantidadeReceitada", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField QT_DOSE_MANHA_FIELD_DESC = new org.apache.thrift.protocol.TField("qtDoseManha", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField QT_DOSE_TARDE_FIELD_DESC = new org.apache.thrift.protocol.TField("qtDoseTarde", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField QT_DOSE_NOITE_FIELD_DESC = new org.apache.thrift.protocol.TField("qtDoseNoite", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MedicamentoThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MedicamentoThriftTupleSchemeFactory());
  }

  private String codigoCatmat; // optional
  private long viaAdministracao; // optional
  private String dose; // optional
  private boolean doseUnica; // optional
  private boolean usoContinuo; // optional
  private long doseFrequenciaTipo; // optional
  private String doseFrequencia; // optional
  private int doseFrequenciaQuantidade; // optional
  private long doseFrequenciaUnidadeMedida; // optional
  private long dtInicioTratamento; // optional
  private int duracaoTratamento; // optional
  private long duracaoTratamentoMedida; // optional
  private int quantidadeReceitada; // optional
  private String qtDoseManha; // optional
  private String qtDoseTarde; // optional
  private String qtDoseNoite; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODIGO_CATMAT((short)1, "codigoCatmat"),
    VIA_ADMINISTRACAO((short)2, "viaAdministracao"),
    DOSE((short)3, "dose"),
    DOSE_UNICA((short)4, "doseUnica"),
    USO_CONTINUO((short)5, "usoContinuo"),
    DOSE_FREQUENCIA_TIPO((short)6, "doseFrequenciaTipo"),
    DOSE_FREQUENCIA((short)7, "doseFrequencia"),
    DOSE_FREQUENCIA_QUANTIDADE((short)8, "doseFrequenciaQuantidade"),
    DOSE_FREQUENCIA_UNIDADE_MEDIDA((short)9, "doseFrequenciaUnidadeMedida"),
    DT_INICIO_TRATAMENTO((short)10, "dtInicioTratamento"),
    DURACAO_TRATAMENTO((short)11, "duracaoTratamento"),
    DURACAO_TRATAMENTO_MEDIDA((short)12, "duracaoTratamentoMedida"),
    QUANTIDADE_RECEITADA((short)13, "quantidadeReceitada"),
    QT_DOSE_MANHA((short)15, "qtDoseManha"),
    QT_DOSE_TARDE((short)16, "qtDoseTarde"),
    QT_DOSE_NOITE((short)17, "qtDoseNoite");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODIGO_CATMAT
          return CODIGO_CATMAT;
        case 2: // VIA_ADMINISTRACAO
          return VIA_ADMINISTRACAO;
        case 3: // DOSE
          return DOSE;
        case 4: // DOSE_UNICA
          return DOSE_UNICA;
        case 5: // USO_CONTINUO
          return USO_CONTINUO;
        case 6: // DOSE_FREQUENCIA_TIPO
          return DOSE_FREQUENCIA_TIPO;
        case 7: // DOSE_FREQUENCIA
          return DOSE_FREQUENCIA;
        case 8: // DOSE_FREQUENCIA_QUANTIDADE
          return DOSE_FREQUENCIA_QUANTIDADE;
        case 9: // DOSE_FREQUENCIA_UNIDADE_MEDIDA
          return DOSE_FREQUENCIA_UNIDADE_MEDIDA;
        case 10: // DT_INICIO_TRATAMENTO
          return DT_INICIO_TRATAMENTO;
        case 11: // DURACAO_TRATAMENTO
          return DURACAO_TRATAMENTO;
        case 12: // DURACAO_TRATAMENTO_MEDIDA
          return DURACAO_TRATAMENTO_MEDIDA;
        case 13: // QUANTIDADE_RECEITADA
          return QUANTIDADE_RECEITADA;
        case 15: // QT_DOSE_MANHA
          return QT_DOSE_MANHA;
        case 16: // QT_DOSE_TARDE
          return QT_DOSE_TARDE;
        case 17: // QT_DOSE_NOITE
          return QT_DOSE_NOITE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIAADMINISTRACAO_ISSET_ID = 0;
  private static final int __DOSEUNICA_ISSET_ID = 1;
  private static final int __USOCONTINUO_ISSET_ID = 2;
  private static final int __DOSEFREQUENCIATIPO_ISSET_ID = 3;
  private static final int __DOSEFREQUENCIAQUANTIDADE_ISSET_ID = 4;
  private static final int __DOSEFREQUENCIAUNIDADEMEDIDA_ISSET_ID = 5;
  private static final int __DTINICIOTRATAMENTO_ISSET_ID = 6;
  private static final int __DURACAOTRATAMENTO_ISSET_ID = 7;
  private static final int __DURACAOTRATAMENTOMEDIDA_ISSET_ID = 8;
  private static final int __QUANTIDADERECEITADA_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CODIGO_CATMAT,_Fields.VIA_ADMINISTRACAO,_Fields.DOSE,_Fields.DOSE_UNICA,_Fields.USO_CONTINUO,_Fields.DOSE_FREQUENCIA_TIPO,_Fields.DOSE_FREQUENCIA,_Fields.DOSE_FREQUENCIA_QUANTIDADE,_Fields.DOSE_FREQUENCIA_UNIDADE_MEDIDA,_Fields.DT_INICIO_TRATAMENTO,_Fields.DURACAO_TRATAMENTO,_Fields.DURACAO_TRATAMENTO_MEDIDA,_Fields.QUANTIDADE_RECEITADA,_Fields.QT_DOSE_MANHA,_Fields.QT_DOSE_TARDE,_Fields.QT_DOSE_NOITE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODIGO_CATMAT, new org.apache.thrift.meta_data.FieldMetaData("codigoCatmat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIA_ADMINISTRACAO, new org.apache.thrift.meta_data.FieldMetaData("viaAdministracao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOSE, new org.apache.thrift.meta_data.FieldMetaData("dose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOSE_UNICA, new org.apache.thrift.meta_data.FieldMetaData("doseUnica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USO_CONTINUO, new org.apache.thrift.meta_data.FieldMetaData("usoContinuo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DOSE_FREQUENCIA_TIPO, new org.apache.thrift.meta_data.FieldMetaData("doseFrequenciaTipo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOSE_FREQUENCIA, new org.apache.thrift.meta_data.FieldMetaData("doseFrequencia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOSE_FREQUENCIA_QUANTIDADE, new org.apache.thrift.meta_data.FieldMetaData("doseFrequenciaQuantidade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOSE_FREQUENCIA_UNIDADE_MEDIDA, new org.apache.thrift.meta_data.FieldMetaData("doseFrequenciaUnidadeMedida", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DT_INICIO_TRATAMENTO, new org.apache.thrift.meta_data.FieldMetaData("dtInicioTratamento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURACAO_TRATAMENTO, new org.apache.thrift.meta_data.FieldMetaData("duracaoTratamento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURACAO_TRATAMENTO_MEDIDA, new org.apache.thrift.meta_data.FieldMetaData("duracaoTratamentoMedida", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUANTIDADE_RECEITADA, new org.apache.thrift.meta_data.FieldMetaData("quantidadeReceitada", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QT_DOSE_MANHA, new org.apache.thrift.meta_data.FieldMetaData("qtDoseManha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QT_DOSE_TARDE, new org.apache.thrift.meta_data.FieldMetaData("qtDoseTarde", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QT_DOSE_NOITE, new org.apache.thrift.meta_data.FieldMetaData("qtDoseNoite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MedicamentoThrift.class, metaDataMap);
  }

  public MedicamentoThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MedicamentoThrift(MedicamentoThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCodigoCatmat()) {
      this.codigoCatmat = other.codigoCatmat;
    }
    this.viaAdministracao = other.viaAdministracao;
    if (other.isSetDose()) {
      this.dose = other.dose;
    }
    this.doseUnica = other.doseUnica;
    this.usoContinuo = other.usoContinuo;
    this.doseFrequenciaTipo = other.doseFrequenciaTipo;
    if (other.isSetDoseFrequencia()) {
      this.doseFrequencia = other.doseFrequencia;
    }
    this.doseFrequenciaQuantidade = other.doseFrequenciaQuantidade;
    this.doseFrequenciaUnidadeMedida = other.doseFrequenciaUnidadeMedida;
    this.dtInicioTratamento = other.dtInicioTratamento;
    this.duracaoTratamento = other.duracaoTratamento;
    this.duracaoTratamentoMedida = other.duracaoTratamentoMedida;
    this.quantidadeReceitada = other.quantidadeReceitada;
    if (other.isSetQtDoseManha()) {
      this.qtDoseManha = other.qtDoseManha;
    }
    if (other.isSetQtDoseTarde()) {
      this.qtDoseTarde = other.qtDoseTarde;
    }
    if (other.isSetQtDoseNoite()) {
      this.qtDoseNoite = other.qtDoseNoite;
    }
  }

  public MedicamentoThrift deepCopy() {
    return new MedicamentoThrift(this);
  }

  @Override
  public void clear() {
    this.codigoCatmat = null;
    setViaAdministracaoIsSet(false);
    this.viaAdministracao = 0;
    this.dose = null;
    setDoseUnicaIsSet(false);
    this.doseUnica = false;
    setUsoContinuoIsSet(false);
    this.usoContinuo = false;
    setDoseFrequenciaTipoIsSet(false);
    this.doseFrequenciaTipo = 0;
    this.doseFrequencia = null;
    setDoseFrequenciaQuantidadeIsSet(false);
    this.doseFrequenciaQuantidade = 0;
    setDoseFrequenciaUnidadeMedidaIsSet(false);
    this.doseFrequenciaUnidadeMedida = 0;
    setDtInicioTratamentoIsSet(false);
    this.dtInicioTratamento = 0;
    setDuracaoTratamentoIsSet(false);
    this.duracaoTratamento = 0;
    setDuracaoTratamentoMedidaIsSet(false);
    this.duracaoTratamentoMedida = 0;
    setQuantidadeReceitadaIsSet(false);
    this.quantidadeReceitada = 0;
    this.qtDoseManha = null;
    this.qtDoseTarde = null;
    this.qtDoseNoite = null;
  }

  public String getCodigoCatmat() {
    return this.codigoCatmat;
  }

  public void setCodigoCatmat(String codigoCatmat) {
    this.codigoCatmat = codigoCatmat;
  }

  public void unsetCodigoCatmat() {
    this.codigoCatmat = null;
  }

  /** Returns true if field codigoCatmat is set (has been assigned a value) and false otherwise */
  public boolean isSetCodigoCatmat() {
    return this.codigoCatmat != null;
  }

  public void setCodigoCatmatIsSet(boolean value) {
    if (!value) {
      this.codigoCatmat = null;
    }
  }

  public long getViaAdministracao() {
    return this.viaAdministracao;
  }

  public void setViaAdministracao(long viaAdministracao) {
    this.viaAdministracao = viaAdministracao;
    setViaAdministracaoIsSet(true);
  }

  public void unsetViaAdministracao() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIAADMINISTRACAO_ISSET_ID);
  }

  /** Returns true if field viaAdministracao is set (has been assigned a value) and false otherwise */
  public boolean isSetViaAdministracao() {
    return EncodingUtils.testBit(__isset_bitfield, __VIAADMINISTRACAO_ISSET_ID);
  }

  public void setViaAdministracaoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIAADMINISTRACAO_ISSET_ID, value);
  }

  public String getDose() {
    return this.dose;
  }

  public void setDose(String dose) {
    this.dose = dose;
  }

  public void unsetDose() {
    this.dose = null;
  }

  /** Returns true if field dose is set (has been assigned a value) and false otherwise */
  public boolean isSetDose() {
    return this.dose != null;
  }

  public void setDoseIsSet(boolean value) {
    if (!value) {
      this.dose = null;
    }
  }

  public boolean isDoseUnica() {
    return this.doseUnica;
  }

  public void setDoseUnica(boolean doseUnica) {
    this.doseUnica = doseUnica;
    setDoseUnicaIsSet(true);
  }

  public void unsetDoseUnica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSEUNICA_ISSET_ID);
  }

  /** Returns true if field doseUnica is set (has been assigned a value) and false otherwise */
  public boolean isSetDoseUnica() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSEUNICA_ISSET_ID);
  }

  public void setDoseUnicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSEUNICA_ISSET_ID, value);
  }

  public boolean isUsoContinuo() {
    return this.usoContinuo;
  }

  public void setUsoContinuo(boolean usoContinuo) {
    this.usoContinuo = usoContinuo;
    setUsoContinuoIsSet(true);
  }

  public void unsetUsoContinuo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USOCONTINUO_ISSET_ID);
  }

  /** Returns true if field usoContinuo is set (has been assigned a value) and false otherwise */
  public boolean isSetUsoContinuo() {
    return EncodingUtils.testBit(__isset_bitfield, __USOCONTINUO_ISSET_ID);
  }

  public void setUsoContinuoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USOCONTINUO_ISSET_ID, value);
  }

  public long getDoseFrequenciaTipo() {
    return this.doseFrequenciaTipo;
  }

  public void setDoseFrequenciaTipo(long doseFrequenciaTipo) {
    this.doseFrequenciaTipo = doseFrequenciaTipo;
    setDoseFrequenciaTipoIsSet(true);
  }

  public void unsetDoseFrequenciaTipo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSEFREQUENCIATIPO_ISSET_ID);
  }

  /** Returns true if field doseFrequenciaTipo is set (has been assigned a value) and false otherwise */
  public boolean isSetDoseFrequenciaTipo() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSEFREQUENCIATIPO_ISSET_ID);
  }

  public void setDoseFrequenciaTipoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSEFREQUENCIATIPO_ISSET_ID, value);
  }

  public String getDoseFrequencia() {
    return this.doseFrequencia;
  }

  public void setDoseFrequencia(String doseFrequencia) {
    this.doseFrequencia = doseFrequencia;
  }

  public void unsetDoseFrequencia() {
    this.doseFrequencia = null;
  }

  /** Returns true if field doseFrequencia is set (has been assigned a value) and false otherwise */
  public boolean isSetDoseFrequencia() {
    return this.doseFrequencia != null;
  }

  public void setDoseFrequenciaIsSet(boolean value) {
    if (!value) {
      this.doseFrequencia = null;
    }
  }

  public int getDoseFrequenciaQuantidade() {
    return this.doseFrequenciaQuantidade;
  }

  public void setDoseFrequenciaQuantidade(int doseFrequenciaQuantidade) {
    this.doseFrequenciaQuantidade = doseFrequenciaQuantidade;
    setDoseFrequenciaQuantidadeIsSet(true);
  }

  public void unsetDoseFrequenciaQuantidade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSEFREQUENCIAQUANTIDADE_ISSET_ID);
  }

  /** Returns true if field doseFrequenciaQuantidade is set (has been assigned a value) and false otherwise */
  public boolean isSetDoseFrequenciaQuantidade() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSEFREQUENCIAQUANTIDADE_ISSET_ID);
  }

  public void setDoseFrequenciaQuantidadeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSEFREQUENCIAQUANTIDADE_ISSET_ID, value);
  }

  public long getDoseFrequenciaUnidadeMedida() {
    return this.doseFrequenciaUnidadeMedida;
  }

  public void setDoseFrequenciaUnidadeMedida(long doseFrequenciaUnidadeMedida) {
    this.doseFrequenciaUnidadeMedida = doseFrequenciaUnidadeMedida;
    setDoseFrequenciaUnidadeMedidaIsSet(true);
  }

  public void unsetDoseFrequenciaUnidadeMedida() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOSEFREQUENCIAUNIDADEMEDIDA_ISSET_ID);
  }

  /** Returns true if field doseFrequenciaUnidadeMedida is set (has been assigned a value) and false otherwise */
  public boolean isSetDoseFrequenciaUnidadeMedida() {
    return EncodingUtils.testBit(__isset_bitfield, __DOSEFREQUENCIAUNIDADEMEDIDA_ISSET_ID);
  }

  public void setDoseFrequenciaUnidadeMedidaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOSEFREQUENCIAUNIDADEMEDIDA_ISSET_ID, value);
  }

  public long getDtInicioTratamento() {
    return this.dtInicioTratamento;
  }

  public void setDtInicioTratamento(long dtInicioTratamento) {
    this.dtInicioTratamento = dtInicioTratamento;
    setDtInicioTratamentoIsSet(true);
  }

  public void unsetDtInicioTratamento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTINICIOTRATAMENTO_ISSET_ID);
  }

  /** Returns true if field dtInicioTratamento is set (has been assigned a value) and false otherwise */
  public boolean isSetDtInicioTratamento() {
    return EncodingUtils.testBit(__isset_bitfield, __DTINICIOTRATAMENTO_ISSET_ID);
  }

  public void setDtInicioTratamentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTINICIOTRATAMENTO_ISSET_ID, value);
  }

  public int getDuracaoTratamento() {
    return this.duracaoTratamento;
  }

  public void setDuracaoTratamento(int duracaoTratamento) {
    this.duracaoTratamento = duracaoTratamento;
    setDuracaoTratamentoIsSet(true);
  }

  public void unsetDuracaoTratamento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURACAOTRATAMENTO_ISSET_ID);
  }

  /** Returns true if field duracaoTratamento is set (has been assigned a value) and false otherwise */
  public boolean isSetDuracaoTratamento() {
    return EncodingUtils.testBit(__isset_bitfield, __DURACAOTRATAMENTO_ISSET_ID);
  }

  public void setDuracaoTratamentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURACAOTRATAMENTO_ISSET_ID, value);
  }

  public long getDuracaoTratamentoMedida() {
    return this.duracaoTratamentoMedida;
  }

  public void setDuracaoTratamentoMedida(long duracaoTratamentoMedida) {
    this.duracaoTratamentoMedida = duracaoTratamentoMedida;
    setDuracaoTratamentoMedidaIsSet(true);
  }

  public void unsetDuracaoTratamentoMedida() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURACAOTRATAMENTOMEDIDA_ISSET_ID);
  }

  /** Returns true if field duracaoTratamentoMedida is set (has been assigned a value) and false otherwise */
  public boolean isSetDuracaoTratamentoMedida() {
    return EncodingUtils.testBit(__isset_bitfield, __DURACAOTRATAMENTOMEDIDA_ISSET_ID);
  }

  public void setDuracaoTratamentoMedidaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURACAOTRATAMENTOMEDIDA_ISSET_ID, value);
  }

  public int getQuantidadeReceitada() {
    return this.quantidadeReceitada;
  }

  public void setQuantidadeReceitada(int quantidadeReceitada) {
    this.quantidadeReceitada = quantidadeReceitada;
    setQuantidadeReceitadaIsSet(true);
  }

  public void unsetQuantidadeReceitada() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTIDADERECEITADA_ISSET_ID);
  }

  /** Returns true if field quantidadeReceitada is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantidadeReceitada() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTIDADERECEITADA_ISSET_ID);
  }

  public void setQuantidadeReceitadaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTIDADERECEITADA_ISSET_ID, value);
  }

  public String getQtDoseManha() {
    return this.qtDoseManha;
  }

  public void setQtDoseManha(String qtDoseManha) {
    this.qtDoseManha = qtDoseManha;
  }

  public void unsetQtDoseManha() {
    this.qtDoseManha = null;
  }

  /** Returns true if field qtDoseManha is set (has been assigned a value) and false otherwise */
  public boolean isSetQtDoseManha() {
    return this.qtDoseManha != null;
  }

  public void setQtDoseManhaIsSet(boolean value) {
    if (!value) {
      this.qtDoseManha = null;
    }
  }

  public String getQtDoseTarde() {
    return this.qtDoseTarde;
  }

  public void setQtDoseTarde(String qtDoseTarde) {
    this.qtDoseTarde = qtDoseTarde;
  }

  public void unsetQtDoseTarde() {
    this.qtDoseTarde = null;
  }

  /** Returns true if field qtDoseTarde is set (has been assigned a value) and false otherwise */
  public boolean isSetQtDoseTarde() {
    return this.qtDoseTarde != null;
  }

  public void setQtDoseTardeIsSet(boolean value) {
    if (!value) {
      this.qtDoseTarde = null;
    }
  }

  public String getQtDoseNoite() {
    return this.qtDoseNoite;
  }

  public void setQtDoseNoite(String qtDoseNoite) {
    this.qtDoseNoite = qtDoseNoite;
  }

  public void unsetQtDoseNoite() {
    this.qtDoseNoite = null;
  }

  /** Returns true if field qtDoseNoite is set (has been assigned a value) and false otherwise */
  public boolean isSetQtDoseNoite() {
    return this.qtDoseNoite != null;
  }

  public void setQtDoseNoiteIsSet(boolean value) {
    if (!value) {
      this.qtDoseNoite = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODIGO_CATMAT:
      if (value == null) {
        unsetCodigoCatmat();
      } else {
        setCodigoCatmat((String)value);
      }
      break;

    case VIA_ADMINISTRACAO:
      if (value == null) {
        unsetViaAdministracao();
      } else {
        setViaAdministracao((Long)value);
      }
      break;

    case DOSE:
      if (value == null) {
        unsetDose();
      } else {
        setDose((String)value);
      }
      break;

    case DOSE_UNICA:
      if (value == null) {
        unsetDoseUnica();
      } else {
        setDoseUnica((Boolean)value);
      }
      break;

    case USO_CONTINUO:
      if (value == null) {
        unsetUsoContinuo();
      } else {
        setUsoContinuo((Boolean)value);
      }
      break;

    case DOSE_FREQUENCIA_TIPO:
      if (value == null) {
        unsetDoseFrequenciaTipo();
      } else {
        setDoseFrequenciaTipo((Long)value);
      }
      break;

    case DOSE_FREQUENCIA:
      if (value == null) {
        unsetDoseFrequencia();
      } else {
        setDoseFrequencia((String)value);
      }
      break;

    case DOSE_FREQUENCIA_QUANTIDADE:
      if (value == null) {
        unsetDoseFrequenciaQuantidade();
      } else {
        setDoseFrequenciaQuantidade((Integer)value);
      }
      break;

    case DOSE_FREQUENCIA_UNIDADE_MEDIDA:
      if (value == null) {
        unsetDoseFrequenciaUnidadeMedida();
      } else {
        setDoseFrequenciaUnidadeMedida((Long)value);
      }
      break;

    case DT_INICIO_TRATAMENTO:
      if (value == null) {
        unsetDtInicioTratamento();
      } else {
        setDtInicioTratamento((Long)value);
      }
      break;

    case DURACAO_TRATAMENTO:
      if (value == null) {
        unsetDuracaoTratamento();
      } else {
        setDuracaoTratamento((Integer)value);
      }
      break;

    case DURACAO_TRATAMENTO_MEDIDA:
      if (value == null) {
        unsetDuracaoTratamentoMedida();
      } else {
        setDuracaoTratamentoMedida((Long)value);
      }
      break;

    case QUANTIDADE_RECEITADA:
      if (value == null) {
        unsetQuantidadeReceitada();
      } else {
        setQuantidadeReceitada((Integer)value);
      }
      break;

    case QT_DOSE_MANHA:
      if (value == null) {
        unsetQtDoseManha();
      } else {
        setQtDoseManha((String)value);
      }
      break;

    case QT_DOSE_TARDE:
      if (value == null) {
        unsetQtDoseTarde();
      } else {
        setQtDoseTarde((String)value);
      }
      break;

    case QT_DOSE_NOITE:
      if (value == null) {
        unsetQtDoseNoite();
      } else {
        setQtDoseNoite((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODIGO_CATMAT:
      return getCodigoCatmat();

    case VIA_ADMINISTRACAO:
      return getViaAdministracao();

    case DOSE:
      return getDose();

    case DOSE_UNICA:
      return isDoseUnica();

    case USO_CONTINUO:
      return isUsoContinuo();

    case DOSE_FREQUENCIA_TIPO:
      return getDoseFrequenciaTipo();

    case DOSE_FREQUENCIA:
      return getDoseFrequencia();

    case DOSE_FREQUENCIA_QUANTIDADE:
      return getDoseFrequenciaQuantidade();

    case DOSE_FREQUENCIA_UNIDADE_MEDIDA:
      return getDoseFrequenciaUnidadeMedida();

    case DT_INICIO_TRATAMENTO:
      return getDtInicioTratamento();

    case DURACAO_TRATAMENTO:
      return getDuracaoTratamento();

    case DURACAO_TRATAMENTO_MEDIDA:
      return getDuracaoTratamentoMedida();

    case QUANTIDADE_RECEITADA:
      return getQuantidadeReceitada();

    case QT_DOSE_MANHA:
      return getQtDoseManha();

    case QT_DOSE_TARDE:
      return getQtDoseTarde();

    case QT_DOSE_NOITE:
      return getQtDoseNoite();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODIGO_CATMAT:
      return isSetCodigoCatmat();
    case VIA_ADMINISTRACAO:
      return isSetViaAdministracao();
    case DOSE:
      return isSetDose();
    case DOSE_UNICA:
      return isSetDoseUnica();
    case USO_CONTINUO:
      return isSetUsoContinuo();
    case DOSE_FREQUENCIA_TIPO:
      return isSetDoseFrequenciaTipo();
    case DOSE_FREQUENCIA:
      return isSetDoseFrequencia();
    case DOSE_FREQUENCIA_QUANTIDADE:
      return isSetDoseFrequenciaQuantidade();
    case DOSE_FREQUENCIA_UNIDADE_MEDIDA:
      return isSetDoseFrequenciaUnidadeMedida();
    case DT_INICIO_TRATAMENTO:
      return isSetDtInicioTratamento();
    case DURACAO_TRATAMENTO:
      return isSetDuracaoTratamento();
    case DURACAO_TRATAMENTO_MEDIDA:
      return isSetDuracaoTratamentoMedida();
    case QUANTIDADE_RECEITADA:
      return isSetQuantidadeReceitada();
    case QT_DOSE_MANHA:
      return isSetQtDoseManha();
    case QT_DOSE_TARDE:
      return isSetQtDoseTarde();
    case QT_DOSE_NOITE:
      return isSetQtDoseNoite();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MedicamentoThrift)
      return this.equals((MedicamentoThrift)that);
    return false;
  }

  public boolean equals(MedicamentoThrift that) {
    if (that == null)
      return false;

    boolean this_present_codigoCatmat = true && this.isSetCodigoCatmat();
    boolean that_present_codigoCatmat = true && that.isSetCodigoCatmat();
    if (this_present_codigoCatmat || that_present_codigoCatmat) {
      if (!(this_present_codigoCatmat && that_present_codigoCatmat))
        return false;
      if (!this.codigoCatmat.equals(that.codigoCatmat))
        return false;
    }

    boolean this_present_viaAdministracao = true && this.isSetViaAdministracao();
    boolean that_present_viaAdministracao = true && that.isSetViaAdministracao();
    if (this_present_viaAdministracao || that_present_viaAdministracao) {
      if (!(this_present_viaAdministracao && that_present_viaAdministracao))
        return false;
      if (this.viaAdministracao != that.viaAdministracao)
        return false;
    }

    boolean this_present_dose = true && this.isSetDose();
    boolean that_present_dose = true && that.isSetDose();
    if (this_present_dose || that_present_dose) {
      if (!(this_present_dose && that_present_dose))
        return false;
      if (!this.dose.equals(that.dose))
        return false;
    }

    boolean this_present_doseUnica = true && this.isSetDoseUnica();
    boolean that_present_doseUnica = true && that.isSetDoseUnica();
    if (this_present_doseUnica || that_present_doseUnica) {
      if (!(this_present_doseUnica && that_present_doseUnica))
        return false;
      if (this.doseUnica != that.doseUnica)
        return false;
    }

    boolean this_present_usoContinuo = true && this.isSetUsoContinuo();
    boolean that_present_usoContinuo = true && that.isSetUsoContinuo();
    if (this_present_usoContinuo || that_present_usoContinuo) {
      if (!(this_present_usoContinuo && that_present_usoContinuo))
        return false;
      if (this.usoContinuo != that.usoContinuo)
        return false;
    }

    boolean this_present_doseFrequenciaTipo = true && this.isSetDoseFrequenciaTipo();
    boolean that_present_doseFrequenciaTipo = true && that.isSetDoseFrequenciaTipo();
    if (this_present_doseFrequenciaTipo || that_present_doseFrequenciaTipo) {
      if (!(this_present_doseFrequenciaTipo && that_present_doseFrequenciaTipo))
        return false;
      if (this.doseFrequenciaTipo != that.doseFrequenciaTipo)
        return false;
    }

    boolean this_present_doseFrequencia = true && this.isSetDoseFrequencia();
    boolean that_present_doseFrequencia = true && that.isSetDoseFrequencia();
    if (this_present_doseFrequencia || that_present_doseFrequencia) {
      if (!(this_present_doseFrequencia && that_present_doseFrequencia))
        return false;
      if (!this.doseFrequencia.equals(that.doseFrequencia))
        return false;
    }

    boolean this_present_doseFrequenciaQuantidade = true && this.isSetDoseFrequenciaQuantidade();
    boolean that_present_doseFrequenciaQuantidade = true && that.isSetDoseFrequenciaQuantidade();
    if (this_present_doseFrequenciaQuantidade || that_present_doseFrequenciaQuantidade) {
      if (!(this_present_doseFrequenciaQuantidade && that_present_doseFrequenciaQuantidade))
        return false;
      if (this.doseFrequenciaQuantidade != that.doseFrequenciaQuantidade)
        return false;
    }

    boolean this_present_doseFrequenciaUnidadeMedida = true && this.isSetDoseFrequenciaUnidadeMedida();
    boolean that_present_doseFrequenciaUnidadeMedida = true && that.isSetDoseFrequenciaUnidadeMedida();
    if (this_present_doseFrequenciaUnidadeMedida || that_present_doseFrequenciaUnidadeMedida) {
      if (!(this_present_doseFrequenciaUnidadeMedida && that_present_doseFrequenciaUnidadeMedida))
        return false;
      if (this.doseFrequenciaUnidadeMedida != that.doseFrequenciaUnidadeMedida)
        return false;
    }

    boolean this_present_dtInicioTratamento = true && this.isSetDtInicioTratamento();
    boolean that_present_dtInicioTratamento = true && that.isSetDtInicioTratamento();
    if (this_present_dtInicioTratamento || that_present_dtInicioTratamento) {
      if (!(this_present_dtInicioTratamento && that_present_dtInicioTratamento))
        return false;
      if (this.dtInicioTratamento != that.dtInicioTratamento)
        return false;
    }

    boolean this_present_duracaoTratamento = true && this.isSetDuracaoTratamento();
    boolean that_present_duracaoTratamento = true && that.isSetDuracaoTratamento();
    if (this_present_duracaoTratamento || that_present_duracaoTratamento) {
      if (!(this_present_duracaoTratamento && that_present_duracaoTratamento))
        return false;
      if (this.duracaoTratamento != that.duracaoTratamento)
        return false;
    }

    boolean this_present_duracaoTratamentoMedida = true && this.isSetDuracaoTratamentoMedida();
    boolean that_present_duracaoTratamentoMedida = true && that.isSetDuracaoTratamentoMedida();
    if (this_present_duracaoTratamentoMedida || that_present_duracaoTratamentoMedida) {
      if (!(this_present_duracaoTratamentoMedida && that_present_duracaoTratamentoMedida))
        return false;
      if (this.duracaoTratamentoMedida != that.duracaoTratamentoMedida)
        return false;
    }

    boolean this_present_quantidadeReceitada = true && this.isSetQuantidadeReceitada();
    boolean that_present_quantidadeReceitada = true && that.isSetQuantidadeReceitada();
    if (this_present_quantidadeReceitada || that_present_quantidadeReceitada) {
      if (!(this_present_quantidadeReceitada && that_present_quantidadeReceitada))
        return false;
      if (this.quantidadeReceitada != that.quantidadeReceitada)
        return false;
    }

    boolean this_present_qtDoseManha = true && this.isSetQtDoseManha();
    boolean that_present_qtDoseManha = true && that.isSetQtDoseManha();
    if (this_present_qtDoseManha || that_present_qtDoseManha) {
      if (!(this_present_qtDoseManha && that_present_qtDoseManha))
        return false;
      if (!this.qtDoseManha.equals(that.qtDoseManha))
        return false;
    }

    boolean this_present_qtDoseTarde = true && this.isSetQtDoseTarde();
    boolean that_present_qtDoseTarde = true && that.isSetQtDoseTarde();
    if (this_present_qtDoseTarde || that_present_qtDoseTarde) {
      if (!(this_present_qtDoseTarde && that_present_qtDoseTarde))
        return false;
      if (!this.qtDoseTarde.equals(that.qtDoseTarde))
        return false;
    }

    boolean this_present_qtDoseNoite = true && this.isSetQtDoseNoite();
    boolean that_present_qtDoseNoite = true && that.isSetQtDoseNoite();
    if (this_present_qtDoseNoite || that_present_qtDoseNoite) {
      if (!(this_present_qtDoseNoite && that_present_qtDoseNoite))
        return false;
      if (!this.qtDoseNoite.equals(that.qtDoseNoite))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_codigoCatmat = true && (isSetCodigoCatmat());
    list.add(present_codigoCatmat);
    if (present_codigoCatmat)
      list.add(codigoCatmat);

    boolean present_viaAdministracao = true && (isSetViaAdministracao());
    list.add(present_viaAdministracao);
    if (present_viaAdministracao)
      list.add(viaAdministracao);

    boolean present_dose = true && (isSetDose());
    list.add(present_dose);
    if (present_dose)
      list.add(dose);

    boolean present_doseUnica = true && (isSetDoseUnica());
    list.add(present_doseUnica);
    if (present_doseUnica)
      list.add(doseUnica);

    boolean present_usoContinuo = true && (isSetUsoContinuo());
    list.add(present_usoContinuo);
    if (present_usoContinuo)
      list.add(usoContinuo);

    boolean present_doseFrequenciaTipo = true && (isSetDoseFrequenciaTipo());
    list.add(present_doseFrequenciaTipo);
    if (present_doseFrequenciaTipo)
      list.add(doseFrequenciaTipo);

    boolean present_doseFrequencia = true && (isSetDoseFrequencia());
    list.add(present_doseFrequencia);
    if (present_doseFrequencia)
      list.add(doseFrequencia);

    boolean present_doseFrequenciaQuantidade = true && (isSetDoseFrequenciaQuantidade());
    list.add(present_doseFrequenciaQuantidade);
    if (present_doseFrequenciaQuantidade)
      list.add(doseFrequenciaQuantidade);

    boolean present_doseFrequenciaUnidadeMedida = true && (isSetDoseFrequenciaUnidadeMedida());
    list.add(present_doseFrequenciaUnidadeMedida);
    if (present_doseFrequenciaUnidadeMedida)
      list.add(doseFrequenciaUnidadeMedida);

    boolean present_dtInicioTratamento = true && (isSetDtInicioTratamento());
    list.add(present_dtInicioTratamento);
    if (present_dtInicioTratamento)
      list.add(dtInicioTratamento);

    boolean present_duracaoTratamento = true && (isSetDuracaoTratamento());
    list.add(present_duracaoTratamento);
    if (present_duracaoTratamento)
      list.add(duracaoTratamento);

    boolean present_duracaoTratamentoMedida = true && (isSetDuracaoTratamentoMedida());
    list.add(present_duracaoTratamentoMedida);
    if (present_duracaoTratamentoMedida)
      list.add(duracaoTratamentoMedida);

    boolean present_quantidadeReceitada = true && (isSetQuantidadeReceitada());
    list.add(present_quantidadeReceitada);
    if (present_quantidadeReceitada)
      list.add(quantidadeReceitada);

    boolean present_qtDoseManha = true && (isSetQtDoseManha());
    list.add(present_qtDoseManha);
    if (present_qtDoseManha)
      list.add(qtDoseManha);

    boolean present_qtDoseTarde = true && (isSetQtDoseTarde());
    list.add(present_qtDoseTarde);
    if (present_qtDoseTarde)
      list.add(qtDoseTarde);

    boolean present_qtDoseNoite = true && (isSetQtDoseNoite());
    list.add(present_qtDoseNoite);
    if (present_qtDoseNoite)
      list.add(qtDoseNoite);

    return list.hashCode();
  }

  @Override
  public int compareTo(MedicamentoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCodigoCatmat()).compareTo(other.isSetCodigoCatmat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodigoCatmat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codigoCatmat, other.codigoCatmat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViaAdministracao()).compareTo(other.isSetViaAdministracao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViaAdministracao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viaAdministracao, other.viaAdministracao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDose()).compareTo(other.isSetDose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dose, other.dose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoseUnica()).compareTo(other.isSetDoseUnica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoseUnica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doseUnica, other.doseUnica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsoContinuo()).compareTo(other.isSetUsoContinuo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsoContinuo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usoContinuo, other.usoContinuo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoseFrequenciaTipo()).compareTo(other.isSetDoseFrequenciaTipo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoseFrequenciaTipo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doseFrequenciaTipo, other.doseFrequenciaTipo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoseFrequencia()).compareTo(other.isSetDoseFrequencia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoseFrequencia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doseFrequencia, other.doseFrequencia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoseFrequenciaQuantidade()).compareTo(other.isSetDoseFrequenciaQuantidade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoseFrequenciaQuantidade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doseFrequenciaQuantidade, other.doseFrequenciaQuantidade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoseFrequenciaUnidadeMedida()).compareTo(other.isSetDoseFrequenciaUnidadeMedida());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoseFrequenciaUnidadeMedida()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doseFrequenciaUnidadeMedida, other.doseFrequenciaUnidadeMedida);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDtInicioTratamento()).compareTo(other.isSetDtInicioTratamento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtInicioTratamento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtInicioTratamento, other.dtInicioTratamento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuracaoTratamento()).compareTo(other.isSetDuracaoTratamento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuracaoTratamento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duracaoTratamento, other.duracaoTratamento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuracaoTratamentoMedida()).compareTo(other.isSetDuracaoTratamentoMedida());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuracaoTratamentoMedida()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duracaoTratamentoMedida, other.duracaoTratamentoMedida);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantidadeReceitada()).compareTo(other.isSetQuantidadeReceitada());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantidadeReceitada()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantidadeReceitada, other.quantidadeReceitada);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQtDoseManha()).compareTo(other.isSetQtDoseManha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQtDoseManha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtDoseManha, other.qtDoseManha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQtDoseTarde()).compareTo(other.isSetQtDoseTarde());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQtDoseTarde()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtDoseTarde, other.qtDoseTarde);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQtDoseNoite()).compareTo(other.isSetQtDoseNoite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQtDoseNoite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qtDoseNoite, other.qtDoseNoite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MedicamentoThrift(");
    boolean first = true;

    if (isSetCodigoCatmat()) {
      sb.append("codigoCatmat:");
      if (this.codigoCatmat == null) {
        sb.append("null");
      } else {
        sb.append(this.codigoCatmat);
      }
      first = false;
    }
    if (isSetViaAdministracao()) {
      if (!first) sb.append(", ");
      sb.append("viaAdministracao:");
      sb.append(this.viaAdministracao);
      first = false;
    }
    if (isSetDose()) {
      if (!first) sb.append(", ");
      sb.append("dose:");
      if (this.dose == null) {
        sb.append("null");
      } else {
        sb.append(this.dose);
      }
      first = false;
    }
    if (isSetDoseUnica()) {
      if (!first) sb.append(", ");
      sb.append("doseUnica:");
      sb.append(this.doseUnica);
      first = false;
    }
    if (isSetUsoContinuo()) {
      if (!first) sb.append(", ");
      sb.append("usoContinuo:");
      sb.append(this.usoContinuo);
      first = false;
    }
    if (isSetDoseFrequenciaTipo()) {
      if (!first) sb.append(", ");
      sb.append("doseFrequenciaTipo:");
      sb.append(this.doseFrequenciaTipo);
      first = false;
    }
    if (isSetDoseFrequencia()) {
      if (!first) sb.append(", ");
      sb.append("doseFrequencia:");
      if (this.doseFrequencia == null) {
        sb.append("null");
      } else {
        sb.append(this.doseFrequencia);
      }
      first = false;
    }
    if (isSetDoseFrequenciaQuantidade()) {
      if (!first) sb.append(", ");
      sb.append("doseFrequenciaQuantidade:");
      sb.append(this.doseFrequenciaQuantidade);
      first = false;
    }
    if (isSetDoseFrequenciaUnidadeMedida()) {
      if (!first) sb.append(", ");
      sb.append("doseFrequenciaUnidadeMedida:");
      sb.append(this.doseFrequenciaUnidadeMedida);
      first = false;
    }
    if (isSetDtInicioTratamento()) {
      if (!first) sb.append(", ");
      sb.append("dtInicioTratamento:");
      sb.append(this.dtInicioTratamento);
      first = false;
    }
    if (isSetDuracaoTratamento()) {
      if (!first) sb.append(", ");
      sb.append("duracaoTratamento:");
      sb.append(this.duracaoTratamento);
      first = false;
    }
    if (isSetDuracaoTratamentoMedida()) {
      if (!first) sb.append(", ");
      sb.append("duracaoTratamentoMedida:");
      sb.append(this.duracaoTratamentoMedida);
      first = false;
    }
    if (isSetQuantidadeReceitada()) {
      if (!first) sb.append(", ");
      sb.append("quantidadeReceitada:");
      sb.append(this.quantidadeReceitada);
      first = false;
    }
    if (isSetQtDoseManha()) {
      if (!first) sb.append(", ");
      sb.append("qtDoseManha:");
      if (this.qtDoseManha == null) {
        sb.append("null");
      } else {
        sb.append(this.qtDoseManha);
      }
      first = false;
    }
    if (isSetQtDoseTarde()) {
      if (!first) sb.append(", ");
      sb.append("qtDoseTarde:");
      if (this.qtDoseTarde == null) {
        sb.append("null");
      } else {
        sb.append(this.qtDoseTarde);
      }
      first = false;
    }
    if (isSetQtDoseNoite()) {
      if (!first) sb.append(", ");
      sb.append("qtDoseNoite:");
      if (this.qtDoseNoite == null) {
        sb.append("null");
      } else {
        sb.append(this.qtDoseNoite);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MedicamentoThriftStandardSchemeFactory implements SchemeFactory {
    public MedicamentoThriftStandardScheme getScheme() {
      return new MedicamentoThriftStandardScheme();
    }
  }

  private static class MedicamentoThriftStandardScheme extends StandardScheme<MedicamentoThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MedicamentoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODIGO_CATMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codigoCatmat = iprot.readString();
              struct.setCodigoCatmatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIA_ADMINISTRACAO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.viaAdministracao = iprot.readI64();
              struct.setViaAdministracaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dose = iprot.readString();
              struct.setDoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOSE_UNICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.doseUnica = iprot.readBool();
              struct.setDoseUnicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USO_CONTINUO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.usoContinuo = iprot.readBool();
              struct.setUsoContinuoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOSE_FREQUENCIA_TIPO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doseFrequenciaTipo = iprot.readI64();
              struct.setDoseFrequenciaTipoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOSE_FREQUENCIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doseFrequencia = iprot.readString();
              struct.setDoseFrequenciaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOSE_FREQUENCIA_QUANTIDADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.doseFrequenciaQuantidade = iprot.readI32();
              struct.setDoseFrequenciaQuantidadeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOSE_FREQUENCIA_UNIDADE_MEDIDA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.doseFrequenciaUnidadeMedida = iprot.readI64();
              struct.setDoseFrequenciaUnidadeMedidaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DT_INICIO_TRATAMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dtInicioTratamento = iprot.readI64();
              struct.setDtInicioTratamentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DURACAO_TRATAMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.duracaoTratamento = iprot.readI32();
              struct.setDuracaoTratamentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DURACAO_TRATAMENTO_MEDIDA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duracaoTratamentoMedida = iprot.readI64();
              struct.setDuracaoTratamentoMedidaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QUANTIDADE_RECEITADA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantidadeReceitada = iprot.readI32();
              struct.setQuantidadeReceitadaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QT_DOSE_MANHA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qtDoseManha = iprot.readString();
              struct.setQtDoseManhaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QT_DOSE_TARDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qtDoseTarde = iprot.readString();
              struct.setQtDoseTardeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // QT_DOSE_NOITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qtDoseNoite = iprot.readString();
              struct.setQtDoseNoiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MedicamentoThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.codigoCatmat != null) {
        if (struct.isSetCodigoCatmat()) {
          oprot.writeFieldBegin(CODIGO_CATMAT_FIELD_DESC);
          oprot.writeString(struct.codigoCatmat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetViaAdministracao()) {
        oprot.writeFieldBegin(VIA_ADMINISTRACAO_FIELD_DESC);
        oprot.writeI64(struct.viaAdministracao);
        oprot.writeFieldEnd();
      }
      if (struct.dose != null) {
        if (struct.isSetDose()) {
          oprot.writeFieldBegin(DOSE_FIELD_DESC);
          oprot.writeString(struct.dose);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoseUnica()) {
        oprot.writeFieldBegin(DOSE_UNICA_FIELD_DESC);
        oprot.writeBool(struct.doseUnica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsoContinuo()) {
        oprot.writeFieldBegin(USO_CONTINUO_FIELD_DESC);
        oprot.writeBool(struct.usoContinuo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoseFrequenciaTipo()) {
        oprot.writeFieldBegin(DOSE_FREQUENCIA_TIPO_FIELD_DESC);
        oprot.writeI64(struct.doseFrequenciaTipo);
        oprot.writeFieldEnd();
      }
      if (struct.doseFrequencia != null) {
        if (struct.isSetDoseFrequencia()) {
          oprot.writeFieldBegin(DOSE_FREQUENCIA_FIELD_DESC);
          oprot.writeString(struct.doseFrequencia);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoseFrequenciaQuantidade()) {
        oprot.writeFieldBegin(DOSE_FREQUENCIA_QUANTIDADE_FIELD_DESC);
        oprot.writeI32(struct.doseFrequenciaQuantidade);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoseFrequenciaUnidadeMedida()) {
        oprot.writeFieldBegin(DOSE_FREQUENCIA_UNIDADE_MEDIDA_FIELD_DESC);
        oprot.writeI64(struct.doseFrequenciaUnidadeMedida);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDtInicioTratamento()) {
        oprot.writeFieldBegin(DT_INICIO_TRATAMENTO_FIELD_DESC);
        oprot.writeI64(struct.dtInicioTratamento);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDuracaoTratamento()) {
        oprot.writeFieldBegin(DURACAO_TRATAMENTO_FIELD_DESC);
        oprot.writeI32(struct.duracaoTratamento);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDuracaoTratamentoMedida()) {
        oprot.writeFieldBegin(DURACAO_TRATAMENTO_MEDIDA_FIELD_DESC);
        oprot.writeI64(struct.duracaoTratamentoMedida);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantidadeReceitada()) {
        oprot.writeFieldBegin(QUANTIDADE_RECEITADA_FIELD_DESC);
        oprot.writeI32(struct.quantidadeReceitada);
        oprot.writeFieldEnd();
      }
      if (struct.qtDoseManha != null) {
        if (struct.isSetQtDoseManha()) {
          oprot.writeFieldBegin(QT_DOSE_MANHA_FIELD_DESC);
          oprot.writeString(struct.qtDoseManha);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qtDoseTarde != null) {
        if (struct.isSetQtDoseTarde()) {
          oprot.writeFieldBegin(QT_DOSE_TARDE_FIELD_DESC);
          oprot.writeString(struct.qtDoseTarde);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qtDoseNoite != null) {
        if (struct.isSetQtDoseNoite()) {
          oprot.writeFieldBegin(QT_DOSE_NOITE_FIELD_DESC);
          oprot.writeString(struct.qtDoseNoite);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MedicamentoThriftTupleSchemeFactory implements SchemeFactory {
    public MedicamentoThriftTupleScheme getScheme() {
      return new MedicamentoThriftTupleScheme();
    }
  }

  private static class MedicamentoThriftTupleScheme extends TupleScheme<MedicamentoThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MedicamentoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCodigoCatmat()) {
        optionals.set(0);
      }
      if (struct.isSetViaAdministracao()) {
        optionals.set(1);
      }
      if (struct.isSetDose()) {
        optionals.set(2);
      }
      if (struct.isSetDoseUnica()) {
        optionals.set(3);
      }
      if (struct.isSetUsoContinuo()) {
        optionals.set(4);
      }
      if (struct.isSetDoseFrequenciaTipo()) {
        optionals.set(5);
      }
      if (struct.isSetDoseFrequencia()) {
        optionals.set(6);
      }
      if (struct.isSetDoseFrequenciaQuantidade()) {
        optionals.set(7);
      }
      if (struct.isSetDoseFrequenciaUnidadeMedida()) {
        optionals.set(8);
      }
      if (struct.isSetDtInicioTratamento()) {
        optionals.set(9);
      }
      if (struct.isSetDuracaoTratamento()) {
        optionals.set(10);
      }
      if (struct.isSetDuracaoTratamentoMedida()) {
        optionals.set(11);
      }
      if (struct.isSetQuantidadeReceitada()) {
        optionals.set(12);
      }
      if (struct.isSetQtDoseManha()) {
        optionals.set(13);
      }
      if (struct.isSetQtDoseTarde()) {
        optionals.set(14);
      }
      if (struct.isSetQtDoseNoite()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetCodigoCatmat()) {
        oprot.writeString(struct.codigoCatmat);
      }
      if (struct.isSetViaAdministracao()) {
        oprot.writeI64(struct.viaAdministracao);
      }
      if (struct.isSetDose()) {
        oprot.writeString(struct.dose);
      }
      if (struct.isSetDoseUnica()) {
        oprot.writeBool(struct.doseUnica);
      }
      if (struct.isSetUsoContinuo()) {
        oprot.writeBool(struct.usoContinuo);
      }
      if (struct.isSetDoseFrequenciaTipo()) {
        oprot.writeI64(struct.doseFrequenciaTipo);
      }
      if (struct.isSetDoseFrequencia()) {
        oprot.writeString(struct.doseFrequencia);
      }
      if (struct.isSetDoseFrequenciaQuantidade()) {
        oprot.writeI32(struct.doseFrequenciaQuantidade);
      }
      if (struct.isSetDoseFrequenciaUnidadeMedida()) {
        oprot.writeI64(struct.doseFrequenciaUnidadeMedida);
      }
      if (struct.isSetDtInicioTratamento()) {
        oprot.writeI64(struct.dtInicioTratamento);
      }
      if (struct.isSetDuracaoTratamento()) {
        oprot.writeI32(struct.duracaoTratamento);
      }
      if (struct.isSetDuracaoTratamentoMedida()) {
        oprot.writeI64(struct.duracaoTratamentoMedida);
      }
      if (struct.isSetQuantidadeReceitada()) {
        oprot.writeI32(struct.quantidadeReceitada);
      }
      if (struct.isSetQtDoseManha()) {
        oprot.writeString(struct.qtDoseManha);
      }
      if (struct.isSetQtDoseTarde()) {
        oprot.writeString(struct.qtDoseTarde);
      }
      if (struct.isSetQtDoseNoite()) {
        oprot.writeString(struct.qtDoseNoite);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MedicamentoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.codigoCatmat = iprot.readString();
        struct.setCodigoCatmatIsSet(true);
      }
      if (incoming.get(1)) {
        struct.viaAdministracao = iprot.readI64();
        struct.setViaAdministracaoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dose = iprot.readString();
        struct.setDoseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.doseUnica = iprot.readBool();
        struct.setDoseUnicaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usoContinuo = iprot.readBool();
        struct.setUsoContinuoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doseFrequenciaTipo = iprot.readI64();
        struct.setDoseFrequenciaTipoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.doseFrequencia = iprot.readString();
        struct.setDoseFrequenciaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.doseFrequenciaQuantidade = iprot.readI32();
        struct.setDoseFrequenciaQuantidadeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.doseFrequenciaUnidadeMedida = iprot.readI64();
        struct.setDoseFrequenciaUnidadeMedidaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dtInicioTratamento = iprot.readI64();
        struct.setDtInicioTratamentoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.duracaoTratamento = iprot.readI32();
        struct.setDuracaoTratamentoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.duracaoTratamentoMedida = iprot.readI64();
        struct.setDuracaoTratamentoMedidaIsSet(true);
      }
      if (incoming.get(12)) {
        struct.quantidadeReceitada = iprot.readI32();
        struct.setQuantidadeReceitadaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.qtDoseManha = iprot.readString();
        struct.setQtDoseManhaIsSet(true);
      }
      if (incoming.get(14)) {
        struct.qtDoseTarde = iprot.readString();
        struct.setQtDoseTardeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.qtDoseNoite = iprot.readString();
        struct.setQtDoseNoiteIsSet(true);
      }
    }
  }

}

