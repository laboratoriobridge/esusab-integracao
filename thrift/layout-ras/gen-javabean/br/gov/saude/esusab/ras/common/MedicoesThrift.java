/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-11")
public class MedicoesThrift implements org.apache.thrift.TBase<MedicoesThrift, MedicoesThrift._Fields>, java.io.Serializable, Cloneable, Comparable<MedicoesThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MedicoesThrift");

  private static final org.apache.thrift.protocol.TField CIRCUNFERENCIA_ABDOMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("circunferenciaAbdominal", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PERIMETRO_PANTURRILHA_FIELD_DESC = new org.apache.thrift.protocol.TField("perimetroPanturrilha", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRESSAO_ARTERIAL_SISTOLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("pressaoArterialSistolica", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRESSAO_ARTERIAL_DIASTOLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("pressaoArterialDiastolica", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FREQUENCIA_RESPIRATORIA_FIELD_DESC = new org.apache.thrift.protocol.TField("frequenciaRespiratoria", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FREQUENCIA_CARDIACA_FIELD_DESC = new org.apache.thrift.protocol.TField("frequenciaCardiaca", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TEMPERATURA_FIELD_DESC = new org.apache.thrift.protocol.TField("temperatura", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SATURACAO_O2_FIELD_DESC = new org.apache.thrift.protocol.TField("saturacaoO2", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField GLICEMIA_CAPILAR_FIELD_DESC = new org.apache.thrift.protocol.TField("glicemiaCapilar", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TIPO_GLICEMIA_CAPILAR_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoGlicemiaCapilar", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ALTURA_FIELD_DESC = new org.apache.thrift.protocol.TField("altura", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PERIMETRO_CEFALICO_FIELD_DESC = new org.apache.thrift.protocol.TField("perimetroCefalico", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MedicoesThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MedicoesThriftTupleSchemeFactory());
  }

  private double circunferenciaAbdominal; // optional
  private double perimetroPanturrilha; // optional
  private int pressaoArterialSistolica; // optional
  private int pressaoArterialDiastolica; // optional
  private int frequenciaRespiratoria; // optional
  private int frequenciaCardiaca; // optional
  private double temperatura; // optional
  private int saturacaoO2; // optional
  private int glicemiaCapilar; // optional
  private long tipoGlicemiaCapilar; // optional
  private double peso; // optional
  private double altura; // optional
  private double perimetroCefalico; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CIRCUNFERENCIA_ABDOMINAL((short)1, "circunferenciaAbdominal"),
    PERIMETRO_PANTURRILHA((short)2, "perimetroPanturrilha"),
    PRESSAO_ARTERIAL_SISTOLICA((short)3, "pressaoArterialSistolica"),
    PRESSAO_ARTERIAL_DIASTOLICA((short)4, "pressaoArterialDiastolica"),
    FREQUENCIA_RESPIRATORIA((short)5, "frequenciaRespiratoria"),
    FREQUENCIA_CARDIACA((short)6, "frequenciaCardiaca"),
    TEMPERATURA((short)7, "temperatura"),
    SATURACAO_O2((short)8, "saturacaoO2"),
    GLICEMIA_CAPILAR((short)9, "glicemiaCapilar"),
    TIPO_GLICEMIA_CAPILAR((short)10, "tipoGlicemiaCapilar"),
    PESO((short)11, "peso"),
    ALTURA((short)12, "altura"),
    PERIMETRO_CEFALICO((short)13, "perimetroCefalico");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CIRCUNFERENCIA_ABDOMINAL
          return CIRCUNFERENCIA_ABDOMINAL;
        case 2: // PERIMETRO_PANTURRILHA
          return PERIMETRO_PANTURRILHA;
        case 3: // PRESSAO_ARTERIAL_SISTOLICA
          return PRESSAO_ARTERIAL_SISTOLICA;
        case 4: // PRESSAO_ARTERIAL_DIASTOLICA
          return PRESSAO_ARTERIAL_DIASTOLICA;
        case 5: // FREQUENCIA_RESPIRATORIA
          return FREQUENCIA_RESPIRATORIA;
        case 6: // FREQUENCIA_CARDIACA
          return FREQUENCIA_CARDIACA;
        case 7: // TEMPERATURA
          return TEMPERATURA;
        case 8: // SATURACAO_O2
          return SATURACAO_O2;
        case 9: // GLICEMIA_CAPILAR
          return GLICEMIA_CAPILAR;
        case 10: // TIPO_GLICEMIA_CAPILAR
          return TIPO_GLICEMIA_CAPILAR;
        case 11: // PESO
          return PESO;
        case 12: // ALTURA
          return ALTURA;
        case 13: // PERIMETRO_CEFALICO
          return PERIMETRO_CEFALICO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CIRCUNFERENCIAABDOMINAL_ISSET_ID = 0;
  private static final int __PERIMETROPANTURRILHA_ISSET_ID = 1;
  private static final int __PRESSAOARTERIALSISTOLICA_ISSET_ID = 2;
  private static final int __PRESSAOARTERIALDIASTOLICA_ISSET_ID = 3;
  private static final int __FREQUENCIARESPIRATORIA_ISSET_ID = 4;
  private static final int __FREQUENCIACARDIACA_ISSET_ID = 5;
  private static final int __TEMPERATURA_ISSET_ID = 6;
  private static final int __SATURACAOO2_ISSET_ID = 7;
  private static final int __GLICEMIACAPILAR_ISSET_ID = 8;
  private static final int __TIPOGLICEMIACAPILAR_ISSET_ID = 9;
  private static final int __PESO_ISSET_ID = 10;
  private static final int __ALTURA_ISSET_ID = 11;
  private static final int __PERIMETROCEFALICO_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CIRCUNFERENCIA_ABDOMINAL,_Fields.PERIMETRO_PANTURRILHA,_Fields.PRESSAO_ARTERIAL_SISTOLICA,_Fields.PRESSAO_ARTERIAL_DIASTOLICA,_Fields.FREQUENCIA_RESPIRATORIA,_Fields.FREQUENCIA_CARDIACA,_Fields.TEMPERATURA,_Fields.SATURACAO_O2,_Fields.GLICEMIA_CAPILAR,_Fields.TIPO_GLICEMIA_CAPILAR,_Fields.PESO,_Fields.ALTURA,_Fields.PERIMETRO_CEFALICO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CIRCUNFERENCIA_ABDOMINAL, new org.apache.thrift.meta_data.FieldMetaData("circunferenciaAbdominal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERIMETRO_PANTURRILHA, new org.apache.thrift.meta_data.FieldMetaData("perimetroPanturrilha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRESSAO_ARTERIAL_SISTOLICA, new org.apache.thrift.meta_data.FieldMetaData("pressaoArterialSistolica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRESSAO_ARTERIAL_DIASTOLICA, new org.apache.thrift.meta_data.FieldMetaData("pressaoArterialDiastolica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQUENCIA_RESPIRATORIA, new org.apache.thrift.meta_data.FieldMetaData("frequenciaRespiratoria", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQUENCIA_CARDIACA, new org.apache.thrift.meta_data.FieldMetaData("frequenciaCardiaca", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPERATURA, new org.apache.thrift.meta_data.FieldMetaData("temperatura", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SATURACAO_O2, new org.apache.thrift.meta_data.FieldMetaData("saturacaoO2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GLICEMIA_CAPILAR, new org.apache.thrift.meta_data.FieldMetaData("glicemiaCapilar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIPO_GLICEMIA_CAPILAR, new org.apache.thrift.meta_data.FieldMetaData("tipoGlicemiaCapilar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALTURA, new org.apache.thrift.meta_data.FieldMetaData("altura", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERIMETRO_CEFALICO, new org.apache.thrift.meta_data.FieldMetaData("perimetroCefalico", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MedicoesThrift.class, metaDataMap);
  }

  public MedicoesThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MedicoesThrift(MedicoesThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.circunferenciaAbdominal = other.circunferenciaAbdominal;
    this.perimetroPanturrilha = other.perimetroPanturrilha;
    this.pressaoArterialSistolica = other.pressaoArterialSistolica;
    this.pressaoArterialDiastolica = other.pressaoArterialDiastolica;
    this.frequenciaRespiratoria = other.frequenciaRespiratoria;
    this.frequenciaCardiaca = other.frequenciaCardiaca;
    this.temperatura = other.temperatura;
    this.saturacaoO2 = other.saturacaoO2;
    this.glicemiaCapilar = other.glicemiaCapilar;
    this.tipoGlicemiaCapilar = other.tipoGlicemiaCapilar;
    this.peso = other.peso;
    this.altura = other.altura;
    this.perimetroCefalico = other.perimetroCefalico;
  }

  public MedicoesThrift deepCopy() {
    return new MedicoesThrift(this);
  }

  @Override
  public void clear() {
    setCircunferenciaAbdominalIsSet(false);
    this.circunferenciaAbdominal = 0.0;
    setPerimetroPanturrilhaIsSet(false);
    this.perimetroPanturrilha = 0.0;
    setPressaoArterialSistolicaIsSet(false);
    this.pressaoArterialSistolica = 0;
    setPressaoArterialDiastolicaIsSet(false);
    this.pressaoArterialDiastolica = 0;
    setFrequenciaRespiratoriaIsSet(false);
    this.frequenciaRespiratoria = 0;
    setFrequenciaCardiacaIsSet(false);
    this.frequenciaCardiaca = 0;
    setTemperaturaIsSet(false);
    this.temperatura = 0.0;
    setSaturacaoO2IsSet(false);
    this.saturacaoO2 = 0;
    setGlicemiaCapilarIsSet(false);
    this.glicemiaCapilar = 0;
    setTipoGlicemiaCapilarIsSet(false);
    this.tipoGlicemiaCapilar = 0;
    setPesoIsSet(false);
    this.peso = 0.0;
    setAlturaIsSet(false);
    this.altura = 0.0;
    setPerimetroCefalicoIsSet(false);
    this.perimetroCefalico = 0.0;
  }

  public double getCircunferenciaAbdominal() {
    return this.circunferenciaAbdominal;
  }

  public void setCircunferenciaAbdominal(double circunferenciaAbdominal) {
    this.circunferenciaAbdominal = circunferenciaAbdominal;
    setCircunferenciaAbdominalIsSet(true);
  }

  public void unsetCircunferenciaAbdominal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CIRCUNFERENCIAABDOMINAL_ISSET_ID);
  }

  /** Returns true if field circunferenciaAbdominal is set (has been assigned a value) and false otherwise */
  public boolean isSetCircunferenciaAbdominal() {
    return EncodingUtils.testBit(__isset_bitfield, __CIRCUNFERENCIAABDOMINAL_ISSET_ID);
  }

  public void setCircunferenciaAbdominalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CIRCUNFERENCIAABDOMINAL_ISSET_ID, value);
  }

  public double getPerimetroPanturrilha() {
    return this.perimetroPanturrilha;
  }

  public void setPerimetroPanturrilha(double perimetroPanturrilha) {
    this.perimetroPanturrilha = perimetroPanturrilha;
    setPerimetroPanturrilhaIsSet(true);
  }

  public void unsetPerimetroPanturrilha() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERIMETROPANTURRILHA_ISSET_ID);
  }

  /** Returns true if field perimetroPanturrilha is set (has been assigned a value) and false otherwise */
  public boolean isSetPerimetroPanturrilha() {
    return EncodingUtils.testBit(__isset_bitfield, __PERIMETROPANTURRILHA_ISSET_ID);
  }

  public void setPerimetroPanturrilhaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERIMETROPANTURRILHA_ISSET_ID, value);
  }

  public int getPressaoArterialSistolica() {
    return this.pressaoArterialSistolica;
  }

  public void setPressaoArterialSistolica(int pressaoArterialSistolica) {
    this.pressaoArterialSistolica = pressaoArterialSistolica;
    setPressaoArterialSistolicaIsSet(true);
  }

  public void unsetPressaoArterialSistolica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESSAOARTERIALSISTOLICA_ISSET_ID);
  }

  /** Returns true if field pressaoArterialSistolica is set (has been assigned a value) and false otherwise */
  public boolean isSetPressaoArterialSistolica() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESSAOARTERIALSISTOLICA_ISSET_ID);
  }

  public void setPressaoArterialSistolicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESSAOARTERIALSISTOLICA_ISSET_ID, value);
  }

  public int getPressaoArterialDiastolica() {
    return this.pressaoArterialDiastolica;
  }

  public void setPressaoArterialDiastolica(int pressaoArterialDiastolica) {
    this.pressaoArterialDiastolica = pressaoArterialDiastolica;
    setPressaoArterialDiastolicaIsSet(true);
  }

  public void unsetPressaoArterialDiastolica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESSAOARTERIALDIASTOLICA_ISSET_ID);
  }

  /** Returns true if field pressaoArterialDiastolica is set (has been assigned a value) and false otherwise */
  public boolean isSetPressaoArterialDiastolica() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESSAOARTERIALDIASTOLICA_ISSET_ID);
  }

  public void setPressaoArterialDiastolicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESSAOARTERIALDIASTOLICA_ISSET_ID, value);
  }

  public int getFrequenciaRespiratoria() {
    return this.frequenciaRespiratoria;
  }

  public void setFrequenciaRespiratoria(int frequenciaRespiratoria) {
    this.frequenciaRespiratoria = frequenciaRespiratoria;
    setFrequenciaRespiratoriaIsSet(true);
  }

  public void unsetFrequenciaRespiratoria() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCIARESPIRATORIA_ISSET_ID);
  }

  /** Returns true if field frequenciaRespiratoria is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequenciaRespiratoria() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCIARESPIRATORIA_ISSET_ID);
  }

  public void setFrequenciaRespiratoriaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCIARESPIRATORIA_ISSET_ID, value);
  }

  public int getFrequenciaCardiaca() {
    return this.frequenciaCardiaca;
  }

  public void setFrequenciaCardiaca(int frequenciaCardiaca) {
    this.frequenciaCardiaca = frequenciaCardiaca;
    setFrequenciaCardiacaIsSet(true);
  }

  public void unsetFrequenciaCardiaca() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCIACARDIACA_ISSET_ID);
  }

  /** Returns true if field frequenciaCardiaca is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequenciaCardiaca() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCIACARDIACA_ISSET_ID);
  }

  public void setFrequenciaCardiacaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCIACARDIACA_ISSET_ID, value);
  }

  public double getTemperatura() {
    return this.temperatura;
  }

  public void setTemperatura(double temperatura) {
    this.temperatura = temperatura;
    setTemperaturaIsSet(true);
  }

  public void unsetTemperatura() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURA_ISSET_ID);
  }

  /** Returns true if field temperatura is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperatura() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATURA_ISSET_ID);
  }

  public void setTemperaturaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATURA_ISSET_ID, value);
  }

  public int getSaturacaoO2() {
    return this.saturacaoO2;
  }

  public void setSaturacaoO2(int saturacaoO2) {
    this.saturacaoO2 = saturacaoO2;
    setSaturacaoO2IsSet(true);
  }

  public void unsetSaturacaoO2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SATURACAOO2_ISSET_ID);
  }

  /** Returns true if field saturacaoO2 is set (has been assigned a value) and false otherwise */
  public boolean isSetSaturacaoO2() {
    return EncodingUtils.testBit(__isset_bitfield, __SATURACAOO2_ISSET_ID);
  }

  public void setSaturacaoO2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SATURACAOO2_ISSET_ID, value);
  }

  public int getGlicemiaCapilar() {
    return this.glicemiaCapilar;
  }

  public void setGlicemiaCapilar(int glicemiaCapilar) {
    this.glicemiaCapilar = glicemiaCapilar;
    setGlicemiaCapilarIsSet(true);
  }

  public void unsetGlicemiaCapilar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GLICEMIACAPILAR_ISSET_ID);
  }

  /** Returns true if field glicemiaCapilar is set (has been assigned a value) and false otherwise */
  public boolean isSetGlicemiaCapilar() {
    return EncodingUtils.testBit(__isset_bitfield, __GLICEMIACAPILAR_ISSET_ID);
  }

  public void setGlicemiaCapilarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GLICEMIACAPILAR_ISSET_ID, value);
  }

  public long getTipoGlicemiaCapilar() {
    return this.tipoGlicemiaCapilar;
  }

  public void setTipoGlicemiaCapilar(long tipoGlicemiaCapilar) {
    this.tipoGlicemiaCapilar = tipoGlicemiaCapilar;
    setTipoGlicemiaCapilarIsSet(true);
  }

  public void unsetTipoGlicemiaCapilar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIPOGLICEMIACAPILAR_ISSET_ID);
  }

  /** Returns true if field tipoGlicemiaCapilar is set (has been assigned a value) and false otherwise */
  public boolean isSetTipoGlicemiaCapilar() {
    return EncodingUtils.testBit(__isset_bitfield, __TIPOGLICEMIACAPILAR_ISSET_ID);
  }

  public void setTipoGlicemiaCapilarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIPOGLICEMIACAPILAR_ISSET_ID, value);
  }

  public double getPeso() {
    return this.peso;
  }

  public void setPeso(double peso) {
    this.peso = peso;
    setPesoIsSet(true);
  }

  public void unsetPeso() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
  }

  /** Returns true if field peso is set (has been assigned a value) and false otherwise */
  public boolean isSetPeso() {
    return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
  }

  public void setPesoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
  }

  public double getAltura() {
    return this.altura;
  }

  public void setAltura(double altura) {
    this.altura = altura;
    setAlturaIsSet(true);
  }

  public void unsetAltura() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALTURA_ISSET_ID);
  }

  /** Returns true if field altura is set (has been assigned a value) and false otherwise */
  public boolean isSetAltura() {
    return EncodingUtils.testBit(__isset_bitfield, __ALTURA_ISSET_ID);
  }

  public void setAlturaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALTURA_ISSET_ID, value);
  }

  public double getPerimetroCefalico() {
    return this.perimetroCefalico;
  }

  public void setPerimetroCefalico(double perimetroCefalico) {
    this.perimetroCefalico = perimetroCefalico;
    setPerimetroCefalicoIsSet(true);
  }

  public void unsetPerimetroCefalico() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERIMETROCEFALICO_ISSET_ID);
  }

  /** Returns true if field perimetroCefalico is set (has been assigned a value) and false otherwise */
  public boolean isSetPerimetroCefalico() {
    return EncodingUtils.testBit(__isset_bitfield, __PERIMETROCEFALICO_ISSET_ID);
  }

  public void setPerimetroCefalicoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERIMETROCEFALICO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CIRCUNFERENCIA_ABDOMINAL:
      if (value == null) {
        unsetCircunferenciaAbdominal();
      } else {
        setCircunferenciaAbdominal((Double)value);
      }
      break;

    case PERIMETRO_PANTURRILHA:
      if (value == null) {
        unsetPerimetroPanturrilha();
      } else {
        setPerimetroPanturrilha((Double)value);
      }
      break;

    case PRESSAO_ARTERIAL_SISTOLICA:
      if (value == null) {
        unsetPressaoArterialSistolica();
      } else {
        setPressaoArterialSistolica((Integer)value);
      }
      break;

    case PRESSAO_ARTERIAL_DIASTOLICA:
      if (value == null) {
        unsetPressaoArterialDiastolica();
      } else {
        setPressaoArterialDiastolica((Integer)value);
      }
      break;

    case FREQUENCIA_RESPIRATORIA:
      if (value == null) {
        unsetFrequenciaRespiratoria();
      } else {
        setFrequenciaRespiratoria((Integer)value);
      }
      break;

    case FREQUENCIA_CARDIACA:
      if (value == null) {
        unsetFrequenciaCardiaca();
      } else {
        setFrequenciaCardiaca((Integer)value);
      }
      break;

    case TEMPERATURA:
      if (value == null) {
        unsetTemperatura();
      } else {
        setTemperatura((Double)value);
      }
      break;

    case SATURACAO_O2:
      if (value == null) {
        unsetSaturacaoO2();
      } else {
        setSaturacaoO2((Integer)value);
      }
      break;

    case GLICEMIA_CAPILAR:
      if (value == null) {
        unsetGlicemiaCapilar();
      } else {
        setGlicemiaCapilar((Integer)value);
      }
      break;

    case TIPO_GLICEMIA_CAPILAR:
      if (value == null) {
        unsetTipoGlicemiaCapilar();
      } else {
        setTipoGlicemiaCapilar((Long)value);
      }
      break;

    case PESO:
      if (value == null) {
        unsetPeso();
      } else {
        setPeso((Double)value);
      }
      break;

    case ALTURA:
      if (value == null) {
        unsetAltura();
      } else {
        setAltura((Double)value);
      }
      break;

    case PERIMETRO_CEFALICO:
      if (value == null) {
        unsetPerimetroCefalico();
      } else {
        setPerimetroCefalico((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CIRCUNFERENCIA_ABDOMINAL:
      return getCircunferenciaAbdominal();

    case PERIMETRO_PANTURRILHA:
      return getPerimetroPanturrilha();

    case PRESSAO_ARTERIAL_SISTOLICA:
      return getPressaoArterialSistolica();

    case PRESSAO_ARTERIAL_DIASTOLICA:
      return getPressaoArterialDiastolica();

    case FREQUENCIA_RESPIRATORIA:
      return getFrequenciaRespiratoria();

    case FREQUENCIA_CARDIACA:
      return getFrequenciaCardiaca();

    case TEMPERATURA:
      return getTemperatura();

    case SATURACAO_O2:
      return getSaturacaoO2();

    case GLICEMIA_CAPILAR:
      return getGlicemiaCapilar();

    case TIPO_GLICEMIA_CAPILAR:
      return getTipoGlicemiaCapilar();

    case PESO:
      return getPeso();

    case ALTURA:
      return getAltura();

    case PERIMETRO_CEFALICO:
      return getPerimetroCefalico();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CIRCUNFERENCIA_ABDOMINAL:
      return isSetCircunferenciaAbdominal();
    case PERIMETRO_PANTURRILHA:
      return isSetPerimetroPanturrilha();
    case PRESSAO_ARTERIAL_SISTOLICA:
      return isSetPressaoArterialSistolica();
    case PRESSAO_ARTERIAL_DIASTOLICA:
      return isSetPressaoArterialDiastolica();
    case FREQUENCIA_RESPIRATORIA:
      return isSetFrequenciaRespiratoria();
    case FREQUENCIA_CARDIACA:
      return isSetFrequenciaCardiaca();
    case TEMPERATURA:
      return isSetTemperatura();
    case SATURACAO_O2:
      return isSetSaturacaoO2();
    case GLICEMIA_CAPILAR:
      return isSetGlicemiaCapilar();
    case TIPO_GLICEMIA_CAPILAR:
      return isSetTipoGlicemiaCapilar();
    case PESO:
      return isSetPeso();
    case ALTURA:
      return isSetAltura();
    case PERIMETRO_CEFALICO:
      return isSetPerimetroCefalico();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MedicoesThrift)
      return this.equals((MedicoesThrift)that);
    return false;
  }

  public boolean equals(MedicoesThrift that) {
    if (that == null)
      return false;

    boolean this_present_circunferenciaAbdominal = true && this.isSetCircunferenciaAbdominal();
    boolean that_present_circunferenciaAbdominal = true && that.isSetCircunferenciaAbdominal();
    if (this_present_circunferenciaAbdominal || that_present_circunferenciaAbdominal) {
      if (!(this_present_circunferenciaAbdominal && that_present_circunferenciaAbdominal))
        return false;
      if (this.circunferenciaAbdominal != that.circunferenciaAbdominal)
        return false;
    }

    boolean this_present_perimetroPanturrilha = true && this.isSetPerimetroPanturrilha();
    boolean that_present_perimetroPanturrilha = true && that.isSetPerimetroPanturrilha();
    if (this_present_perimetroPanturrilha || that_present_perimetroPanturrilha) {
      if (!(this_present_perimetroPanturrilha && that_present_perimetroPanturrilha))
        return false;
      if (this.perimetroPanturrilha != that.perimetroPanturrilha)
        return false;
    }

    boolean this_present_pressaoArterialSistolica = true && this.isSetPressaoArterialSistolica();
    boolean that_present_pressaoArterialSistolica = true && that.isSetPressaoArterialSistolica();
    if (this_present_pressaoArterialSistolica || that_present_pressaoArterialSistolica) {
      if (!(this_present_pressaoArterialSistolica && that_present_pressaoArterialSistolica))
        return false;
      if (this.pressaoArterialSistolica != that.pressaoArterialSistolica)
        return false;
    }

    boolean this_present_pressaoArterialDiastolica = true && this.isSetPressaoArterialDiastolica();
    boolean that_present_pressaoArterialDiastolica = true && that.isSetPressaoArterialDiastolica();
    if (this_present_pressaoArterialDiastolica || that_present_pressaoArterialDiastolica) {
      if (!(this_present_pressaoArterialDiastolica && that_present_pressaoArterialDiastolica))
        return false;
      if (this.pressaoArterialDiastolica != that.pressaoArterialDiastolica)
        return false;
    }

    boolean this_present_frequenciaRespiratoria = true && this.isSetFrequenciaRespiratoria();
    boolean that_present_frequenciaRespiratoria = true && that.isSetFrequenciaRespiratoria();
    if (this_present_frequenciaRespiratoria || that_present_frequenciaRespiratoria) {
      if (!(this_present_frequenciaRespiratoria && that_present_frequenciaRespiratoria))
        return false;
      if (this.frequenciaRespiratoria != that.frequenciaRespiratoria)
        return false;
    }

    boolean this_present_frequenciaCardiaca = true && this.isSetFrequenciaCardiaca();
    boolean that_present_frequenciaCardiaca = true && that.isSetFrequenciaCardiaca();
    if (this_present_frequenciaCardiaca || that_present_frequenciaCardiaca) {
      if (!(this_present_frequenciaCardiaca && that_present_frequenciaCardiaca))
        return false;
      if (this.frequenciaCardiaca != that.frequenciaCardiaca)
        return false;
    }

    boolean this_present_temperatura = true && this.isSetTemperatura();
    boolean that_present_temperatura = true && that.isSetTemperatura();
    if (this_present_temperatura || that_present_temperatura) {
      if (!(this_present_temperatura && that_present_temperatura))
        return false;
      if (this.temperatura != that.temperatura)
        return false;
    }

    boolean this_present_saturacaoO2 = true && this.isSetSaturacaoO2();
    boolean that_present_saturacaoO2 = true && that.isSetSaturacaoO2();
    if (this_present_saturacaoO2 || that_present_saturacaoO2) {
      if (!(this_present_saturacaoO2 && that_present_saturacaoO2))
        return false;
      if (this.saturacaoO2 != that.saturacaoO2)
        return false;
    }

    boolean this_present_glicemiaCapilar = true && this.isSetGlicemiaCapilar();
    boolean that_present_glicemiaCapilar = true && that.isSetGlicemiaCapilar();
    if (this_present_glicemiaCapilar || that_present_glicemiaCapilar) {
      if (!(this_present_glicemiaCapilar && that_present_glicemiaCapilar))
        return false;
      if (this.glicemiaCapilar != that.glicemiaCapilar)
        return false;
    }

    boolean this_present_tipoGlicemiaCapilar = true && this.isSetTipoGlicemiaCapilar();
    boolean that_present_tipoGlicemiaCapilar = true && that.isSetTipoGlicemiaCapilar();
    if (this_present_tipoGlicemiaCapilar || that_present_tipoGlicemiaCapilar) {
      if (!(this_present_tipoGlicemiaCapilar && that_present_tipoGlicemiaCapilar))
        return false;
      if (this.tipoGlicemiaCapilar != that.tipoGlicemiaCapilar)
        return false;
    }

    boolean this_present_peso = true && this.isSetPeso();
    boolean that_present_peso = true && that.isSetPeso();
    if (this_present_peso || that_present_peso) {
      if (!(this_present_peso && that_present_peso))
        return false;
      if (this.peso != that.peso)
        return false;
    }

    boolean this_present_altura = true && this.isSetAltura();
    boolean that_present_altura = true && that.isSetAltura();
    if (this_present_altura || that_present_altura) {
      if (!(this_present_altura && that_present_altura))
        return false;
      if (this.altura != that.altura)
        return false;
    }

    boolean this_present_perimetroCefalico = true && this.isSetPerimetroCefalico();
    boolean that_present_perimetroCefalico = true && that.isSetPerimetroCefalico();
    if (this_present_perimetroCefalico || that_present_perimetroCefalico) {
      if (!(this_present_perimetroCefalico && that_present_perimetroCefalico))
        return false;
      if (this.perimetroCefalico != that.perimetroCefalico)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_circunferenciaAbdominal = true && (isSetCircunferenciaAbdominal());
    list.add(present_circunferenciaAbdominal);
    if (present_circunferenciaAbdominal)
      list.add(circunferenciaAbdominal);

    boolean present_perimetroPanturrilha = true && (isSetPerimetroPanturrilha());
    list.add(present_perimetroPanturrilha);
    if (present_perimetroPanturrilha)
      list.add(perimetroPanturrilha);

    boolean present_pressaoArterialSistolica = true && (isSetPressaoArterialSistolica());
    list.add(present_pressaoArterialSistolica);
    if (present_pressaoArterialSistolica)
      list.add(pressaoArterialSistolica);

    boolean present_pressaoArterialDiastolica = true && (isSetPressaoArterialDiastolica());
    list.add(present_pressaoArterialDiastolica);
    if (present_pressaoArterialDiastolica)
      list.add(pressaoArterialDiastolica);

    boolean present_frequenciaRespiratoria = true && (isSetFrequenciaRespiratoria());
    list.add(present_frequenciaRespiratoria);
    if (present_frequenciaRespiratoria)
      list.add(frequenciaRespiratoria);

    boolean present_frequenciaCardiaca = true && (isSetFrequenciaCardiaca());
    list.add(present_frequenciaCardiaca);
    if (present_frequenciaCardiaca)
      list.add(frequenciaCardiaca);

    boolean present_temperatura = true && (isSetTemperatura());
    list.add(present_temperatura);
    if (present_temperatura)
      list.add(temperatura);

    boolean present_saturacaoO2 = true && (isSetSaturacaoO2());
    list.add(present_saturacaoO2);
    if (present_saturacaoO2)
      list.add(saturacaoO2);

    boolean present_glicemiaCapilar = true && (isSetGlicemiaCapilar());
    list.add(present_glicemiaCapilar);
    if (present_glicemiaCapilar)
      list.add(glicemiaCapilar);

    boolean present_tipoGlicemiaCapilar = true && (isSetTipoGlicemiaCapilar());
    list.add(present_tipoGlicemiaCapilar);
    if (present_tipoGlicemiaCapilar)
      list.add(tipoGlicemiaCapilar);

    boolean present_peso = true && (isSetPeso());
    list.add(present_peso);
    if (present_peso)
      list.add(peso);

    boolean present_altura = true && (isSetAltura());
    list.add(present_altura);
    if (present_altura)
      list.add(altura);

    boolean present_perimetroCefalico = true && (isSetPerimetroCefalico());
    list.add(present_perimetroCefalico);
    if (present_perimetroCefalico)
      list.add(perimetroCefalico);

    return list.hashCode();
  }

  @Override
  public int compareTo(MedicoesThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCircunferenciaAbdominal()).compareTo(other.isSetCircunferenciaAbdominal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCircunferenciaAbdominal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.circunferenciaAbdominal, other.circunferenciaAbdominal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerimetroPanturrilha()).compareTo(other.isSetPerimetroPanturrilha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerimetroPanturrilha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perimetroPanturrilha, other.perimetroPanturrilha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPressaoArterialSistolica()).compareTo(other.isSetPressaoArterialSistolica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressaoArterialSistolica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressaoArterialSistolica, other.pressaoArterialSistolica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPressaoArterialDiastolica()).compareTo(other.isSetPressaoArterialDiastolica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressaoArterialDiastolica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressaoArterialDiastolica, other.pressaoArterialDiastolica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequenciaRespiratoria()).compareTo(other.isSetFrequenciaRespiratoria());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequenciaRespiratoria()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequenciaRespiratoria, other.frequenciaRespiratoria);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequenciaCardiaca()).compareTo(other.isSetFrequenciaCardiaca());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequenciaCardiaca()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequenciaCardiaca, other.frequenciaCardiaca);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperatura()).compareTo(other.isSetTemperatura());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperatura()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperatura, other.temperatura);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaturacaoO2()).compareTo(other.isSetSaturacaoO2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaturacaoO2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saturacaoO2, other.saturacaoO2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlicemiaCapilar()).compareTo(other.isSetGlicemiaCapilar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlicemiaCapilar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.glicemiaCapilar, other.glicemiaCapilar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipoGlicemiaCapilar()).compareTo(other.isSetTipoGlicemiaCapilar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipoGlicemiaCapilar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoGlicemiaCapilar, other.tipoGlicemiaCapilar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeso()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAltura()).compareTo(other.isSetAltura());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAltura()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.altura, other.altura);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerimetroCefalico()).compareTo(other.isSetPerimetroCefalico());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerimetroCefalico()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perimetroCefalico, other.perimetroCefalico);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MedicoesThrift(");
    boolean first = true;

    if (isSetCircunferenciaAbdominal()) {
      sb.append("circunferenciaAbdominal:");
      sb.append(this.circunferenciaAbdominal);
      first = false;
    }
    if (isSetPerimetroPanturrilha()) {
      if (!first) sb.append(", ");
      sb.append("perimetroPanturrilha:");
      sb.append(this.perimetroPanturrilha);
      first = false;
    }
    if (isSetPressaoArterialSistolica()) {
      if (!first) sb.append(", ");
      sb.append("pressaoArterialSistolica:");
      sb.append(this.pressaoArterialSistolica);
      first = false;
    }
    if (isSetPressaoArterialDiastolica()) {
      if (!first) sb.append(", ");
      sb.append("pressaoArterialDiastolica:");
      sb.append(this.pressaoArterialDiastolica);
      first = false;
    }
    if (isSetFrequenciaRespiratoria()) {
      if (!first) sb.append(", ");
      sb.append("frequenciaRespiratoria:");
      sb.append(this.frequenciaRespiratoria);
      first = false;
    }
    if (isSetFrequenciaCardiaca()) {
      if (!first) sb.append(", ");
      sb.append("frequenciaCardiaca:");
      sb.append(this.frequenciaCardiaca);
      first = false;
    }
    if (isSetTemperatura()) {
      if (!first) sb.append(", ");
      sb.append("temperatura:");
      sb.append(this.temperatura);
      first = false;
    }
    if (isSetSaturacaoO2()) {
      if (!first) sb.append(", ");
      sb.append("saturacaoO2:");
      sb.append(this.saturacaoO2);
      first = false;
    }
    if (isSetGlicemiaCapilar()) {
      if (!first) sb.append(", ");
      sb.append("glicemiaCapilar:");
      sb.append(this.glicemiaCapilar);
      first = false;
    }
    if (isSetTipoGlicemiaCapilar()) {
      if (!first) sb.append(", ");
      sb.append("tipoGlicemiaCapilar:");
      sb.append(this.tipoGlicemiaCapilar);
      first = false;
    }
    if (isSetPeso()) {
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
    }
    if (isSetAltura()) {
      if (!first) sb.append(", ");
      sb.append("altura:");
      sb.append(this.altura);
      first = false;
    }
    if (isSetPerimetroCefalico()) {
      if (!first) sb.append(", ");
      sb.append("perimetroCefalico:");
      sb.append(this.perimetroCefalico);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MedicoesThriftStandardSchemeFactory implements SchemeFactory {
    public MedicoesThriftStandardScheme getScheme() {
      return new MedicoesThriftStandardScheme();
    }
  }

  private static class MedicoesThriftStandardScheme extends StandardScheme<MedicoesThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MedicoesThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CIRCUNFERENCIA_ABDOMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.circunferenciaAbdominal = iprot.readDouble();
              struct.setCircunferenciaAbdominalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERIMETRO_PANTURRILHA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.perimetroPanturrilha = iprot.readDouble();
              struct.setPerimetroPanturrilhaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRESSAO_ARTERIAL_SISTOLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pressaoArterialSistolica = iprot.readI32();
              struct.setPressaoArterialSistolicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRESSAO_ARTERIAL_DIASTOLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pressaoArterialDiastolica = iprot.readI32();
              struct.setPressaoArterialDiastolicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREQUENCIA_RESPIRATORIA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequenciaRespiratoria = iprot.readI32();
              struct.setFrequenciaRespiratoriaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FREQUENCIA_CARDIACA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequenciaCardiaca = iprot.readI32();
              struct.setFrequenciaCardiacaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEMPERATURA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperatura = iprot.readDouble();
              struct.setTemperaturaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SATURACAO_O2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saturacaoO2 = iprot.readI32();
              struct.setSaturacaoO2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GLICEMIA_CAPILAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.glicemiaCapilar = iprot.readI32();
              struct.setGlicemiaCapilarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIPO_GLICEMIA_CAPILAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tipoGlicemiaCapilar = iprot.readI64();
              struct.setTipoGlicemiaCapilarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PESO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.peso = iprot.readDouble();
              struct.setPesoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ALTURA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.altura = iprot.readDouble();
              struct.setAlturaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PERIMETRO_CEFALICO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.perimetroCefalico = iprot.readDouble();
              struct.setPerimetroCefalicoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MedicoesThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCircunferenciaAbdominal()) {
        oprot.writeFieldBegin(CIRCUNFERENCIA_ABDOMINAL_FIELD_DESC);
        oprot.writeDouble(struct.circunferenciaAbdominal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPerimetroPanturrilha()) {
        oprot.writeFieldBegin(PERIMETRO_PANTURRILHA_FIELD_DESC);
        oprot.writeDouble(struct.perimetroPanturrilha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPressaoArterialSistolica()) {
        oprot.writeFieldBegin(PRESSAO_ARTERIAL_SISTOLICA_FIELD_DESC);
        oprot.writeI32(struct.pressaoArterialSistolica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPressaoArterialDiastolica()) {
        oprot.writeFieldBegin(PRESSAO_ARTERIAL_DIASTOLICA_FIELD_DESC);
        oprot.writeI32(struct.pressaoArterialDiastolica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrequenciaRespiratoria()) {
        oprot.writeFieldBegin(FREQUENCIA_RESPIRATORIA_FIELD_DESC);
        oprot.writeI32(struct.frequenciaRespiratoria);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrequenciaCardiaca()) {
        oprot.writeFieldBegin(FREQUENCIA_CARDIACA_FIELD_DESC);
        oprot.writeI32(struct.frequenciaCardiaca);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTemperatura()) {
        oprot.writeFieldBegin(TEMPERATURA_FIELD_DESC);
        oprot.writeDouble(struct.temperatura);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaturacaoO2()) {
        oprot.writeFieldBegin(SATURACAO_O2_FIELD_DESC);
        oprot.writeI32(struct.saturacaoO2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGlicemiaCapilar()) {
        oprot.writeFieldBegin(GLICEMIA_CAPILAR_FIELD_DESC);
        oprot.writeI32(struct.glicemiaCapilar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTipoGlicemiaCapilar()) {
        oprot.writeFieldBegin(TIPO_GLICEMIA_CAPILAR_FIELD_DESC);
        oprot.writeI64(struct.tipoGlicemiaCapilar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPeso()) {
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAltura()) {
        oprot.writeFieldBegin(ALTURA_FIELD_DESC);
        oprot.writeDouble(struct.altura);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPerimetroCefalico()) {
        oprot.writeFieldBegin(PERIMETRO_CEFALICO_FIELD_DESC);
        oprot.writeDouble(struct.perimetroCefalico);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MedicoesThriftTupleSchemeFactory implements SchemeFactory {
    public MedicoesThriftTupleScheme getScheme() {
      return new MedicoesThriftTupleScheme();
    }
  }

  private static class MedicoesThriftTupleScheme extends TupleScheme<MedicoesThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MedicoesThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCircunferenciaAbdominal()) {
        optionals.set(0);
      }
      if (struct.isSetPerimetroPanturrilha()) {
        optionals.set(1);
      }
      if (struct.isSetPressaoArterialSistolica()) {
        optionals.set(2);
      }
      if (struct.isSetPressaoArterialDiastolica()) {
        optionals.set(3);
      }
      if (struct.isSetFrequenciaRespiratoria()) {
        optionals.set(4);
      }
      if (struct.isSetFrequenciaCardiaca()) {
        optionals.set(5);
      }
      if (struct.isSetTemperatura()) {
        optionals.set(6);
      }
      if (struct.isSetSaturacaoO2()) {
        optionals.set(7);
      }
      if (struct.isSetGlicemiaCapilar()) {
        optionals.set(8);
      }
      if (struct.isSetTipoGlicemiaCapilar()) {
        optionals.set(9);
      }
      if (struct.isSetPeso()) {
        optionals.set(10);
      }
      if (struct.isSetAltura()) {
        optionals.set(11);
      }
      if (struct.isSetPerimetroCefalico()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCircunferenciaAbdominal()) {
        oprot.writeDouble(struct.circunferenciaAbdominal);
      }
      if (struct.isSetPerimetroPanturrilha()) {
        oprot.writeDouble(struct.perimetroPanturrilha);
      }
      if (struct.isSetPressaoArterialSistolica()) {
        oprot.writeI32(struct.pressaoArterialSistolica);
      }
      if (struct.isSetPressaoArterialDiastolica()) {
        oprot.writeI32(struct.pressaoArterialDiastolica);
      }
      if (struct.isSetFrequenciaRespiratoria()) {
        oprot.writeI32(struct.frequenciaRespiratoria);
      }
      if (struct.isSetFrequenciaCardiaca()) {
        oprot.writeI32(struct.frequenciaCardiaca);
      }
      if (struct.isSetTemperatura()) {
        oprot.writeDouble(struct.temperatura);
      }
      if (struct.isSetSaturacaoO2()) {
        oprot.writeI32(struct.saturacaoO2);
      }
      if (struct.isSetGlicemiaCapilar()) {
        oprot.writeI32(struct.glicemiaCapilar);
      }
      if (struct.isSetTipoGlicemiaCapilar()) {
        oprot.writeI64(struct.tipoGlicemiaCapilar);
      }
      if (struct.isSetPeso()) {
        oprot.writeDouble(struct.peso);
      }
      if (struct.isSetAltura()) {
        oprot.writeDouble(struct.altura);
      }
      if (struct.isSetPerimetroCefalico()) {
        oprot.writeDouble(struct.perimetroCefalico);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MedicoesThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.circunferenciaAbdominal = iprot.readDouble();
        struct.setCircunferenciaAbdominalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.perimetroPanturrilha = iprot.readDouble();
        struct.setPerimetroPanturrilhaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pressaoArterialSistolica = iprot.readI32();
        struct.setPressaoArterialSistolicaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pressaoArterialDiastolica = iprot.readI32();
        struct.setPressaoArterialDiastolicaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.frequenciaRespiratoria = iprot.readI32();
        struct.setFrequenciaRespiratoriaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.frequenciaCardiaca = iprot.readI32();
        struct.setFrequenciaCardiacaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.temperatura = iprot.readDouble();
        struct.setTemperaturaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.saturacaoO2 = iprot.readI32();
        struct.setSaturacaoO2IsSet(true);
      }
      if (incoming.get(8)) {
        struct.glicemiaCapilar = iprot.readI32();
        struct.setGlicemiaCapilarIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tipoGlicemiaCapilar = iprot.readI64();
        struct.setTipoGlicemiaCapilarIsSet(true);
      }
      if (incoming.get(10)) {
        struct.peso = iprot.readDouble();
        struct.setPesoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.altura = iprot.readDouble();
        struct.setAlturaIsSet(true);
      }
      if (incoming.get(12)) {
        struct.perimetroCefalico = iprot.readDouble();
        struct.setPerimetroCefalicoIsSet(true);
      }
    }
  }

}

