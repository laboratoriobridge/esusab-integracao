/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-07")
public class ProblemaCondicaoThrift implements org.apache.thrift.TBase<ProblemaCondicaoThrift, ProblemaCondicaoThrift._Fields>, java.io.Serializable, Cloneable, Comparable<ProblemaCondicaoThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProblemaCondicaoThrift");

  private static final org.apache.thrift.protocol.TField UUID_PROBLEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("uuidProblema", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UUID_EVOLUCAO_PROBLEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("uuidEvolucaoProblema", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CO_SEQUENCIAL_EVOLUCAO_FIELD_DESC = new org.apache.thrift.protocol.TField("coSequencialEvolucao", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CIAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ciap", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CID10_FIELD_DESC = new org.apache.thrift.protocol.TField("cid10", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SITUACAO_FIELD_DESC = new org.apache.thrift.protocol.TField("situacao", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_INICIO_PROBLEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataInicioProblema", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_FIM_PROBLEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataFimProblema", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_AVALIADO_FIELD_DESC = new org.apache.thrift.protocol.TField("isAvaliado", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProblemaCondicaoThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProblemaCondicaoThriftTupleSchemeFactory());
  }

  private String uuidProblema; // optional
  private String uuidEvolucaoProblema; // optional
  private long coSequencialEvolucao; // optional
  private String ciap; // optional
  private String cid10; // optional
  private long situacao; // optional
  private long dataInicioProblema; // optional
  private long dataFimProblema; // optional
  private boolean isAvaliado; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID_PROBLEMA((short)1, "uuidProblema"),
    UUID_EVOLUCAO_PROBLEMA((short)2, "uuidEvolucaoProblema"),
    CO_SEQUENCIAL_EVOLUCAO((short)3, "coSequencialEvolucao"),
    CIAP((short)4, "ciap"),
    CID10((short)5, "cid10"),
    SITUACAO((short)6, "situacao"),
    DATA_INICIO_PROBLEMA((short)7, "dataInicioProblema"),
    DATA_FIM_PROBLEMA((short)8, "dataFimProblema"),
    IS_AVALIADO((short)9, "isAvaliado");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID_PROBLEMA
          return UUID_PROBLEMA;
        case 2: // UUID_EVOLUCAO_PROBLEMA
          return UUID_EVOLUCAO_PROBLEMA;
        case 3: // CO_SEQUENCIAL_EVOLUCAO
          return CO_SEQUENCIAL_EVOLUCAO;
        case 4: // CIAP
          return CIAP;
        case 5: // CID10
          return CID10;
        case 6: // SITUACAO
          return SITUACAO;
        case 7: // DATA_INICIO_PROBLEMA
          return DATA_INICIO_PROBLEMA;
        case 8: // DATA_FIM_PROBLEMA
          return DATA_FIM_PROBLEMA;
        case 9: // IS_AVALIADO
          return IS_AVALIADO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COSEQUENCIALEVOLUCAO_ISSET_ID = 0;
  private static final int __SITUACAO_ISSET_ID = 1;
  private static final int __DATAINICIOPROBLEMA_ISSET_ID = 2;
  private static final int __DATAFIMPROBLEMA_ISSET_ID = 3;
  private static final int __ISAVALIADO_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UUID_PROBLEMA,_Fields.UUID_EVOLUCAO_PROBLEMA,_Fields.CO_SEQUENCIAL_EVOLUCAO,_Fields.CIAP,_Fields.CID10,_Fields.SITUACAO,_Fields.DATA_INICIO_PROBLEMA,_Fields.DATA_FIM_PROBLEMA,_Fields.IS_AVALIADO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID_PROBLEMA, new org.apache.thrift.meta_data.FieldMetaData("uuidProblema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID_EVOLUCAO_PROBLEMA, new org.apache.thrift.meta_data.FieldMetaData("uuidEvolucaoProblema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CO_SEQUENCIAL_EVOLUCAO, new org.apache.thrift.meta_data.FieldMetaData("coSequencialEvolucao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CIAP, new org.apache.thrift.meta_data.FieldMetaData("ciap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID10, new org.apache.thrift.meta_data.FieldMetaData("cid10", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITUACAO, new org.apache.thrift.meta_data.FieldMetaData("situacao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_INICIO_PROBLEMA, new org.apache.thrift.meta_data.FieldMetaData("dataInicioProblema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_FIM_PROBLEMA, new org.apache.thrift.meta_data.FieldMetaData("dataFimProblema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_AVALIADO, new org.apache.thrift.meta_data.FieldMetaData("isAvaliado", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProblemaCondicaoThrift.class, metaDataMap);
  }

  public ProblemaCondicaoThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProblemaCondicaoThrift(ProblemaCondicaoThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuidProblema()) {
      this.uuidProblema = other.uuidProblema;
    }
    if (other.isSetUuidEvolucaoProblema()) {
      this.uuidEvolucaoProblema = other.uuidEvolucaoProblema;
    }
    this.coSequencialEvolucao = other.coSequencialEvolucao;
    if (other.isSetCiap()) {
      this.ciap = other.ciap;
    }
    if (other.isSetCid10()) {
      this.cid10 = other.cid10;
    }
    this.situacao = other.situacao;
    this.dataInicioProblema = other.dataInicioProblema;
    this.dataFimProblema = other.dataFimProblema;
    this.isAvaliado = other.isAvaliado;
  }

  public ProblemaCondicaoThrift deepCopy() {
    return new ProblemaCondicaoThrift(this);
  }

  @Override
  public void clear() {
    this.uuidProblema = null;
    this.uuidEvolucaoProblema = null;
    setCoSequencialEvolucaoIsSet(false);
    this.coSequencialEvolucao = 0;
    this.ciap = null;
    this.cid10 = null;
    setSituacaoIsSet(false);
    this.situacao = 0;
    setDataInicioProblemaIsSet(false);
    this.dataInicioProblema = 0;
    setDataFimProblemaIsSet(false);
    this.dataFimProblema = 0;
    setIsAvaliadoIsSet(false);
    this.isAvaliado = false;
  }

  public String getUuidProblema() {
    return this.uuidProblema;
  }

  public void setUuidProblema(String uuidProblema) {
    this.uuidProblema = uuidProblema;
  }

  public void unsetUuidProblema() {
    this.uuidProblema = null;
  }

  /** Returns true if field uuidProblema is set (has been assigned a value) and false otherwise */
  public boolean isSetUuidProblema() {
    return this.uuidProblema != null;
  }

  public void setUuidProblemaIsSet(boolean value) {
    if (!value) {
      this.uuidProblema = null;
    }
  }

  public String getUuidEvolucaoProblema() {
    return this.uuidEvolucaoProblema;
  }

  public void setUuidEvolucaoProblema(String uuidEvolucaoProblema) {
    this.uuidEvolucaoProblema = uuidEvolucaoProblema;
  }

  public void unsetUuidEvolucaoProblema() {
    this.uuidEvolucaoProblema = null;
  }

  /** Returns true if field uuidEvolucaoProblema is set (has been assigned a value) and false otherwise */
  public boolean isSetUuidEvolucaoProblema() {
    return this.uuidEvolucaoProblema != null;
  }

  public void setUuidEvolucaoProblemaIsSet(boolean value) {
    if (!value) {
      this.uuidEvolucaoProblema = null;
    }
  }

  public long getCoSequencialEvolucao() {
    return this.coSequencialEvolucao;
  }

  public void setCoSequencialEvolucao(long coSequencialEvolucao) {
    this.coSequencialEvolucao = coSequencialEvolucao;
    setCoSequencialEvolucaoIsSet(true);
  }

  public void unsetCoSequencialEvolucao() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COSEQUENCIALEVOLUCAO_ISSET_ID);
  }

  /** Returns true if field coSequencialEvolucao is set (has been assigned a value) and false otherwise */
  public boolean isSetCoSequencialEvolucao() {
    return EncodingUtils.testBit(__isset_bitfield, __COSEQUENCIALEVOLUCAO_ISSET_ID);
  }

  public void setCoSequencialEvolucaoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COSEQUENCIALEVOLUCAO_ISSET_ID, value);
  }

  public String getCiap() {
    return this.ciap;
  }

  public void setCiap(String ciap) {
    this.ciap = ciap;
  }

  public void unsetCiap() {
    this.ciap = null;
  }

  /** Returns true if field ciap is set (has been assigned a value) and false otherwise */
  public boolean isSetCiap() {
    return this.ciap != null;
  }

  public void setCiapIsSet(boolean value) {
    if (!value) {
      this.ciap = null;
    }
  }

  public String getCid10() {
    return this.cid10;
  }

  public void setCid10(String cid10) {
    this.cid10 = cid10;
  }

  public void unsetCid10() {
    this.cid10 = null;
  }

  /** Returns true if field cid10 is set (has been assigned a value) and false otherwise */
  public boolean isSetCid10() {
    return this.cid10 != null;
  }

  public void setCid10IsSet(boolean value) {
    if (!value) {
      this.cid10 = null;
    }
  }

  public long getSituacao() {
    return this.situacao;
  }

  public void setSituacao(long situacao) {
    this.situacao = situacao;
    setSituacaoIsSet(true);
  }

  public void unsetSituacao() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITUACAO_ISSET_ID);
  }

  /** Returns true if field situacao is set (has been assigned a value) and false otherwise */
  public boolean isSetSituacao() {
    return EncodingUtils.testBit(__isset_bitfield, __SITUACAO_ISSET_ID);
  }

  public void setSituacaoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITUACAO_ISSET_ID, value);
  }

  public long getDataInicioProblema() {
    return this.dataInicioProblema;
  }

  public void setDataInicioProblema(long dataInicioProblema) {
    this.dataInicioProblema = dataInicioProblema;
    setDataInicioProblemaIsSet(true);
  }

  public void unsetDataInicioProblema() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAINICIOPROBLEMA_ISSET_ID);
  }

  /** Returns true if field dataInicioProblema is set (has been assigned a value) and false otherwise */
  public boolean isSetDataInicioProblema() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAINICIOPROBLEMA_ISSET_ID);
  }

  public void setDataInicioProblemaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAINICIOPROBLEMA_ISSET_ID, value);
  }

  public long getDataFimProblema() {
    return this.dataFimProblema;
  }

  public void setDataFimProblema(long dataFimProblema) {
    this.dataFimProblema = dataFimProblema;
    setDataFimProblemaIsSet(true);
  }

  public void unsetDataFimProblema() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAFIMPROBLEMA_ISSET_ID);
  }

  /** Returns true if field dataFimProblema is set (has been assigned a value) and false otherwise */
  public boolean isSetDataFimProblema() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAFIMPROBLEMA_ISSET_ID);
  }

  public void setDataFimProblemaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAFIMPROBLEMA_ISSET_ID, value);
  }

  public boolean isIsAvaliado() {
    return this.isAvaliado;
  }

  public void setIsAvaliado(boolean isAvaliado) {
    this.isAvaliado = isAvaliado;
    setIsAvaliadoIsSet(true);
  }

  public void unsetIsAvaliado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAVALIADO_ISSET_ID);
  }

  /** Returns true if field isAvaliado is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAvaliado() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAVALIADO_ISSET_ID);
  }

  public void setIsAvaliadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAVALIADO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID_PROBLEMA:
      if (value == null) {
        unsetUuidProblema();
      } else {
        setUuidProblema((String)value);
      }
      break;

    case UUID_EVOLUCAO_PROBLEMA:
      if (value == null) {
        unsetUuidEvolucaoProblema();
      } else {
        setUuidEvolucaoProblema((String)value);
      }
      break;

    case CO_SEQUENCIAL_EVOLUCAO:
      if (value == null) {
        unsetCoSequencialEvolucao();
      } else {
        setCoSequencialEvolucao((Long)value);
      }
      break;

    case CIAP:
      if (value == null) {
        unsetCiap();
      } else {
        setCiap((String)value);
      }
      break;

    case CID10:
      if (value == null) {
        unsetCid10();
      } else {
        setCid10((String)value);
      }
      break;

    case SITUACAO:
      if (value == null) {
        unsetSituacao();
      } else {
        setSituacao((Long)value);
      }
      break;

    case DATA_INICIO_PROBLEMA:
      if (value == null) {
        unsetDataInicioProblema();
      } else {
        setDataInicioProblema((Long)value);
      }
      break;

    case DATA_FIM_PROBLEMA:
      if (value == null) {
        unsetDataFimProblema();
      } else {
        setDataFimProblema((Long)value);
      }
      break;

    case IS_AVALIADO:
      if (value == null) {
        unsetIsAvaliado();
      } else {
        setIsAvaliado((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID_PROBLEMA:
      return getUuidProblema();

    case UUID_EVOLUCAO_PROBLEMA:
      return getUuidEvolucaoProblema();

    case CO_SEQUENCIAL_EVOLUCAO:
      return getCoSequencialEvolucao();

    case CIAP:
      return getCiap();

    case CID10:
      return getCid10();

    case SITUACAO:
      return getSituacao();

    case DATA_INICIO_PROBLEMA:
      return getDataInicioProblema();

    case DATA_FIM_PROBLEMA:
      return getDataFimProblema();

    case IS_AVALIADO:
      return isIsAvaliado();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID_PROBLEMA:
      return isSetUuidProblema();
    case UUID_EVOLUCAO_PROBLEMA:
      return isSetUuidEvolucaoProblema();
    case CO_SEQUENCIAL_EVOLUCAO:
      return isSetCoSequencialEvolucao();
    case CIAP:
      return isSetCiap();
    case CID10:
      return isSetCid10();
    case SITUACAO:
      return isSetSituacao();
    case DATA_INICIO_PROBLEMA:
      return isSetDataInicioProblema();
    case DATA_FIM_PROBLEMA:
      return isSetDataFimProblema();
    case IS_AVALIADO:
      return isSetIsAvaliado();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProblemaCondicaoThrift)
      return this.equals((ProblemaCondicaoThrift)that);
    return false;
  }

  public boolean equals(ProblemaCondicaoThrift that) {
    if (that == null)
      return false;

    boolean this_present_uuidProblema = true && this.isSetUuidProblema();
    boolean that_present_uuidProblema = true && that.isSetUuidProblema();
    if (this_present_uuidProblema || that_present_uuidProblema) {
      if (!(this_present_uuidProblema && that_present_uuidProblema))
        return false;
      if (!this.uuidProblema.equals(that.uuidProblema))
        return false;
    }

    boolean this_present_uuidEvolucaoProblema = true && this.isSetUuidEvolucaoProblema();
    boolean that_present_uuidEvolucaoProblema = true && that.isSetUuidEvolucaoProblema();
    if (this_present_uuidEvolucaoProblema || that_present_uuidEvolucaoProblema) {
      if (!(this_present_uuidEvolucaoProblema && that_present_uuidEvolucaoProblema))
        return false;
      if (!this.uuidEvolucaoProblema.equals(that.uuidEvolucaoProblema))
        return false;
    }

    boolean this_present_coSequencialEvolucao = true && this.isSetCoSequencialEvolucao();
    boolean that_present_coSequencialEvolucao = true && that.isSetCoSequencialEvolucao();
    if (this_present_coSequencialEvolucao || that_present_coSequencialEvolucao) {
      if (!(this_present_coSequencialEvolucao && that_present_coSequencialEvolucao))
        return false;
      if (this.coSequencialEvolucao != that.coSequencialEvolucao)
        return false;
    }

    boolean this_present_ciap = true && this.isSetCiap();
    boolean that_present_ciap = true && that.isSetCiap();
    if (this_present_ciap || that_present_ciap) {
      if (!(this_present_ciap && that_present_ciap))
        return false;
      if (!this.ciap.equals(that.ciap))
        return false;
    }

    boolean this_present_cid10 = true && this.isSetCid10();
    boolean that_present_cid10 = true && that.isSetCid10();
    if (this_present_cid10 || that_present_cid10) {
      if (!(this_present_cid10 && that_present_cid10))
        return false;
      if (!this.cid10.equals(that.cid10))
        return false;
    }

    boolean this_present_situacao = true && this.isSetSituacao();
    boolean that_present_situacao = true && that.isSetSituacao();
    if (this_present_situacao || that_present_situacao) {
      if (!(this_present_situacao && that_present_situacao))
        return false;
      if (this.situacao != that.situacao)
        return false;
    }

    boolean this_present_dataInicioProblema = true && this.isSetDataInicioProblema();
    boolean that_present_dataInicioProblema = true && that.isSetDataInicioProblema();
    if (this_present_dataInicioProblema || that_present_dataInicioProblema) {
      if (!(this_present_dataInicioProblema && that_present_dataInicioProblema))
        return false;
      if (this.dataInicioProblema != that.dataInicioProblema)
        return false;
    }

    boolean this_present_dataFimProblema = true && this.isSetDataFimProblema();
    boolean that_present_dataFimProblema = true && that.isSetDataFimProblema();
    if (this_present_dataFimProblema || that_present_dataFimProblema) {
      if (!(this_present_dataFimProblema && that_present_dataFimProblema))
        return false;
      if (this.dataFimProblema != that.dataFimProblema)
        return false;
    }

    boolean this_present_isAvaliado = true && this.isSetIsAvaliado();
    boolean that_present_isAvaliado = true && that.isSetIsAvaliado();
    if (this_present_isAvaliado || that_present_isAvaliado) {
      if (!(this_present_isAvaliado && that_present_isAvaliado))
        return false;
      if (this.isAvaliado != that.isAvaliado)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuidProblema = true && (isSetUuidProblema());
    list.add(present_uuidProblema);
    if (present_uuidProblema)
      list.add(uuidProblema);

    boolean present_uuidEvolucaoProblema = true && (isSetUuidEvolucaoProblema());
    list.add(present_uuidEvolucaoProblema);
    if (present_uuidEvolucaoProblema)
      list.add(uuidEvolucaoProblema);

    boolean present_coSequencialEvolucao = true && (isSetCoSequencialEvolucao());
    list.add(present_coSequencialEvolucao);
    if (present_coSequencialEvolucao)
      list.add(coSequencialEvolucao);

    boolean present_ciap = true && (isSetCiap());
    list.add(present_ciap);
    if (present_ciap)
      list.add(ciap);

    boolean present_cid10 = true && (isSetCid10());
    list.add(present_cid10);
    if (present_cid10)
      list.add(cid10);

    boolean present_situacao = true && (isSetSituacao());
    list.add(present_situacao);
    if (present_situacao)
      list.add(situacao);

    boolean present_dataInicioProblema = true && (isSetDataInicioProblema());
    list.add(present_dataInicioProblema);
    if (present_dataInicioProblema)
      list.add(dataInicioProblema);

    boolean present_dataFimProblema = true && (isSetDataFimProblema());
    list.add(present_dataFimProblema);
    if (present_dataFimProblema)
      list.add(dataFimProblema);

    boolean present_isAvaliado = true && (isSetIsAvaliado());
    list.add(present_isAvaliado);
    if (present_isAvaliado)
      list.add(isAvaliado);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProblemaCondicaoThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuidProblema()).compareTo(other.isSetUuidProblema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuidProblema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuidProblema, other.uuidProblema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuidEvolucaoProblema()).compareTo(other.isSetUuidEvolucaoProblema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuidEvolucaoProblema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuidEvolucaoProblema, other.uuidEvolucaoProblema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoSequencialEvolucao()).compareTo(other.isSetCoSequencialEvolucao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoSequencialEvolucao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coSequencialEvolucao, other.coSequencialEvolucao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCiap()).compareTo(other.isSetCiap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCiap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciap, other.ciap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid10()).compareTo(other.isSetCid10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid10, other.cid10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituacao()).compareTo(other.isSetSituacao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituacao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situacao, other.situacao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataInicioProblema()).compareTo(other.isSetDataInicioProblema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataInicioProblema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataInicioProblema, other.dataInicioProblema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataFimProblema()).compareTo(other.isSetDataFimProblema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataFimProblema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataFimProblema, other.dataFimProblema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAvaliado()).compareTo(other.isSetIsAvaliado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAvaliado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAvaliado, other.isAvaliado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProblemaCondicaoThrift(");
    boolean first = true;

    if (isSetUuidProblema()) {
      sb.append("uuidProblema:");
      if (this.uuidProblema == null) {
        sb.append("null");
      } else {
        sb.append(this.uuidProblema);
      }
      first = false;
    }
    if (isSetUuidEvolucaoProblema()) {
      if (!first) sb.append(", ");
      sb.append("uuidEvolucaoProblema:");
      if (this.uuidEvolucaoProblema == null) {
        sb.append("null");
      } else {
        sb.append(this.uuidEvolucaoProblema);
      }
      first = false;
    }
    if (isSetCoSequencialEvolucao()) {
      if (!first) sb.append(", ");
      sb.append("coSequencialEvolucao:");
      sb.append(this.coSequencialEvolucao);
      first = false;
    }
    if (isSetCiap()) {
      if (!first) sb.append(", ");
      sb.append("ciap:");
      if (this.ciap == null) {
        sb.append("null");
      } else {
        sb.append(this.ciap);
      }
      first = false;
    }
    if (isSetCid10()) {
      if (!first) sb.append(", ");
      sb.append("cid10:");
      if (this.cid10 == null) {
        sb.append("null");
      } else {
        sb.append(this.cid10);
      }
      first = false;
    }
    if (isSetSituacao()) {
      if (!first) sb.append(", ");
      sb.append("situacao:");
      sb.append(this.situacao);
      first = false;
    }
    if (isSetDataInicioProblema()) {
      if (!first) sb.append(", ");
      sb.append("dataInicioProblema:");
      sb.append(this.dataInicioProblema);
      first = false;
    }
    if (isSetDataFimProblema()) {
      if (!first) sb.append(", ");
      sb.append("dataFimProblema:");
      sb.append(this.dataFimProblema);
      first = false;
    }
    if (isSetIsAvaliado()) {
      if (!first) sb.append(", ");
      sb.append("isAvaliado:");
      sb.append(this.isAvaliado);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProblemaCondicaoThriftStandardSchemeFactory implements SchemeFactory {
    public ProblemaCondicaoThriftStandardScheme getScheme() {
      return new ProblemaCondicaoThriftStandardScheme();
    }
  }

  private static class ProblemaCondicaoThriftStandardScheme extends StandardScheme<ProblemaCondicaoThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProblemaCondicaoThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID_PROBLEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuidProblema = iprot.readString();
              struct.setUuidProblemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UUID_EVOLUCAO_PROBLEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuidEvolucaoProblema = iprot.readString();
              struct.setUuidEvolucaoProblemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CO_SEQUENCIAL_EVOLUCAO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coSequencialEvolucao = iprot.readI64();
              struct.setCoSequencialEvolucaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CIAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ciap = iprot.readString();
              struct.setCiapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CID10
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cid10 = iprot.readString();
              struct.setCid10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SITUACAO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.situacao = iprot.readI64();
              struct.setSituacaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_INICIO_PROBLEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataInicioProblema = iprot.readI64();
              struct.setDataInicioProblemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA_FIM_PROBLEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataFimProblema = iprot.readI64();
              struct.setDataFimProblemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_AVALIADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAvaliado = iprot.readBool();
              struct.setIsAvaliadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProblemaCondicaoThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuidProblema != null) {
        if (struct.isSetUuidProblema()) {
          oprot.writeFieldBegin(UUID_PROBLEMA_FIELD_DESC);
          oprot.writeString(struct.uuidProblema);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uuidEvolucaoProblema != null) {
        if (struct.isSetUuidEvolucaoProblema()) {
          oprot.writeFieldBegin(UUID_EVOLUCAO_PROBLEMA_FIELD_DESC);
          oprot.writeString(struct.uuidEvolucaoProblema);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCoSequencialEvolucao()) {
        oprot.writeFieldBegin(CO_SEQUENCIAL_EVOLUCAO_FIELD_DESC);
        oprot.writeI64(struct.coSequencialEvolucao);
        oprot.writeFieldEnd();
      }
      if (struct.ciap != null) {
        if (struct.isSetCiap()) {
          oprot.writeFieldBegin(CIAP_FIELD_DESC);
          oprot.writeString(struct.ciap);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cid10 != null) {
        if (struct.isSetCid10()) {
          oprot.writeFieldBegin(CID10_FIELD_DESC);
          oprot.writeString(struct.cid10);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSituacao()) {
        oprot.writeFieldBegin(SITUACAO_FIELD_DESC);
        oprot.writeI64(struct.situacao);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataInicioProblema()) {
        oprot.writeFieldBegin(DATA_INICIO_PROBLEMA_FIELD_DESC);
        oprot.writeI64(struct.dataInicioProblema);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataFimProblema()) {
        oprot.writeFieldBegin(DATA_FIM_PROBLEMA_FIELD_DESC);
        oprot.writeI64(struct.dataFimProblema);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAvaliado()) {
        oprot.writeFieldBegin(IS_AVALIADO_FIELD_DESC);
        oprot.writeBool(struct.isAvaliado);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProblemaCondicaoThriftTupleSchemeFactory implements SchemeFactory {
    public ProblemaCondicaoThriftTupleScheme getScheme() {
      return new ProblemaCondicaoThriftTupleScheme();
    }
  }

  private static class ProblemaCondicaoThriftTupleScheme extends TupleScheme<ProblemaCondicaoThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProblemaCondicaoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUuidProblema()) {
        optionals.set(0);
      }
      if (struct.isSetUuidEvolucaoProblema()) {
        optionals.set(1);
      }
      if (struct.isSetCoSequencialEvolucao()) {
        optionals.set(2);
      }
      if (struct.isSetCiap()) {
        optionals.set(3);
      }
      if (struct.isSetCid10()) {
        optionals.set(4);
      }
      if (struct.isSetSituacao()) {
        optionals.set(5);
      }
      if (struct.isSetDataInicioProblema()) {
        optionals.set(6);
      }
      if (struct.isSetDataFimProblema()) {
        optionals.set(7);
      }
      if (struct.isSetIsAvaliado()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUuidProblema()) {
        oprot.writeString(struct.uuidProblema);
      }
      if (struct.isSetUuidEvolucaoProblema()) {
        oprot.writeString(struct.uuidEvolucaoProblema);
      }
      if (struct.isSetCoSequencialEvolucao()) {
        oprot.writeI64(struct.coSequencialEvolucao);
      }
      if (struct.isSetCiap()) {
        oprot.writeString(struct.ciap);
      }
      if (struct.isSetCid10()) {
        oprot.writeString(struct.cid10);
      }
      if (struct.isSetSituacao()) {
        oprot.writeI64(struct.situacao);
      }
      if (struct.isSetDataInicioProblema()) {
        oprot.writeI64(struct.dataInicioProblema);
      }
      if (struct.isSetDataFimProblema()) {
        oprot.writeI64(struct.dataFimProblema);
      }
      if (struct.isSetIsAvaliado()) {
        oprot.writeBool(struct.isAvaliado);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProblemaCondicaoThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uuidProblema = iprot.readString();
        struct.setUuidProblemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uuidEvolucaoProblema = iprot.readString();
        struct.setUuidEvolucaoProblemaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coSequencialEvolucao = iprot.readI64();
        struct.setCoSequencialEvolucaoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ciap = iprot.readString();
        struct.setCiapIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cid10 = iprot.readString();
        struct.setCid10IsSet(true);
      }
      if (incoming.get(5)) {
        struct.situacao = iprot.readI64();
        struct.setSituacaoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataInicioProblema = iprot.readI64();
        struct.setDataInicioProblemaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dataFimProblema = iprot.readI64();
        struct.setDataFimProblemaIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isAvaliado = iprot.readBool();
        struct.setIsAvaliadoIsSet(true);
      }
    }
  }

}

