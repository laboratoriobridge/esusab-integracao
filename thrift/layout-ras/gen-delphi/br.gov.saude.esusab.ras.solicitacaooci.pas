(**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit br.gov.saude.esusab.ras.solicitacaooci;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport;

const
  cbr_gov_saude_esusab_ras_solicitacaooci_Option_AnsiStr_Binary = False;
  cbr_gov_saude_esusab_ras_solicitacaooci_Option_Register_Types = False;
  cbr_gov_saude_esusab_ras_solicitacaooci_Option_ConstPrefix    = False;
  cbr_gov_saude_esusab_ras_solicitacaooci_Option_Events         = False;
  cbr_gov_saude_esusab_ras_solicitacaooci_Option_XmlDoc         = False;

type
  ISolicitacaoOciThrift = interface;

  ISolicitacaoOciThrift = interface(IBase)
    function GetCodigoSigtap: string;
    procedure SetCodigoSigtap( const Value: string);

    property CodigoSigtap: string read GetCodigoSigtap write SetCodigoSigtap;

    function Get__isset_CodigoSigtap: Boolean;

    property __isset_CodigoSigtap: Boolean read Get__isset_CodigoSigtap;
  end;

  TSolicitacaoOciThriftImpl = class(TInterfacedObject, IBase, ISolicitacaoOciThrift)
  private
    FCodigoSigtap: string;
    
    F__isset_CodigoSigtap: Boolean;
    
    function GetCodigoSigtap: string;
    procedure SetCodigoSigtap( const Value: string);

    function Get__isset_CodigoSigtap: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property CodigoSigtap: string read GetCodigoSigtap write SetCodigoSigtap;

    // isset
    property __isset_CodigoSigtap: Boolean read Get__isset_CodigoSigtap;
  end;

implementation

constructor TSolicitacaoOciThriftImpl.Create;
begin
  inherited;
end;

destructor TSolicitacaoOciThriftImpl.Destroy;
begin
  inherited;
end;

function TSolicitacaoOciThriftImpl.GetCodigoSigtap: string;
begin
  Result := FCodigoSigtap;
end;

procedure TSolicitacaoOciThriftImpl.SetCodigoSigtap( const Value: string);
begin
  F__isset_CodigoSigtap := True;
  FCodigoSigtap := Value;
end;

function TSolicitacaoOciThriftImpl.Get__isset_CodigoSigtap: Boolean;
begin
  Result := F__isset_CodigoSigtap;
end;

procedure TSolicitacaoOciThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoSigtap := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TSolicitacaoOciThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('SolicitacaoOciThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CodigoSigtap) then
  begin
    field_.Name := 'codigoSigtap';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoSigtap);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TSolicitacaoOciThriftImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (__isset_CodigoSigtap) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CodigoSigtap: ');
      _sb0.Append(CodigoSigtap);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;


initialization

finalization


end.
