/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.vacinacao
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaVacinacaoChildThrift : TBase
  {
    private long _turno;
    private string _numProntuario;
    private string _cnsCidadao;
    private long _dtNascimento;
    private long _sexo;
    private long _localAtendimento;
    private bool _viajante;
    private bool _comunicanteHanseniase;
    private bool _gestante;
    private bool _puerpera;
    private List<VacinaRowThrift> _vacinas;
    private long _dataHoraInicialAtendimento;
    private long _dataHoraFinalAtendimento;
    private string _cpfCidadao;
    private long _condicaoMaternal;

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string NumProntuario
    {
      get
      {
        return _numProntuario;
      }
      set
      {
        __isset.numProntuario = true;
        this._numProntuario = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public long DtNascimento
    {
      get
      {
        return _dtNascimento;
      }
      set
      {
        __isset.dtNascimento = true;
        this._dtNascimento = value;
      }
    }

    public long Sexo
    {
      get
      {
        return _sexo;
      }
      set
      {
        __isset.sexo = true;
        this._sexo = value;
      }
    }

    public long LocalAtendimento
    {
      get
      {
        return _localAtendimento;
      }
      set
      {
        __isset.localAtendimento = true;
        this._localAtendimento = value;
      }
    }

    public bool Viajante
    {
      get
      {
        return _viajante;
      }
      set
      {
        __isset.viajante = true;
        this._viajante = value;
      }
    }

    public bool ComunicanteHanseniase
    {
      get
      {
        return _comunicanteHanseniase;
      }
      set
      {
        __isset.comunicanteHanseniase = true;
        this._comunicanteHanseniase = value;
      }
    }

    public bool Gestante
    {
      get
      {
        return _gestante;
      }
      set
      {
        __isset.gestante = true;
        this._gestante = value;
      }
    }

    public bool Puerpera
    {
      get
      {
        return _puerpera;
      }
      set
      {
        __isset.puerpera = true;
        this._puerpera = value;
      }
    }

    public List<VacinaRowThrift> Vacinas
    {
      get
      {
        return _vacinas;
      }
      set
      {
        __isset.vacinas = true;
        this._vacinas = value;
      }
    }

    public long DataHoraInicialAtendimento
    {
      get
      {
        return _dataHoraInicialAtendimento;
      }
      set
      {
        __isset.dataHoraInicialAtendimento = true;
        this._dataHoraInicialAtendimento = value;
      }
    }

    public long DataHoraFinalAtendimento
    {
      get
      {
        return _dataHoraFinalAtendimento;
      }
      set
      {
        __isset.dataHoraFinalAtendimento = true;
        this._dataHoraFinalAtendimento = value;
      }
    }

    public string CpfCidadao
    {
      get
      {
        return _cpfCidadao;
      }
      set
      {
        __isset.cpfCidadao = true;
        this._cpfCidadao = value;
      }
    }

    public long CondicaoMaternal
    {
      get
      {
        return _condicaoMaternal;
      }
      set
      {
        __isset.condicaoMaternal = true;
        this._condicaoMaternal = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool turno;
      public bool numProntuario;
      public bool cnsCidadao;
      public bool dtNascimento;
      public bool sexo;
      public bool localAtendimento;
      public bool viajante;
      public bool comunicanteHanseniase;
      public bool gestante;
      public bool puerpera;
      public bool vacinas;
      public bool dataHoraInicialAtendimento;
      public bool dataHoraFinalAtendimento;
      public bool cpfCidadao;
      public bool condicaoMaternal;
    }

    public FichaVacinacaoChildThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Turno = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NumProntuario = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CnsCidadao = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                DtNascimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Sexo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                LocalAtendimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Viajante = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                ComunicanteHanseniase = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                Gestante = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Puerpera = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  Vacinas = new List<VacinaRowThrift>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    VacinaRowThrift _elem2;
                    _elem2 = new VacinaRowThrift();
                    _elem2.Read(iprot);
                    Vacinas.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                DataHoraInicialAtendimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I64) {
                DataHoraFinalAtendimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CpfCidadao = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I64) {
                CondicaoMaternal = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FichaVacinacaoChildThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.turno) {
          field.Name = "turno";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Turno);
          oprot.WriteFieldEnd();
        }
        if (NumProntuario != null && __isset.numProntuario) {
          field.Name = "numProntuario";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NumProntuario);
          oprot.WriteFieldEnd();
        }
        if (CnsCidadao != null && __isset.cnsCidadao) {
          field.Name = "cnsCidadao";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CnsCidadao);
          oprot.WriteFieldEnd();
        }
        if (__isset.dtNascimento) {
          field.Name = "dtNascimento";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DtNascimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.sexo) {
          field.Name = "sexo";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Sexo);
          oprot.WriteFieldEnd();
        }
        if (__isset.localAtendimento) {
          field.Name = "localAtendimento";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalAtendimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.viajante) {
          field.Name = "viajante";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Viajante);
          oprot.WriteFieldEnd();
        }
        if (__isset.comunicanteHanseniase) {
          field.Name = "comunicanteHanseniase";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ComunicanteHanseniase);
          oprot.WriteFieldEnd();
        }
        if (__isset.gestante) {
          field.Name = "gestante";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Gestante);
          oprot.WriteFieldEnd();
        }
        if (__isset.puerpera) {
          field.Name = "puerpera";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Puerpera);
          oprot.WriteFieldEnd();
        }
        if (Vacinas != null && __isset.vacinas) {
          field.Name = "vacinas";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Vacinas.Count));
            foreach (VacinaRowThrift _iter3 in Vacinas)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.dataHoraInicialAtendimento) {
          field.Name = "dataHoraInicialAtendimento";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataHoraInicialAtendimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.dataHoraFinalAtendimento) {
          field.Name = "dataHoraFinalAtendimento";
          field.Type = TType.I64;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DataHoraFinalAtendimento);
          oprot.WriteFieldEnd();
        }
        if (CpfCidadao != null && __isset.cpfCidadao) {
          field.Name = "cpfCidadao";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CpfCidadao);
          oprot.WriteFieldEnd();
        }
        if (__isset.condicaoMaternal) {
          field.Name = "condicaoMaternal";
          field.Type = TType.I64;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CondicaoMaternal);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaVacinacaoChildThrift(");
      bool __first = true;
      if (__isset.turno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Turno: ");
        __sb.Append(Turno);
      }
      if (NumProntuario != null && __isset.numProntuario) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumProntuario: ");
        __sb.Append(NumProntuario);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (__isset.dtNascimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DtNascimento: ");
        __sb.Append(DtNascimento);
      }
      if (__isset.sexo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sexo: ");
        __sb.Append(Sexo);
      }
      if (__isset.localAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalAtendimento: ");
        __sb.Append(LocalAtendimento);
      }
      if (__isset.viajante) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Viajante: ");
        __sb.Append(Viajante);
      }
      if (__isset.comunicanteHanseniase) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ComunicanteHanseniase: ");
        __sb.Append(ComunicanteHanseniase);
      }
      if (__isset.gestante) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gestante: ");
        __sb.Append(Gestante);
      }
      if (__isset.puerpera) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Puerpera: ");
        __sb.Append(Puerpera);
      }
      if (Vacinas != null && __isset.vacinas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vacinas: ");
        __sb.Append(Vacinas);
      }
      if (__isset.dataHoraInicialAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataHoraInicialAtendimento: ");
        __sb.Append(DataHoraInicialAtendimento);
      }
      if (__isset.dataHoraFinalAtendimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataHoraFinalAtendimento: ");
        __sb.Append(DataHoraFinalAtendimento);
      }
      if (CpfCidadao != null && __isset.cpfCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CpfCidadao: ");
        __sb.Append(CpfCidadao);
      }
      if (__isset.condicaoMaternal) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CondicaoMaternal: ");
        __sb.Append(CondicaoMaternal);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
