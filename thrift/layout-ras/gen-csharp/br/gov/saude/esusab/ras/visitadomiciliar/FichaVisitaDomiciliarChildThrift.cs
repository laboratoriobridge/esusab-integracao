/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.visitadomiciliar
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FichaVisitaDomiciliarChildThrift : TBase
  {
    private long _turno;
    private string _numProntuario;
    private string _cnsCidadao;
    private long _dtNascimento;
    private long _sexo;
    private bool _statusVisitaCompartilhadaOutroProfissional;
    private List<long> _motivosVisita;
    private long _desfecho;
    private string _microArea;
    private bool _stForaArea;
    private long _tipoDeImovel;
    private double _pesoAcompanhamentoNutricional;
    private double _alturaAcompanhamentoNutricional;
    private string _cpfCidadao;
    private int _pressaoSistolica;
    private int _pressaoDiastolica;
    private double _temperatura;
    private long _tipoGlicemia;
    private int _glicemia;
    private double _latitude;
    private double _longitude;
    private string _uuidOrigemCadastroDomiciliar;
    private br.gov.saude.esusab.ras.common.IvcfThrift _ivcf;

    public long Turno
    {
      get
      {
        return _turno;
      }
      set
      {
        __isset.turno = true;
        this._turno = value;
      }
    }

    public string NumProntuario
    {
      get
      {
        return _numProntuario;
      }
      set
      {
        __isset.numProntuario = true;
        this._numProntuario = value;
      }
    }

    public string CnsCidadao
    {
      get
      {
        return _cnsCidadao;
      }
      set
      {
        __isset.cnsCidadao = true;
        this._cnsCidadao = value;
      }
    }

    public long DtNascimento
    {
      get
      {
        return _dtNascimento;
      }
      set
      {
        __isset.dtNascimento = true;
        this._dtNascimento = value;
      }
    }

    public long Sexo
    {
      get
      {
        return _sexo;
      }
      set
      {
        __isset.sexo = true;
        this._sexo = value;
      }
    }

    public bool StatusVisitaCompartilhadaOutroProfissional
    {
      get
      {
        return _statusVisitaCompartilhadaOutroProfissional;
      }
      set
      {
        __isset.statusVisitaCompartilhadaOutroProfissional = true;
        this._statusVisitaCompartilhadaOutroProfissional = value;
      }
    }

    public List<long> MotivosVisita
    {
      get
      {
        return _motivosVisita;
      }
      set
      {
        __isset.motivosVisita = true;
        this._motivosVisita = value;
      }
    }

    public long Desfecho
    {
      get
      {
        return _desfecho;
      }
      set
      {
        __isset.desfecho = true;
        this._desfecho = value;
      }
    }

    public string MicroArea
    {
      get
      {
        return _microArea;
      }
      set
      {
        __isset.microArea = true;
        this._microArea = value;
      }
    }

    public bool StForaArea
    {
      get
      {
        return _stForaArea;
      }
      set
      {
        __isset.stForaArea = true;
        this._stForaArea = value;
      }
    }

    public long TipoDeImovel
    {
      get
      {
        return _tipoDeImovel;
      }
      set
      {
        __isset.tipoDeImovel = true;
        this._tipoDeImovel = value;
      }
    }

    public double PesoAcompanhamentoNutricional
    {
      get
      {
        return _pesoAcompanhamentoNutricional;
      }
      set
      {
        __isset.pesoAcompanhamentoNutricional = true;
        this._pesoAcompanhamentoNutricional = value;
      }
    }

    public double AlturaAcompanhamentoNutricional
    {
      get
      {
        return _alturaAcompanhamentoNutricional;
      }
      set
      {
        __isset.alturaAcompanhamentoNutricional = true;
        this._alturaAcompanhamentoNutricional = value;
      }
    }

    public string CpfCidadao
    {
      get
      {
        return _cpfCidadao;
      }
      set
      {
        __isset.cpfCidadao = true;
        this._cpfCidadao = value;
      }
    }

    public int PressaoSistolica
    {
      get
      {
        return _pressaoSistolica;
      }
      set
      {
        __isset.pressaoSistolica = true;
        this._pressaoSistolica = value;
      }
    }

    public int PressaoDiastolica
    {
      get
      {
        return _pressaoDiastolica;
      }
      set
      {
        __isset.pressaoDiastolica = true;
        this._pressaoDiastolica = value;
      }
    }

    public double Temperatura
    {
      get
      {
        return _temperatura;
      }
      set
      {
        __isset.temperatura = true;
        this._temperatura = value;
      }
    }

    public long TipoGlicemia
    {
      get
      {
        return _tipoGlicemia;
      }
      set
      {
        __isset.tipoGlicemia = true;
        this._tipoGlicemia = value;
      }
    }

    public int Glicemia
    {
      get
      {
        return _glicemia;
      }
      set
      {
        __isset.glicemia = true;
        this._glicemia = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public string UuidOrigemCadastroDomiciliar
    {
      get
      {
        return _uuidOrigemCadastroDomiciliar;
      }
      set
      {
        __isset.uuidOrigemCadastroDomiciliar = true;
        this._uuidOrigemCadastroDomiciliar = value;
      }
    }

    public br.gov.saude.esusab.ras.common.IvcfThrift Ivcf
    {
      get
      {
        return _ivcf;
      }
      set
      {
        __isset.ivcf = true;
        this._ivcf = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool turno;
      public bool numProntuario;
      public bool cnsCidadao;
      public bool dtNascimento;
      public bool sexo;
      public bool statusVisitaCompartilhadaOutroProfissional;
      public bool motivosVisita;
      public bool desfecho;
      public bool microArea;
      public bool stForaArea;
      public bool tipoDeImovel;
      public bool pesoAcompanhamentoNutricional;
      public bool alturaAcompanhamentoNutricional;
      public bool cpfCidadao;
      public bool pressaoSistolica;
      public bool pressaoDiastolica;
      public bool temperatura;
      public bool tipoGlicemia;
      public bool glicemia;
      public bool latitude;
      public bool longitude;
      public bool uuidOrigemCadastroDomiciliar;
      public bool ivcf;
    }

    public FichaVisitaDomiciliarChildThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Turno = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NumProntuario = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CnsCidadao = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                DtNascimento = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Sexo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                StatusVisitaCompartilhadaOutroProfissional = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  MotivosVisita = new List<long>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    long _elem2;
                    _elem2 = iprot.ReadI64();
                    MotivosVisita.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Desfecho = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                MicroArea = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                StForaArea = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                TipoDeImovel = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                PesoAcompanhamentoNutricional = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Double) {
                AlturaAcompanhamentoNutricional = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CpfCidadao = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I32) {
                PressaoSistolica = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I32) {
                PressaoDiastolica = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Double) {
                Temperatura = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I64) {
                TipoGlicemia = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.I32) {
                Glicemia = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.Double) {
                Latitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Double) {
                Longitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.String) {
                UuidOrigemCadastroDomiciliar = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Struct) {
                Ivcf = new br.gov.saude.esusab.ras.common.IvcfThrift();
                Ivcf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FichaVisitaDomiciliarChildThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.turno) {
          field.Name = "turno";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Turno);
          oprot.WriteFieldEnd();
        }
        if (NumProntuario != null && __isset.numProntuario) {
          field.Name = "numProntuario";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NumProntuario);
          oprot.WriteFieldEnd();
        }
        if (CnsCidadao != null && __isset.cnsCidadao) {
          field.Name = "cnsCidadao";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CnsCidadao);
          oprot.WriteFieldEnd();
        }
        if (__isset.dtNascimento) {
          field.Name = "dtNascimento";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DtNascimento);
          oprot.WriteFieldEnd();
        }
        if (__isset.sexo) {
          field.Name = "sexo";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Sexo);
          oprot.WriteFieldEnd();
        }
        if (__isset.statusVisitaCompartilhadaOutroProfissional) {
          field.Name = "statusVisitaCompartilhadaOutroProfissional";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(StatusVisitaCompartilhadaOutroProfissional);
          oprot.WriteFieldEnd();
        }
        if (MotivosVisita != null && __isset.motivosVisita) {
          field.Name = "motivosVisita";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, MotivosVisita.Count));
            foreach (long _iter3 in MotivosVisita)
            {
              oprot.WriteI64(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.desfecho) {
          field.Name = "desfecho";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Desfecho);
          oprot.WriteFieldEnd();
        }
        if (MicroArea != null && __isset.microArea) {
          field.Name = "microArea";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MicroArea);
          oprot.WriteFieldEnd();
        }
        if (__isset.stForaArea) {
          field.Name = "stForaArea";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(StForaArea);
          oprot.WriteFieldEnd();
        }
        if (__isset.tipoDeImovel) {
          field.Name = "tipoDeImovel";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TipoDeImovel);
          oprot.WriteFieldEnd();
        }
        if (__isset.pesoAcompanhamentoNutricional) {
          field.Name = "pesoAcompanhamentoNutricional";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(PesoAcompanhamentoNutricional);
          oprot.WriteFieldEnd();
        }
        if (__isset.alturaAcompanhamentoNutricional) {
          field.Name = "alturaAcompanhamentoNutricional";
          field.Type = TType.Double;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(AlturaAcompanhamentoNutricional);
          oprot.WriteFieldEnd();
        }
        if (CpfCidadao != null && __isset.cpfCidadao) {
          field.Name = "cpfCidadao";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CpfCidadao);
          oprot.WriteFieldEnd();
        }
        if (__isset.pressaoSistolica) {
          field.Name = "pressaoSistolica";
          field.Type = TType.I32;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PressaoSistolica);
          oprot.WriteFieldEnd();
        }
        if (__isset.pressaoDiastolica) {
          field.Name = "pressaoDiastolica";
          field.Type = TType.I32;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PressaoDiastolica);
          oprot.WriteFieldEnd();
        }
        if (__isset.temperatura) {
          field.Name = "temperatura";
          field.Type = TType.Double;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Temperatura);
          oprot.WriteFieldEnd();
        }
        if (__isset.tipoGlicemia) {
          field.Name = "tipoGlicemia";
          field.Type = TType.I64;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TipoGlicemia);
          oprot.WriteFieldEnd();
        }
        if (__isset.glicemia) {
          field.Name = "glicemia";
          field.Type = TType.I32;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Glicemia);
          oprot.WriteFieldEnd();
        }
        if (__isset.latitude) {
          field.Name = "latitude";
          field.Type = TType.Double;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Latitude);
          oprot.WriteFieldEnd();
        }
        if (__isset.longitude) {
          field.Name = "longitude";
          field.Type = TType.Double;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Longitude);
          oprot.WriteFieldEnd();
        }
        if (UuidOrigemCadastroDomiciliar != null && __isset.uuidOrigemCadastroDomiciliar) {
          field.Name = "uuidOrigemCadastroDomiciliar";
          field.Type = TType.String;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UuidOrigemCadastroDomiciliar);
          oprot.WriteFieldEnd();
        }
        if (Ivcf != null && __isset.ivcf) {
          field.Name = "ivcf";
          field.Type = TType.Struct;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          Ivcf.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FichaVisitaDomiciliarChildThrift(");
      bool __first = true;
      if (__isset.turno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Turno: ");
        __sb.Append(Turno);
      }
      if (NumProntuario != null && __isset.numProntuario) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumProntuario: ");
        __sb.Append(NumProntuario);
      }
      if (CnsCidadao != null && __isset.cnsCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CnsCidadao: ");
        __sb.Append(CnsCidadao);
      }
      if (__isset.dtNascimento) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DtNascimento: ");
        __sb.Append(DtNascimento);
      }
      if (__isset.sexo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sexo: ");
        __sb.Append(Sexo);
      }
      if (__isset.statusVisitaCompartilhadaOutroProfissional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusVisitaCompartilhadaOutroProfissional: ");
        __sb.Append(StatusVisitaCompartilhadaOutroProfissional);
      }
      if (MotivosVisita != null && __isset.motivosVisita) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MotivosVisita: ");
        __sb.Append(MotivosVisita);
      }
      if (__isset.desfecho) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Desfecho: ");
        __sb.Append(Desfecho);
      }
      if (MicroArea != null && __isset.microArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MicroArea: ");
        __sb.Append(MicroArea);
      }
      if (__isset.stForaArea) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StForaArea: ");
        __sb.Append(StForaArea);
      }
      if (__isset.tipoDeImovel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoDeImovel: ");
        __sb.Append(TipoDeImovel);
      }
      if (__isset.pesoAcompanhamentoNutricional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PesoAcompanhamentoNutricional: ");
        __sb.Append(PesoAcompanhamentoNutricional);
      }
      if (__isset.alturaAcompanhamentoNutricional) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AlturaAcompanhamentoNutricional: ");
        __sb.Append(AlturaAcompanhamentoNutricional);
      }
      if (CpfCidadao != null && __isset.cpfCidadao) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CpfCidadao: ");
        __sb.Append(CpfCidadao);
      }
      if (__isset.pressaoSistolica) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PressaoSistolica: ");
        __sb.Append(PressaoSistolica);
      }
      if (__isset.pressaoDiastolica) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PressaoDiastolica: ");
        __sb.Append(PressaoDiastolica);
      }
      if (__isset.temperatura) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Temperatura: ");
        __sb.Append(Temperatura);
      }
      if (__isset.tipoGlicemia) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TipoGlicemia: ");
        __sb.Append(TipoGlicemia);
      }
      if (__isset.glicemia) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Glicemia: ");
        __sb.Append(Glicemia);
      }
      if (__isset.latitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Latitude: ");
        __sb.Append(Latitude);
      }
      if (__isset.longitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Longitude: ");
        __sb.Append(Longitude);
      }
      if (UuidOrigemCadastroDomiciliar != null && __isset.uuidOrigemCadastroDomiciliar) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UuidOrigemCadastroDomiciliar: ");
        __sb.Append(UuidOrigemCadastroDomiciliar);
      }
      if (Ivcf != null && __isset.ivcf) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ivcf: ");
        __sb.Append(Ivcf== null ? "<null>" : Ivcf.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
