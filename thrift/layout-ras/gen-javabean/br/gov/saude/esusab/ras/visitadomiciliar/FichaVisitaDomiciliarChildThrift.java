/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.visitadomiciliar;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-19")
public class FichaVisitaDomiciliarChildThrift implements org.apache.thrift.TBase<FichaVisitaDomiciliarChildThrift, FichaVisitaDomiciliarChildThrift._Fields>, java.io.Serializable, Cloneable, Comparable<FichaVisitaDomiciliarChildThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FichaVisitaDomiciliarChildThrift");

  private static final org.apache.thrift.protocol.TField TURNO_FIELD_DESC = new org.apache.thrift.protocol.TField("turno", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_PRONTUARIO_FIELD_DESC = new org.apache.thrift.protocol.TField("numProntuario", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CNS_CIDADAO_FIELD_DESC = new org.apache.thrift.protocol.TField("cnsCidadao", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DT_NASCIMENTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dtNascimento", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEXO_FIELD_DESC = new org.apache.thrift.protocol.TField("sexo", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("statusVisitaCompartilhadaOutroProfissional", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField MOTIVOS_VISITA_FIELD_DESC = new org.apache.thrift.protocol.TField("motivosVisita", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DESFECHO_FIELD_DESC = new org.apache.thrift.protocol.TField("desfecho", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MICRO_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("microArea", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ST_FORA_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("stForaArea", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TIPO_DE_IMOVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoDeImovel", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField PESO_ACOMPANHAMENTO_NUTRICIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("pesoAcompanhamentoNutricional", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ALTURA_ACOMPANHAMENTO_NUTRICIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("alturaAcompanhamentoNutricional", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CPF_CIDADAO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpfCidadao", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PRESSAO_SISTOLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("pressaoSistolica", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PRESSAO_DIASTOLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("pressaoDiastolica", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TEMPERATURA_FIELD_DESC = new org.apache.thrift.protocol.TField("temperatura", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField TIPO_GLICEMIA_FIELD_DESC = new org.apache.thrift.protocol.TField("tipoGlicemia", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField GLICEMIA_FIELD_DESC = new org.apache.thrift.protocol.TField("glicemia", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField UUID_ORIGEM_CADASTRO_DOMICILIAR_FIELD_DESC = new org.apache.thrift.protocol.TField("uuidOrigemCadastroDomiciliar", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IVCF_FIELD_DESC = new org.apache.thrift.protocol.TField("ivcf", org.apache.thrift.protocol.TType.STRUCT, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FichaVisitaDomiciliarChildThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FichaVisitaDomiciliarChildThriftTupleSchemeFactory());
  }

  private long turno; // optional
  private String numProntuario; // optional
  private String cnsCidadao; // optional
  private long dtNascimento; // optional
  private long sexo; // optional
  private boolean statusVisitaCompartilhadaOutroProfissional; // optional
  private List<Long> motivosVisita; // optional
  private long desfecho; // optional
  private String microArea; // optional
  private boolean stForaArea; // optional
  private long tipoDeImovel; // optional
  private double pesoAcompanhamentoNutricional; // optional
  private double alturaAcompanhamentoNutricional; // optional
  private String cpfCidadao; // optional
  private int pressaoSistolica; // optional
  private int pressaoDiastolica; // optional
  private double temperatura; // optional
  private long tipoGlicemia; // optional
  private int glicemia; // optional
  private double latitude; // optional
  private double longitude; // optional
  private String uuidOrigemCadastroDomiciliar; // optional
  private br.gov.saude.esusab.ras.common.IvcfThrift ivcf; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TURNO((short)1, "turno"),
    NUM_PRONTUARIO((short)2, "numProntuario"),
    CNS_CIDADAO((short)3, "cnsCidadao"),
    DT_NASCIMENTO((short)4, "dtNascimento"),
    SEXO((short)5, "sexo"),
    STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL((short)6, "statusVisitaCompartilhadaOutroProfissional"),
    MOTIVOS_VISITA((short)7, "motivosVisita"),
    DESFECHO((short)8, "desfecho"),
    MICRO_AREA((short)9, "microArea"),
    ST_FORA_AREA((short)10, "stForaArea"),
    TIPO_DE_IMOVEL((short)11, "tipoDeImovel"),
    PESO_ACOMPANHAMENTO_NUTRICIONAL((short)12, "pesoAcompanhamentoNutricional"),
    ALTURA_ACOMPANHAMENTO_NUTRICIONAL((short)13, "alturaAcompanhamentoNutricional"),
    CPF_CIDADAO((short)14, "cpfCidadao"),
    PRESSAO_SISTOLICA((short)15, "pressaoSistolica"),
    PRESSAO_DIASTOLICA((short)16, "pressaoDiastolica"),
    TEMPERATURA((short)17, "temperatura"),
    TIPO_GLICEMIA((short)18, "tipoGlicemia"),
    GLICEMIA((short)19, "glicemia"),
    LATITUDE((short)20, "latitude"),
    LONGITUDE((short)21, "longitude"),
    UUID_ORIGEM_CADASTRO_DOMICILIAR((short)22, "uuidOrigemCadastroDomiciliar"),
    IVCF((short)23, "ivcf");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TURNO
          return TURNO;
        case 2: // NUM_PRONTUARIO
          return NUM_PRONTUARIO;
        case 3: // CNS_CIDADAO
          return CNS_CIDADAO;
        case 4: // DT_NASCIMENTO
          return DT_NASCIMENTO;
        case 5: // SEXO
          return SEXO;
        case 6: // STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL
          return STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL;
        case 7: // MOTIVOS_VISITA
          return MOTIVOS_VISITA;
        case 8: // DESFECHO
          return DESFECHO;
        case 9: // MICRO_AREA
          return MICRO_AREA;
        case 10: // ST_FORA_AREA
          return ST_FORA_AREA;
        case 11: // TIPO_DE_IMOVEL
          return TIPO_DE_IMOVEL;
        case 12: // PESO_ACOMPANHAMENTO_NUTRICIONAL
          return PESO_ACOMPANHAMENTO_NUTRICIONAL;
        case 13: // ALTURA_ACOMPANHAMENTO_NUTRICIONAL
          return ALTURA_ACOMPANHAMENTO_NUTRICIONAL;
        case 14: // CPF_CIDADAO
          return CPF_CIDADAO;
        case 15: // PRESSAO_SISTOLICA
          return PRESSAO_SISTOLICA;
        case 16: // PRESSAO_DIASTOLICA
          return PRESSAO_DIASTOLICA;
        case 17: // TEMPERATURA
          return TEMPERATURA;
        case 18: // TIPO_GLICEMIA
          return TIPO_GLICEMIA;
        case 19: // GLICEMIA
          return GLICEMIA;
        case 20: // LATITUDE
          return LATITUDE;
        case 21: // LONGITUDE
          return LONGITUDE;
        case 22: // UUID_ORIGEM_CADASTRO_DOMICILIAR
          return UUID_ORIGEM_CADASTRO_DOMICILIAR;
        case 23: // IVCF
          return IVCF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TURNO_ISSET_ID = 0;
  private static final int __DTNASCIMENTO_ISSET_ID = 1;
  private static final int __SEXO_ISSET_ID = 2;
  private static final int __STATUSVISITACOMPARTILHADAOUTROPROFISSIONAL_ISSET_ID = 3;
  private static final int __DESFECHO_ISSET_ID = 4;
  private static final int __STFORAAREA_ISSET_ID = 5;
  private static final int __TIPODEIMOVEL_ISSET_ID = 6;
  private static final int __PESOACOMPANHAMENTONUTRICIONAL_ISSET_ID = 7;
  private static final int __ALTURAACOMPANHAMENTONUTRICIONAL_ISSET_ID = 8;
  private static final int __PRESSAOSISTOLICA_ISSET_ID = 9;
  private static final int __PRESSAODIASTOLICA_ISSET_ID = 10;
  private static final int __TEMPERATURA_ISSET_ID = 11;
  private static final int __TIPOGLICEMIA_ISSET_ID = 12;
  private static final int __GLICEMIA_ISSET_ID = 13;
  private static final int __LATITUDE_ISSET_ID = 14;
  private static final int __LONGITUDE_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TURNO,_Fields.NUM_PRONTUARIO,_Fields.CNS_CIDADAO,_Fields.DT_NASCIMENTO,_Fields.SEXO,_Fields.STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL,_Fields.MOTIVOS_VISITA,_Fields.DESFECHO,_Fields.MICRO_AREA,_Fields.ST_FORA_AREA,_Fields.TIPO_DE_IMOVEL,_Fields.PESO_ACOMPANHAMENTO_NUTRICIONAL,_Fields.ALTURA_ACOMPANHAMENTO_NUTRICIONAL,_Fields.CPF_CIDADAO,_Fields.PRESSAO_SISTOLICA,_Fields.PRESSAO_DIASTOLICA,_Fields.TEMPERATURA,_Fields.TIPO_GLICEMIA,_Fields.GLICEMIA,_Fields.LATITUDE,_Fields.LONGITUDE,_Fields.UUID_ORIGEM_CADASTRO_DOMICILIAR,_Fields.IVCF};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TURNO, new org.apache.thrift.meta_data.FieldMetaData("turno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_PRONTUARIO, new org.apache.thrift.meta_data.FieldMetaData("numProntuario", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CNS_CIDADAO, new org.apache.thrift.meta_data.FieldMetaData("cnsCidadao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DT_NASCIMENTO, new org.apache.thrift.meta_data.FieldMetaData("dtNascimento", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEXO, new org.apache.thrift.meta_data.FieldMetaData("sexo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL, new org.apache.thrift.meta_data.FieldMetaData("statusVisitaCompartilhadaOutroProfissional", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MOTIVOS_VISITA, new org.apache.thrift.meta_data.FieldMetaData("motivosVisita", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DESFECHO, new org.apache.thrift.meta_data.FieldMetaData("desfecho", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MICRO_AREA, new org.apache.thrift.meta_data.FieldMetaData("microArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ST_FORA_AREA, new org.apache.thrift.meta_data.FieldMetaData("stForaArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIPO_DE_IMOVEL, new org.apache.thrift.meta_data.FieldMetaData("tipoDeImovel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PESO_ACOMPANHAMENTO_NUTRICIONAL, new org.apache.thrift.meta_data.FieldMetaData("pesoAcompanhamentoNutricional", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALTURA_ACOMPANHAMENTO_NUTRICIONAL, new org.apache.thrift.meta_data.FieldMetaData("alturaAcompanhamentoNutricional", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CPF_CIDADAO, new org.apache.thrift.meta_data.FieldMetaData("cpfCidadao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESSAO_SISTOLICA, new org.apache.thrift.meta_data.FieldMetaData("pressaoSistolica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRESSAO_DIASTOLICA, new org.apache.thrift.meta_data.FieldMetaData("pressaoDiastolica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPERATURA, new org.apache.thrift.meta_data.FieldMetaData("temperatura", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIPO_GLICEMIA, new org.apache.thrift.meta_data.FieldMetaData("tipoGlicemia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GLICEMIA, new org.apache.thrift.meta_data.FieldMetaData("glicemia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UUID_ORIGEM_CADASTRO_DOMICILIAR, new org.apache.thrift.meta_data.FieldMetaData("uuidOrigemCadastroDomiciliar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IVCF, new org.apache.thrift.meta_data.FieldMetaData("ivcf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, br.gov.saude.esusab.ras.common.IvcfThrift.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FichaVisitaDomiciliarChildThrift.class, metaDataMap);
  }

  public FichaVisitaDomiciliarChildThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FichaVisitaDomiciliarChildThrift(FichaVisitaDomiciliarChildThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.turno = other.turno;
    if (other.isSetNumProntuario()) {
      this.numProntuario = other.numProntuario;
    }
    if (other.isSetCnsCidadao()) {
      this.cnsCidadao = other.cnsCidadao;
    }
    this.dtNascimento = other.dtNascimento;
    this.sexo = other.sexo;
    this.statusVisitaCompartilhadaOutroProfissional = other.statusVisitaCompartilhadaOutroProfissional;
    if (other.isSetMotivosVisita()) {
      List<Long> __this__motivosVisita = new ArrayList<Long>(other.motivosVisita);
      this.motivosVisita = __this__motivosVisita;
    }
    this.desfecho = other.desfecho;
    if (other.isSetMicroArea()) {
      this.microArea = other.microArea;
    }
    this.stForaArea = other.stForaArea;
    this.tipoDeImovel = other.tipoDeImovel;
    this.pesoAcompanhamentoNutricional = other.pesoAcompanhamentoNutricional;
    this.alturaAcompanhamentoNutricional = other.alturaAcompanhamentoNutricional;
    if (other.isSetCpfCidadao()) {
      this.cpfCidadao = other.cpfCidadao;
    }
    this.pressaoSistolica = other.pressaoSistolica;
    this.pressaoDiastolica = other.pressaoDiastolica;
    this.temperatura = other.temperatura;
    this.tipoGlicemia = other.tipoGlicemia;
    this.glicemia = other.glicemia;
    this.latitude = other.latitude;
    this.longitude = other.longitude;
    if (other.isSetUuidOrigemCadastroDomiciliar()) {
      this.uuidOrigemCadastroDomiciliar = other.uuidOrigemCadastroDomiciliar;
    }
    if (other.isSetIvcf()) {
      this.ivcf = new br.gov.saude.esusab.ras.common.IvcfThrift(other.ivcf);
    }
  }

  public FichaVisitaDomiciliarChildThrift deepCopy() {
    return new FichaVisitaDomiciliarChildThrift(this);
  }

  @Override
  public void clear() {
    setTurnoIsSet(false);
    this.turno = 0;
    this.numProntuario = null;
    this.cnsCidadao = null;
    setDtNascimentoIsSet(false);
    this.dtNascimento = 0;
    setSexoIsSet(false);
    this.sexo = 0;
    setStatusVisitaCompartilhadaOutroProfissionalIsSet(false);
    this.statusVisitaCompartilhadaOutroProfissional = false;
    this.motivosVisita = null;
    setDesfechoIsSet(false);
    this.desfecho = 0;
    this.microArea = null;
    setStForaAreaIsSet(false);
    this.stForaArea = false;
    setTipoDeImovelIsSet(false);
    this.tipoDeImovel = 0;
    setPesoAcompanhamentoNutricionalIsSet(false);
    this.pesoAcompanhamentoNutricional = 0.0;
    setAlturaAcompanhamentoNutricionalIsSet(false);
    this.alturaAcompanhamentoNutricional = 0.0;
    this.cpfCidadao = null;
    setPressaoSistolicaIsSet(false);
    this.pressaoSistolica = 0;
    setPressaoDiastolicaIsSet(false);
    this.pressaoDiastolica = 0;
    setTemperaturaIsSet(false);
    this.temperatura = 0.0;
    setTipoGlicemiaIsSet(false);
    this.tipoGlicemia = 0;
    setGlicemiaIsSet(false);
    this.glicemia = 0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    this.uuidOrigemCadastroDomiciliar = null;
    this.ivcf = null;
  }

  public long getTurno() {
    return this.turno;
  }

  public void setTurno(long turno) {
    this.turno = turno;
    setTurnoIsSet(true);
  }

  public void unsetTurno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  /** Returns true if field turno is set (has been assigned a value) and false otherwise */
  public boolean isSetTurno() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  public void setTurnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNO_ISSET_ID, value);
  }

  public String getNumProntuario() {
    return this.numProntuario;
  }

  public void setNumProntuario(String numProntuario) {
    this.numProntuario = numProntuario;
  }

  public void unsetNumProntuario() {
    this.numProntuario = null;
  }

  /** Returns true if field numProntuario is set (has been assigned a value) and false otherwise */
  public boolean isSetNumProntuario() {
    return this.numProntuario != null;
  }

  public void setNumProntuarioIsSet(boolean value) {
    if (!value) {
      this.numProntuario = null;
    }
  }

  public String getCnsCidadao() {
    return this.cnsCidadao;
  }

  public void setCnsCidadao(String cnsCidadao) {
    this.cnsCidadao = cnsCidadao;
  }

  public void unsetCnsCidadao() {
    this.cnsCidadao = null;
  }

  /** Returns true if field cnsCidadao is set (has been assigned a value) and false otherwise */
  public boolean isSetCnsCidadao() {
    return this.cnsCidadao != null;
  }

  public void setCnsCidadaoIsSet(boolean value) {
    if (!value) {
      this.cnsCidadao = null;
    }
  }

  public long getDtNascimento() {
    return this.dtNascimento;
  }

  public void setDtNascimento(long dtNascimento) {
    this.dtNascimento = dtNascimento;
    setDtNascimentoIsSet(true);
  }

  public void unsetDtNascimento() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID);
  }

  /** Returns true if field dtNascimento is set (has been assigned a value) and false otherwise */
  public boolean isSetDtNascimento() {
    return EncodingUtils.testBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID);
  }

  public void setDtNascimentoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTNASCIMENTO_ISSET_ID, value);
  }

  public long getSexo() {
    return this.sexo;
  }

  public void setSexo(long sexo) {
    this.sexo = sexo;
    setSexoIsSet(true);
  }

  public void unsetSexo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEXO_ISSET_ID);
  }

  /** Returns true if field sexo is set (has been assigned a value) and false otherwise */
  public boolean isSetSexo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEXO_ISSET_ID);
  }

  public void setSexoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEXO_ISSET_ID, value);
  }

  public boolean isStatusVisitaCompartilhadaOutroProfissional() {
    return this.statusVisitaCompartilhadaOutroProfissional;
  }

  public void setStatusVisitaCompartilhadaOutroProfissional(boolean statusVisitaCompartilhadaOutroProfissional) {
    this.statusVisitaCompartilhadaOutroProfissional = statusVisitaCompartilhadaOutroProfissional;
    setStatusVisitaCompartilhadaOutroProfissionalIsSet(true);
  }

  public void unsetStatusVisitaCompartilhadaOutroProfissional() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSVISITACOMPARTILHADAOUTROPROFISSIONAL_ISSET_ID);
  }

  /** Returns true if field statusVisitaCompartilhadaOutroProfissional is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusVisitaCompartilhadaOutroProfissional() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSVISITACOMPARTILHADAOUTROPROFISSIONAL_ISSET_ID);
  }

  public void setStatusVisitaCompartilhadaOutroProfissionalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSVISITACOMPARTILHADAOUTROPROFISSIONAL_ISSET_ID, value);
  }

  public int getMotivosVisitaSize() {
    return (this.motivosVisita == null) ? 0 : this.motivosVisita.size();
  }

  public java.util.Iterator<Long> getMotivosVisitaIterator() {
    return (this.motivosVisita == null) ? null : this.motivosVisita.iterator();
  }

  public void addToMotivosVisita(long elem) {
    if (this.motivosVisita == null) {
      this.motivosVisita = new ArrayList<Long>();
    }
    this.motivosVisita.add(elem);
  }

  public List<Long> getMotivosVisita() {
    return this.motivosVisita;
  }

  public void setMotivosVisita(List<Long> motivosVisita) {
    this.motivosVisita = motivosVisita;
  }

  public void unsetMotivosVisita() {
    this.motivosVisita = null;
  }

  /** Returns true if field motivosVisita is set (has been assigned a value) and false otherwise */
  public boolean isSetMotivosVisita() {
    return this.motivosVisita != null;
  }

  public void setMotivosVisitaIsSet(boolean value) {
    if (!value) {
      this.motivosVisita = null;
    }
  }

  public long getDesfecho() {
    return this.desfecho;
  }

  public void setDesfecho(long desfecho) {
    this.desfecho = desfecho;
    setDesfechoIsSet(true);
  }

  public void unsetDesfecho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESFECHO_ISSET_ID);
  }

  /** Returns true if field desfecho is set (has been assigned a value) and false otherwise */
  public boolean isSetDesfecho() {
    return EncodingUtils.testBit(__isset_bitfield, __DESFECHO_ISSET_ID);
  }

  public void setDesfechoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESFECHO_ISSET_ID, value);
  }

  public String getMicroArea() {
    return this.microArea;
  }

  public void setMicroArea(String microArea) {
    this.microArea = microArea;
  }

  public void unsetMicroArea() {
    this.microArea = null;
  }

  /** Returns true if field microArea is set (has been assigned a value) and false otherwise */
  public boolean isSetMicroArea() {
    return this.microArea != null;
  }

  public void setMicroAreaIsSet(boolean value) {
    if (!value) {
      this.microArea = null;
    }
  }

  public boolean isStForaArea() {
    return this.stForaArea;
  }

  public void setStForaArea(boolean stForaArea) {
    this.stForaArea = stForaArea;
    setStForaAreaIsSet(true);
  }

  public void unsetStForaArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STFORAAREA_ISSET_ID);
  }

  /** Returns true if field stForaArea is set (has been assigned a value) and false otherwise */
  public boolean isSetStForaArea() {
    return EncodingUtils.testBit(__isset_bitfield, __STFORAAREA_ISSET_ID);
  }

  public void setStForaAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STFORAAREA_ISSET_ID, value);
  }

  public long getTipoDeImovel() {
    return this.tipoDeImovel;
  }

  public void setTipoDeImovel(long tipoDeImovel) {
    this.tipoDeImovel = tipoDeImovel;
    setTipoDeImovelIsSet(true);
  }

  public void unsetTipoDeImovel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIPODEIMOVEL_ISSET_ID);
  }

  /** Returns true if field tipoDeImovel is set (has been assigned a value) and false otherwise */
  public boolean isSetTipoDeImovel() {
    return EncodingUtils.testBit(__isset_bitfield, __TIPODEIMOVEL_ISSET_ID);
  }

  public void setTipoDeImovelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIPODEIMOVEL_ISSET_ID, value);
  }

  public double getPesoAcompanhamentoNutricional() {
    return this.pesoAcompanhamentoNutricional;
  }

  public void setPesoAcompanhamentoNutricional(double pesoAcompanhamentoNutricional) {
    this.pesoAcompanhamentoNutricional = pesoAcompanhamentoNutricional;
    setPesoAcompanhamentoNutricionalIsSet(true);
  }

  public void unsetPesoAcompanhamentoNutricional() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESOACOMPANHAMENTONUTRICIONAL_ISSET_ID);
  }

  /** Returns true if field pesoAcompanhamentoNutricional is set (has been assigned a value) and false otherwise */
  public boolean isSetPesoAcompanhamentoNutricional() {
    return EncodingUtils.testBit(__isset_bitfield, __PESOACOMPANHAMENTONUTRICIONAL_ISSET_ID);
  }

  public void setPesoAcompanhamentoNutricionalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESOACOMPANHAMENTONUTRICIONAL_ISSET_ID, value);
  }

  public double getAlturaAcompanhamentoNutricional() {
    return this.alturaAcompanhamentoNutricional;
  }

  public void setAlturaAcompanhamentoNutricional(double alturaAcompanhamentoNutricional) {
    this.alturaAcompanhamentoNutricional = alturaAcompanhamentoNutricional;
    setAlturaAcompanhamentoNutricionalIsSet(true);
  }

  public void unsetAlturaAcompanhamentoNutricional() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALTURAACOMPANHAMENTONUTRICIONAL_ISSET_ID);
  }

  /** Returns true if field alturaAcompanhamentoNutricional is set (has been assigned a value) and false otherwise */
  public boolean isSetAlturaAcompanhamentoNutricional() {
    return EncodingUtils.testBit(__isset_bitfield, __ALTURAACOMPANHAMENTONUTRICIONAL_ISSET_ID);
  }

  public void setAlturaAcompanhamentoNutricionalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALTURAACOMPANHAMENTONUTRICIONAL_ISSET_ID, value);
  }

  public String getCpfCidadao() {
    return this.cpfCidadao;
  }

  public void setCpfCidadao(String cpfCidadao) {
    this.cpfCidadao = cpfCidadao;
  }

  public void unsetCpfCidadao() {
    this.cpfCidadao = null;
  }

  /** Returns true if field cpfCidadao is set (has been assigned a value) and false otherwise */
  public boolean isSetCpfCidadao() {
    return this.cpfCidadao != null;
  }

  public void setCpfCidadaoIsSet(boolean value) {
    if (!value) {
      this.cpfCidadao = null;
    }
  }

  public int getPressaoSistolica() {
    return this.pressaoSistolica;
  }

  public void setPressaoSistolica(int pressaoSistolica) {
    this.pressaoSistolica = pressaoSistolica;
    setPressaoSistolicaIsSet(true);
  }

  public void unsetPressaoSistolica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESSAOSISTOLICA_ISSET_ID);
  }

  /** Returns true if field pressaoSistolica is set (has been assigned a value) and false otherwise */
  public boolean isSetPressaoSistolica() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESSAOSISTOLICA_ISSET_ID);
  }

  public void setPressaoSistolicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESSAOSISTOLICA_ISSET_ID, value);
  }

  public int getPressaoDiastolica() {
    return this.pressaoDiastolica;
  }

  public void setPressaoDiastolica(int pressaoDiastolica) {
    this.pressaoDiastolica = pressaoDiastolica;
    setPressaoDiastolicaIsSet(true);
  }

  public void unsetPressaoDiastolica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESSAODIASTOLICA_ISSET_ID);
  }

  /** Returns true if field pressaoDiastolica is set (has been assigned a value) and false otherwise */
  public boolean isSetPressaoDiastolica() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESSAODIASTOLICA_ISSET_ID);
  }

  public void setPressaoDiastolicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESSAODIASTOLICA_ISSET_ID, value);
  }

  public double getTemperatura() {
    return this.temperatura;
  }

  public void setTemperatura(double temperatura) {
    this.temperatura = temperatura;
    setTemperaturaIsSet(true);
  }

  public void unsetTemperatura() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURA_ISSET_ID);
  }

  /** Returns true if field temperatura is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperatura() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATURA_ISSET_ID);
  }

  public void setTemperaturaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATURA_ISSET_ID, value);
  }

  public long getTipoGlicemia() {
    return this.tipoGlicemia;
  }

  public void setTipoGlicemia(long tipoGlicemia) {
    this.tipoGlicemia = tipoGlicemia;
    setTipoGlicemiaIsSet(true);
  }

  public void unsetTipoGlicemia() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIPOGLICEMIA_ISSET_ID);
  }

  /** Returns true if field tipoGlicemia is set (has been assigned a value) and false otherwise */
  public boolean isSetTipoGlicemia() {
    return EncodingUtils.testBit(__isset_bitfield, __TIPOGLICEMIA_ISSET_ID);
  }

  public void setTipoGlicemiaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIPOGLICEMIA_ISSET_ID, value);
  }

  public int getGlicemia() {
    return this.glicemia;
  }

  public void setGlicemia(int glicemia) {
    this.glicemia = glicemia;
    setGlicemiaIsSet(true);
  }

  public void unsetGlicemia() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GLICEMIA_ISSET_ID);
  }

  /** Returns true if field glicemia is set (has been assigned a value) and false otherwise */
  public boolean isSetGlicemia() {
    return EncodingUtils.testBit(__isset_bitfield, __GLICEMIA_ISSET_ID);
  }

  public void setGlicemiaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GLICEMIA_ISSET_ID, value);
  }

  public double getLatitude() {
    return this.latitude;
  }

  public void setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  public double getLongitude() {
    return this.longitude;
  }

  public void setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  public String getUuidOrigemCadastroDomiciliar() {
    return this.uuidOrigemCadastroDomiciliar;
  }

  public void setUuidOrigemCadastroDomiciliar(String uuidOrigemCadastroDomiciliar) {
    this.uuidOrigemCadastroDomiciliar = uuidOrigemCadastroDomiciliar;
  }

  public void unsetUuidOrigemCadastroDomiciliar() {
    this.uuidOrigemCadastroDomiciliar = null;
  }

  /** Returns true if field uuidOrigemCadastroDomiciliar is set (has been assigned a value) and false otherwise */
  public boolean isSetUuidOrigemCadastroDomiciliar() {
    return this.uuidOrigemCadastroDomiciliar != null;
  }

  public void setUuidOrigemCadastroDomiciliarIsSet(boolean value) {
    if (!value) {
      this.uuidOrigemCadastroDomiciliar = null;
    }
  }

  public br.gov.saude.esusab.ras.common.IvcfThrift getIvcf() {
    return this.ivcf;
  }

  public void setIvcf(br.gov.saude.esusab.ras.common.IvcfThrift ivcf) {
    this.ivcf = ivcf;
  }

  public void unsetIvcf() {
    this.ivcf = null;
  }

  /** Returns true if field ivcf is set (has been assigned a value) and false otherwise */
  public boolean isSetIvcf() {
    return this.ivcf != null;
  }

  public void setIvcfIsSet(boolean value) {
    if (!value) {
      this.ivcf = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TURNO:
      if (value == null) {
        unsetTurno();
      } else {
        setTurno((Long)value);
      }
      break;

    case NUM_PRONTUARIO:
      if (value == null) {
        unsetNumProntuario();
      } else {
        setNumProntuario((String)value);
      }
      break;

    case CNS_CIDADAO:
      if (value == null) {
        unsetCnsCidadao();
      } else {
        setCnsCidadao((String)value);
      }
      break;

    case DT_NASCIMENTO:
      if (value == null) {
        unsetDtNascimento();
      } else {
        setDtNascimento((Long)value);
      }
      break;

    case SEXO:
      if (value == null) {
        unsetSexo();
      } else {
        setSexo((Long)value);
      }
      break;

    case STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL:
      if (value == null) {
        unsetStatusVisitaCompartilhadaOutroProfissional();
      } else {
        setStatusVisitaCompartilhadaOutroProfissional((Boolean)value);
      }
      break;

    case MOTIVOS_VISITA:
      if (value == null) {
        unsetMotivosVisita();
      } else {
        setMotivosVisita((List<Long>)value);
      }
      break;

    case DESFECHO:
      if (value == null) {
        unsetDesfecho();
      } else {
        setDesfecho((Long)value);
      }
      break;

    case MICRO_AREA:
      if (value == null) {
        unsetMicroArea();
      } else {
        setMicroArea((String)value);
      }
      break;

    case ST_FORA_AREA:
      if (value == null) {
        unsetStForaArea();
      } else {
        setStForaArea((Boolean)value);
      }
      break;

    case TIPO_DE_IMOVEL:
      if (value == null) {
        unsetTipoDeImovel();
      } else {
        setTipoDeImovel((Long)value);
      }
      break;

    case PESO_ACOMPANHAMENTO_NUTRICIONAL:
      if (value == null) {
        unsetPesoAcompanhamentoNutricional();
      } else {
        setPesoAcompanhamentoNutricional((Double)value);
      }
      break;

    case ALTURA_ACOMPANHAMENTO_NUTRICIONAL:
      if (value == null) {
        unsetAlturaAcompanhamentoNutricional();
      } else {
        setAlturaAcompanhamentoNutricional((Double)value);
      }
      break;

    case CPF_CIDADAO:
      if (value == null) {
        unsetCpfCidadao();
      } else {
        setCpfCidadao((String)value);
      }
      break;

    case PRESSAO_SISTOLICA:
      if (value == null) {
        unsetPressaoSistolica();
      } else {
        setPressaoSistolica((Integer)value);
      }
      break;

    case PRESSAO_DIASTOLICA:
      if (value == null) {
        unsetPressaoDiastolica();
      } else {
        setPressaoDiastolica((Integer)value);
      }
      break;

    case TEMPERATURA:
      if (value == null) {
        unsetTemperatura();
      } else {
        setTemperatura((Double)value);
      }
      break;

    case TIPO_GLICEMIA:
      if (value == null) {
        unsetTipoGlicemia();
      } else {
        setTipoGlicemia((Long)value);
      }
      break;

    case GLICEMIA:
      if (value == null) {
        unsetGlicemia();
      } else {
        setGlicemia((Integer)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case UUID_ORIGEM_CADASTRO_DOMICILIAR:
      if (value == null) {
        unsetUuidOrigemCadastroDomiciliar();
      } else {
        setUuidOrigemCadastroDomiciliar((String)value);
      }
      break;

    case IVCF:
      if (value == null) {
        unsetIvcf();
      } else {
        setIvcf((br.gov.saude.esusab.ras.common.IvcfThrift)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TURNO:
      return getTurno();

    case NUM_PRONTUARIO:
      return getNumProntuario();

    case CNS_CIDADAO:
      return getCnsCidadao();

    case DT_NASCIMENTO:
      return getDtNascimento();

    case SEXO:
      return getSexo();

    case STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL:
      return isStatusVisitaCompartilhadaOutroProfissional();

    case MOTIVOS_VISITA:
      return getMotivosVisita();

    case DESFECHO:
      return getDesfecho();

    case MICRO_AREA:
      return getMicroArea();

    case ST_FORA_AREA:
      return isStForaArea();

    case TIPO_DE_IMOVEL:
      return getTipoDeImovel();

    case PESO_ACOMPANHAMENTO_NUTRICIONAL:
      return getPesoAcompanhamentoNutricional();

    case ALTURA_ACOMPANHAMENTO_NUTRICIONAL:
      return getAlturaAcompanhamentoNutricional();

    case CPF_CIDADAO:
      return getCpfCidadao();

    case PRESSAO_SISTOLICA:
      return getPressaoSistolica();

    case PRESSAO_DIASTOLICA:
      return getPressaoDiastolica();

    case TEMPERATURA:
      return getTemperatura();

    case TIPO_GLICEMIA:
      return getTipoGlicemia();

    case GLICEMIA:
      return getGlicemia();

    case LATITUDE:
      return getLatitude();

    case LONGITUDE:
      return getLongitude();

    case UUID_ORIGEM_CADASTRO_DOMICILIAR:
      return getUuidOrigemCadastroDomiciliar();

    case IVCF:
      return getIvcf();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TURNO:
      return isSetTurno();
    case NUM_PRONTUARIO:
      return isSetNumProntuario();
    case CNS_CIDADAO:
      return isSetCnsCidadao();
    case DT_NASCIMENTO:
      return isSetDtNascimento();
    case SEXO:
      return isSetSexo();
    case STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL:
      return isSetStatusVisitaCompartilhadaOutroProfissional();
    case MOTIVOS_VISITA:
      return isSetMotivosVisita();
    case DESFECHO:
      return isSetDesfecho();
    case MICRO_AREA:
      return isSetMicroArea();
    case ST_FORA_AREA:
      return isSetStForaArea();
    case TIPO_DE_IMOVEL:
      return isSetTipoDeImovel();
    case PESO_ACOMPANHAMENTO_NUTRICIONAL:
      return isSetPesoAcompanhamentoNutricional();
    case ALTURA_ACOMPANHAMENTO_NUTRICIONAL:
      return isSetAlturaAcompanhamentoNutricional();
    case CPF_CIDADAO:
      return isSetCpfCidadao();
    case PRESSAO_SISTOLICA:
      return isSetPressaoSistolica();
    case PRESSAO_DIASTOLICA:
      return isSetPressaoDiastolica();
    case TEMPERATURA:
      return isSetTemperatura();
    case TIPO_GLICEMIA:
      return isSetTipoGlicemia();
    case GLICEMIA:
      return isSetGlicemia();
    case LATITUDE:
      return isSetLatitude();
    case LONGITUDE:
      return isSetLongitude();
    case UUID_ORIGEM_CADASTRO_DOMICILIAR:
      return isSetUuidOrigemCadastroDomiciliar();
    case IVCF:
      return isSetIvcf();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FichaVisitaDomiciliarChildThrift)
      return this.equals((FichaVisitaDomiciliarChildThrift)that);
    return false;
  }

  public boolean equals(FichaVisitaDomiciliarChildThrift that) {
    if (that == null)
      return false;

    boolean this_present_turno = true && this.isSetTurno();
    boolean that_present_turno = true && that.isSetTurno();
    if (this_present_turno || that_present_turno) {
      if (!(this_present_turno && that_present_turno))
        return false;
      if (this.turno != that.turno)
        return false;
    }

    boolean this_present_numProntuario = true && this.isSetNumProntuario();
    boolean that_present_numProntuario = true && that.isSetNumProntuario();
    if (this_present_numProntuario || that_present_numProntuario) {
      if (!(this_present_numProntuario && that_present_numProntuario))
        return false;
      if (!this.numProntuario.equals(that.numProntuario))
        return false;
    }

    boolean this_present_cnsCidadao = true && this.isSetCnsCidadao();
    boolean that_present_cnsCidadao = true && that.isSetCnsCidadao();
    if (this_present_cnsCidadao || that_present_cnsCidadao) {
      if (!(this_present_cnsCidadao && that_present_cnsCidadao))
        return false;
      if (!this.cnsCidadao.equals(that.cnsCidadao))
        return false;
    }

    boolean this_present_dtNascimento = true && this.isSetDtNascimento();
    boolean that_present_dtNascimento = true && that.isSetDtNascimento();
    if (this_present_dtNascimento || that_present_dtNascimento) {
      if (!(this_present_dtNascimento && that_present_dtNascimento))
        return false;
      if (this.dtNascimento != that.dtNascimento)
        return false;
    }

    boolean this_present_sexo = true && this.isSetSexo();
    boolean that_present_sexo = true && that.isSetSexo();
    if (this_present_sexo || that_present_sexo) {
      if (!(this_present_sexo && that_present_sexo))
        return false;
      if (this.sexo != that.sexo)
        return false;
    }

    boolean this_present_statusVisitaCompartilhadaOutroProfissional = true && this.isSetStatusVisitaCompartilhadaOutroProfissional();
    boolean that_present_statusVisitaCompartilhadaOutroProfissional = true && that.isSetStatusVisitaCompartilhadaOutroProfissional();
    if (this_present_statusVisitaCompartilhadaOutroProfissional || that_present_statusVisitaCompartilhadaOutroProfissional) {
      if (!(this_present_statusVisitaCompartilhadaOutroProfissional && that_present_statusVisitaCompartilhadaOutroProfissional))
        return false;
      if (this.statusVisitaCompartilhadaOutroProfissional != that.statusVisitaCompartilhadaOutroProfissional)
        return false;
    }

    boolean this_present_motivosVisita = true && this.isSetMotivosVisita();
    boolean that_present_motivosVisita = true && that.isSetMotivosVisita();
    if (this_present_motivosVisita || that_present_motivosVisita) {
      if (!(this_present_motivosVisita && that_present_motivosVisita))
        return false;
      if (!this.motivosVisita.equals(that.motivosVisita))
        return false;
    }

    boolean this_present_desfecho = true && this.isSetDesfecho();
    boolean that_present_desfecho = true && that.isSetDesfecho();
    if (this_present_desfecho || that_present_desfecho) {
      if (!(this_present_desfecho && that_present_desfecho))
        return false;
      if (this.desfecho != that.desfecho)
        return false;
    }

    boolean this_present_microArea = true && this.isSetMicroArea();
    boolean that_present_microArea = true && that.isSetMicroArea();
    if (this_present_microArea || that_present_microArea) {
      if (!(this_present_microArea && that_present_microArea))
        return false;
      if (!this.microArea.equals(that.microArea))
        return false;
    }

    boolean this_present_stForaArea = true && this.isSetStForaArea();
    boolean that_present_stForaArea = true && that.isSetStForaArea();
    if (this_present_stForaArea || that_present_stForaArea) {
      if (!(this_present_stForaArea && that_present_stForaArea))
        return false;
      if (this.stForaArea != that.stForaArea)
        return false;
    }

    boolean this_present_tipoDeImovel = true && this.isSetTipoDeImovel();
    boolean that_present_tipoDeImovel = true && that.isSetTipoDeImovel();
    if (this_present_tipoDeImovel || that_present_tipoDeImovel) {
      if (!(this_present_tipoDeImovel && that_present_tipoDeImovel))
        return false;
      if (this.tipoDeImovel != that.tipoDeImovel)
        return false;
    }

    boolean this_present_pesoAcompanhamentoNutricional = true && this.isSetPesoAcompanhamentoNutricional();
    boolean that_present_pesoAcompanhamentoNutricional = true && that.isSetPesoAcompanhamentoNutricional();
    if (this_present_pesoAcompanhamentoNutricional || that_present_pesoAcompanhamentoNutricional) {
      if (!(this_present_pesoAcompanhamentoNutricional && that_present_pesoAcompanhamentoNutricional))
        return false;
      if (this.pesoAcompanhamentoNutricional != that.pesoAcompanhamentoNutricional)
        return false;
    }

    boolean this_present_alturaAcompanhamentoNutricional = true && this.isSetAlturaAcompanhamentoNutricional();
    boolean that_present_alturaAcompanhamentoNutricional = true && that.isSetAlturaAcompanhamentoNutricional();
    if (this_present_alturaAcompanhamentoNutricional || that_present_alturaAcompanhamentoNutricional) {
      if (!(this_present_alturaAcompanhamentoNutricional && that_present_alturaAcompanhamentoNutricional))
        return false;
      if (this.alturaAcompanhamentoNutricional != that.alturaAcompanhamentoNutricional)
        return false;
    }

    boolean this_present_cpfCidadao = true && this.isSetCpfCidadao();
    boolean that_present_cpfCidadao = true && that.isSetCpfCidadao();
    if (this_present_cpfCidadao || that_present_cpfCidadao) {
      if (!(this_present_cpfCidadao && that_present_cpfCidadao))
        return false;
      if (!this.cpfCidadao.equals(that.cpfCidadao))
        return false;
    }

    boolean this_present_pressaoSistolica = true && this.isSetPressaoSistolica();
    boolean that_present_pressaoSistolica = true && that.isSetPressaoSistolica();
    if (this_present_pressaoSistolica || that_present_pressaoSistolica) {
      if (!(this_present_pressaoSistolica && that_present_pressaoSistolica))
        return false;
      if (this.pressaoSistolica != that.pressaoSistolica)
        return false;
    }

    boolean this_present_pressaoDiastolica = true && this.isSetPressaoDiastolica();
    boolean that_present_pressaoDiastolica = true && that.isSetPressaoDiastolica();
    if (this_present_pressaoDiastolica || that_present_pressaoDiastolica) {
      if (!(this_present_pressaoDiastolica && that_present_pressaoDiastolica))
        return false;
      if (this.pressaoDiastolica != that.pressaoDiastolica)
        return false;
    }

    boolean this_present_temperatura = true && this.isSetTemperatura();
    boolean that_present_temperatura = true && that.isSetTemperatura();
    if (this_present_temperatura || that_present_temperatura) {
      if (!(this_present_temperatura && that_present_temperatura))
        return false;
      if (this.temperatura != that.temperatura)
        return false;
    }

    boolean this_present_tipoGlicemia = true && this.isSetTipoGlicemia();
    boolean that_present_tipoGlicemia = true && that.isSetTipoGlicemia();
    if (this_present_tipoGlicemia || that_present_tipoGlicemia) {
      if (!(this_present_tipoGlicemia && that_present_tipoGlicemia))
        return false;
      if (this.tipoGlicemia != that.tipoGlicemia)
        return false;
    }

    boolean this_present_glicemia = true && this.isSetGlicemia();
    boolean that_present_glicemia = true && that.isSetGlicemia();
    if (this_present_glicemia || that_present_glicemia) {
      if (!(this_present_glicemia && that_present_glicemia))
        return false;
      if (this.glicemia != that.glicemia)
        return false;
    }

    boolean this_present_latitude = true && this.isSetLatitude();
    boolean that_present_latitude = true && that.isSetLatitude();
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_longitude = true && this.isSetLongitude();
    boolean that_present_longitude = true && that.isSetLongitude();
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_uuidOrigemCadastroDomiciliar = true && this.isSetUuidOrigemCadastroDomiciliar();
    boolean that_present_uuidOrigemCadastroDomiciliar = true && that.isSetUuidOrigemCadastroDomiciliar();
    if (this_present_uuidOrigemCadastroDomiciliar || that_present_uuidOrigemCadastroDomiciliar) {
      if (!(this_present_uuidOrigemCadastroDomiciliar && that_present_uuidOrigemCadastroDomiciliar))
        return false;
      if (!this.uuidOrigemCadastroDomiciliar.equals(that.uuidOrigemCadastroDomiciliar))
        return false;
    }

    boolean this_present_ivcf = true && this.isSetIvcf();
    boolean that_present_ivcf = true && that.isSetIvcf();
    if (this_present_ivcf || that_present_ivcf) {
      if (!(this_present_ivcf && that_present_ivcf))
        return false;
      if (!this.ivcf.equals(that.ivcf))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_turno = true && (isSetTurno());
    list.add(present_turno);
    if (present_turno)
      list.add(turno);

    boolean present_numProntuario = true && (isSetNumProntuario());
    list.add(present_numProntuario);
    if (present_numProntuario)
      list.add(numProntuario);

    boolean present_cnsCidadao = true && (isSetCnsCidadao());
    list.add(present_cnsCidadao);
    if (present_cnsCidadao)
      list.add(cnsCidadao);

    boolean present_dtNascimento = true && (isSetDtNascimento());
    list.add(present_dtNascimento);
    if (present_dtNascimento)
      list.add(dtNascimento);

    boolean present_sexo = true && (isSetSexo());
    list.add(present_sexo);
    if (present_sexo)
      list.add(sexo);

    boolean present_statusVisitaCompartilhadaOutroProfissional = true && (isSetStatusVisitaCompartilhadaOutroProfissional());
    list.add(present_statusVisitaCompartilhadaOutroProfissional);
    if (present_statusVisitaCompartilhadaOutroProfissional)
      list.add(statusVisitaCompartilhadaOutroProfissional);

    boolean present_motivosVisita = true && (isSetMotivosVisita());
    list.add(present_motivosVisita);
    if (present_motivosVisita)
      list.add(motivosVisita);

    boolean present_desfecho = true && (isSetDesfecho());
    list.add(present_desfecho);
    if (present_desfecho)
      list.add(desfecho);

    boolean present_microArea = true && (isSetMicroArea());
    list.add(present_microArea);
    if (present_microArea)
      list.add(microArea);

    boolean present_stForaArea = true && (isSetStForaArea());
    list.add(present_stForaArea);
    if (present_stForaArea)
      list.add(stForaArea);

    boolean present_tipoDeImovel = true && (isSetTipoDeImovel());
    list.add(present_tipoDeImovel);
    if (present_tipoDeImovel)
      list.add(tipoDeImovel);

    boolean present_pesoAcompanhamentoNutricional = true && (isSetPesoAcompanhamentoNutricional());
    list.add(present_pesoAcompanhamentoNutricional);
    if (present_pesoAcompanhamentoNutricional)
      list.add(pesoAcompanhamentoNutricional);

    boolean present_alturaAcompanhamentoNutricional = true && (isSetAlturaAcompanhamentoNutricional());
    list.add(present_alturaAcompanhamentoNutricional);
    if (present_alturaAcompanhamentoNutricional)
      list.add(alturaAcompanhamentoNutricional);

    boolean present_cpfCidadao = true && (isSetCpfCidadao());
    list.add(present_cpfCidadao);
    if (present_cpfCidadao)
      list.add(cpfCidadao);

    boolean present_pressaoSistolica = true && (isSetPressaoSistolica());
    list.add(present_pressaoSistolica);
    if (present_pressaoSistolica)
      list.add(pressaoSistolica);

    boolean present_pressaoDiastolica = true && (isSetPressaoDiastolica());
    list.add(present_pressaoDiastolica);
    if (present_pressaoDiastolica)
      list.add(pressaoDiastolica);

    boolean present_temperatura = true && (isSetTemperatura());
    list.add(present_temperatura);
    if (present_temperatura)
      list.add(temperatura);

    boolean present_tipoGlicemia = true && (isSetTipoGlicemia());
    list.add(present_tipoGlicemia);
    if (present_tipoGlicemia)
      list.add(tipoGlicemia);

    boolean present_glicemia = true && (isSetGlicemia());
    list.add(present_glicemia);
    if (present_glicemia)
      list.add(glicemia);

    boolean present_latitude = true && (isSetLatitude());
    list.add(present_latitude);
    if (present_latitude)
      list.add(latitude);

    boolean present_longitude = true && (isSetLongitude());
    list.add(present_longitude);
    if (present_longitude)
      list.add(longitude);

    boolean present_uuidOrigemCadastroDomiciliar = true && (isSetUuidOrigemCadastroDomiciliar());
    list.add(present_uuidOrigemCadastroDomiciliar);
    if (present_uuidOrigemCadastroDomiciliar)
      list.add(uuidOrigemCadastroDomiciliar);

    boolean present_ivcf = true && (isSetIvcf());
    list.add(present_ivcf);
    if (present_ivcf)
      list.add(ivcf);

    return list.hashCode();
  }

  @Override
  public int compareTo(FichaVisitaDomiciliarChildThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTurno()).compareTo(other.isSetTurno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turno, other.turno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumProntuario()).compareTo(other.isSetNumProntuario());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumProntuario()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numProntuario, other.numProntuario);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnsCidadao()).compareTo(other.isSetCnsCidadao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnsCidadao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnsCidadao, other.cnsCidadao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDtNascimento()).compareTo(other.isSetDtNascimento());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtNascimento()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtNascimento, other.dtNascimento);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexo()).compareTo(other.isSetSexo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexo, other.sexo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusVisitaCompartilhadaOutroProfissional()).compareTo(other.isSetStatusVisitaCompartilhadaOutroProfissional());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusVisitaCompartilhadaOutroProfissional()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusVisitaCompartilhadaOutroProfissional, other.statusVisitaCompartilhadaOutroProfissional);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMotivosVisita()).compareTo(other.isSetMotivosVisita());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMotivosVisita()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.motivosVisita, other.motivosVisita);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesfecho()).compareTo(other.isSetDesfecho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesfecho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desfecho, other.desfecho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMicroArea()).compareTo(other.isSetMicroArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMicroArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.microArea, other.microArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStForaArea()).compareTo(other.isSetStForaArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStForaArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stForaArea, other.stForaArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipoDeImovel()).compareTo(other.isSetTipoDeImovel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipoDeImovel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoDeImovel, other.tipoDeImovel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPesoAcompanhamentoNutricional()).compareTo(other.isSetPesoAcompanhamentoNutricional());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPesoAcompanhamentoNutricional()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pesoAcompanhamentoNutricional, other.pesoAcompanhamentoNutricional);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlturaAcompanhamentoNutricional()).compareTo(other.isSetAlturaAcompanhamentoNutricional());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlturaAcompanhamentoNutricional()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alturaAcompanhamentoNutricional, other.alturaAcompanhamentoNutricional);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpfCidadao()).compareTo(other.isSetCpfCidadao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpfCidadao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpfCidadao, other.cpfCidadao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPressaoSistolica()).compareTo(other.isSetPressaoSistolica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressaoSistolica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressaoSistolica, other.pressaoSistolica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPressaoDiastolica()).compareTo(other.isSetPressaoDiastolica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPressaoDiastolica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pressaoDiastolica, other.pressaoDiastolica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperatura()).compareTo(other.isSetTemperatura());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperatura()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperatura, other.temperatura);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTipoGlicemia()).compareTo(other.isSetTipoGlicemia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTipoGlicemia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tipoGlicemia, other.tipoGlicemia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlicemia()).compareTo(other.isSetGlicemia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlicemia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.glicemia, other.glicemia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuidOrigemCadastroDomiciliar()).compareTo(other.isSetUuidOrigemCadastroDomiciliar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuidOrigemCadastroDomiciliar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuidOrigemCadastroDomiciliar, other.uuidOrigemCadastroDomiciliar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIvcf()).compareTo(other.isSetIvcf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIvcf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ivcf, other.ivcf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FichaVisitaDomiciliarChildThrift(");
    boolean first = true;

    if (isSetTurno()) {
      sb.append("turno:");
      sb.append(this.turno);
      first = false;
    }
    if (isSetNumProntuario()) {
      if (!first) sb.append(", ");
      sb.append("numProntuario:");
      if (this.numProntuario == null) {
        sb.append("null");
      } else {
        sb.append(this.numProntuario);
      }
      first = false;
    }
    if (isSetCnsCidadao()) {
      if (!first) sb.append(", ");
      sb.append("cnsCidadao:");
      if (this.cnsCidadao == null) {
        sb.append("null");
      } else {
        sb.append(this.cnsCidadao);
      }
      first = false;
    }
    if (isSetDtNascimento()) {
      if (!first) sb.append(", ");
      sb.append("dtNascimento:");
      sb.append(this.dtNascimento);
      first = false;
    }
    if (isSetSexo()) {
      if (!first) sb.append(", ");
      sb.append("sexo:");
      sb.append(this.sexo);
      first = false;
    }
    if (isSetStatusVisitaCompartilhadaOutroProfissional()) {
      if (!first) sb.append(", ");
      sb.append("statusVisitaCompartilhadaOutroProfissional:");
      sb.append(this.statusVisitaCompartilhadaOutroProfissional);
      first = false;
    }
    if (isSetMotivosVisita()) {
      if (!first) sb.append(", ");
      sb.append("motivosVisita:");
      if (this.motivosVisita == null) {
        sb.append("null");
      } else {
        sb.append(this.motivosVisita);
      }
      first = false;
    }
    if (isSetDesfecho()) {
      if (!first) sb.append(", ");
      sb.append("desfecho:");
      sb.append(this.desfecho);
      first = false;
    }
    if (isSetMicroArea()) {
      if (!first) sb.append(", ");
      sb.append("microArea:");
      if (this.microArea == null) {
        sb.append("null");
      } else {
        sb.append(this.microArea);
      }
      first = false;
    }
    if (isSetStForaArea()) {
      if (!first) sb.append(", ");
      sb.append("stForaArea:");
      sb.append(this.stForaArea);
      first = false;
    }
    if (isSetTipoDeImovel()) {
      if (!first) sb.append(", ");
      sb.append("tipoDeImovel:");
      sb.append(this.tipoDeImovel);
      first = false;
    }
    if (isSetPesoAcompanhamentoNutricional()) {
      if (!first) sb.append(", ");
      sb.append("pesoAcompanhamentoNutricional:");
      sb.append(this.pesoAcompanhamentoNutricional);
      first = false;
    }
    if (isSetAlturaAcompanhamentoNutricional()) {
      if (!first) sb.append(", ");
      sb.append("alturaAcompanhamentoNutricional:");
      sb.append(this.alturaAcompanhamentoNutricional);
      first = false;
    }
    if (isSetCpfCidadao()) {
      if (!first) sb.append(", ");
      sb.append("cpfCidadao:");
      if (this.cpfCidadao == null) {
        sb.append("null");
      } else {
        sb.append(this.cpfCidadao);
      }
      first = false;
    }
    if (isSetPressaoSistolica()) {
      if (!first) sb.append(", ");
      sb.append("pressaoSistolica:");
      sb.append(this.pressaoSistolica);
      first = false;
    }
    if (isSetPressaoDiastolica()) {
      if (!first) sb.append(", ");
      sb.append("pressaoDiastolica:");
      sb.append(this.pressaoDiastolica);
      first = false;
    }
    if (isSetTemperatura()) {
      if (!first) sb.append(", ");
      sb.append("temperatura:");
      sb.append(this.temperatura);
      first = false;
    }
    if (isSetTipoGlicemia()) {
      if (!first) sb.append(", ");
      sb.append("tipoGlicemia:");
      sb.append(this.tipoGlicemia);
      first = false;
    }
    if (isSetGlicemia()) {
      if (!first) sb.append(", ");
      sb.append("glicemia:");
      sb.append(this.glicemia);
      first = false;
    }
    if (isSetLatitude()) {
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
    }
    if (isSetLongitude()) {
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
    }
    if (isSetUuidOrigemCadastroDomiciliar()) {
      if (!first) sb.append(", ");
      sb.append("uuidOrigemCadastroDomiciliar:");
      if (this.uuidOrigemCadastroDomiciliar == null) {
        sb.append("null");
      } else {
        sb.append(this.uuidOrigemCadastroDomiciliar);
      }
      first = false;
    }
    if (isSetIvcf()) {
      if (!first) sb.append(", ");
      sb.append("ivcf:");
      if (this.ivcf == null) {
        sb.append("null");
      } else {
        sb.append(this.ivcf);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ivcf != null) {
      ivcf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FichaVisitaDomiciliarChildThriftStandardSchemeFactory implements SchemeFactory {
    public FichaVisitaDomiciliarChildThriftStandardScheme getScheme() {
      return new FichaVisitaDomiciliarChildThriftStandardScheme();
    }
  }

  private static class FichaVisitaDomiciliarChildThriftStandardScheme extends StandardScheme<FichaVisitaDomiciliarChildThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FichaVisitaDomiciliarChildThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TURNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.turno = iprot.readI64();
              struct.setTurnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_PRONTUARIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.numProntuario = iprot.readString();
              struct.setNumProntuarioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CNS_CIDADAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnsCidadao = iprot.readString();
              struct.setCnsCidadaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DT_NASCIMENTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dtNascimento = iprot.readI64();
              struct.setDtNascimentoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEXO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sexo = iprot.readI64();
              struct.setSexoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusVisitaCompartilhadaOutroProfissional = iprot.readBool();
              struct.setStatusVisitaCompartilhadaOutroProfissionalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOTIVOS_VISITA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.motivosVisita = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.motivosVisita.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMotivosVisitaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESFECHO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.desfecho = iprot.readI64();
              struct.setDesfechoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MICRO_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.microArea = iprot.readString();
              struct.setMicroAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ST_FORA_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stForaArea = iprot.readBool();
              struct.setStForaAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIPO_DE_IMOVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tipoDeImovel = iprot.readI64();
              struct.setTipoDeImovelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PESO_ACOMPANHAMENTO_NUTRICIONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pesoAcompanhamentoNutricional = iprot.readDouble();
              struct.setPesoAcompanhamentoNutricionalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ALTURA_ACOMPANHAMENTO_NUTRICIONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.alturaAcompanhamentoNutricional = iprot.readDouble();
              struct.setAlturaAcompanhamentoNutricionalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CPF_CIDADAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpfCidadao = iprot.readString();
              struct.setCpfCidadaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRESSAO_SISTOLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pressaoSistolica = iprot.readI32();
              struct.setPressaoSistolicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRESSAO_DIASTOLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pressaoDiastolica = iprot.readI32();
              struct.setPressaoDiastolicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TEMPERATURA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperatura = iprot.readDouble();
              struct.setTemperaturaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TIPO_GLICEMIA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tipoGlicemia = iprot.readI64();
              struct.setTipoGlicemiaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GLICEMIA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.glicemia = iprot.readI32();
              struct.setGlicemiaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UUID_ORIGEM_CADASTRO_DOMICILIAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuidOrigemCadastroDomiciliar = iprot.readString();
              struct.setUuidOrigemCadastroDomiciliarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IVCF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ivcf = new br.gov.saude.esusab.ras.common.IvcfThrift();
              struct.ivcf.read(iprot);
              struct.setIvcfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FichaVisitaDomiciliarChildThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTurno()) {
        oprot.writeFieldBegin(TURNO_FIELD_DESC);
        oprot.writeI64(struct.turno);
        oprot.writeFieldEnd();
      }
      if (struct.numProntuario != null) {
        if (struct.isSetNumProntuario()) {
          oprot.writeFieldBegin(NUM_PRONTUARIO_FIELD_DESC);
          oprot.writeString(struct.numProntuario);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnsCidadao != null) {
        if (struct.isSetCnsCidadao()) {
          oprot.writeFieldBegin(CNS_CIDADAO_FIELD_DESC);
          oprot.writeString(struct.cnsCidadao);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDtNascimento()) {
        oprot.writeFieldBegin(DT_NASCIMENTO_FIELD_DESC);
        oprot.writeI64(struct.dtNascimento);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSexo()) {
        oprot.writeFieldBegin(SEXO_FIELD_DESC);
        oprot.writeI64(struct.sexo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusVisitaCompartilhadaOutroProfissional()) {
        oprot.writeFieldBegin(STATUS_VISITA_COMPARTILHADA_OUTRO_PROFISSIONAL_FIELD_DESC);
        oprot.writeBool(struct.statusVisitaCompartilhadaOutroProfissional);
        oprot.writeFieldEnd();
      }
      if (struct.motivosVisita != null) {
        if (struct.isSetMotivosVisita()) {
          oprot.writeFieldBegin(MOTIVOS_VISITA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.motivosVisita.size()));
            for (long _iter3 : struct.motivosVisita)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDesfecho()) {
        oprot.writeFieldBegin(DESFECHO_FIELD_DESC);
        oprot.writeI64(struct.desfecho);
        oprot.writeFieldEnd();
      }
      if (struct.microArea != null) {
        if (struct.isSetMicroArea()) {
          oprot.writeFieldBegin(MICRO_AREA_FIELD_DESC);
          oprot.writeString(struct.microArea);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStForaArea()) {
        oprot.writeFieldBegin(ST_FORA_AREA_FIELD_DESC);
        oprot.writeBool(struct.stForaArea);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTipoDeImovel()) {
        oprot.writeFieldBegin(TIPO_DE_IMOVEL_FIELD_DESC);
        oprot.writeI64(struct.tipoDeImovel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPesoAcompanhamentoNutricional()) {
        oprot.writeFieldBegin(PESO_ACOMPANHAMENTO_NUTRICIONAL_FIELD_DESC);
        oprot.writeDouble(struct.pesoAcompanhamentoNutricional);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAlturaAcompanhamentoNutricional()) {
        oprot.writeFieldBegin(ALTURA_ACOMPANHAMENTO_NUTRICIONAL_FIELD_DESC);
        oprot.writeDouble(struct.alturaAcompanhamentoNutricional);
        oprot.writeFieldEnd();
      }
      if (struct.cpfCidadao != null) {
        if (struct.isSetCpfCidadao()) {
          oprot.writeFieldBegin(CPF_CIDADAO_FIELD_DESC);
          oprot.writeString(struct.cpfCidadao);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPressaoSistolica()) {
        oprot.writeFieldBegin(PRESSAO_SISTOLICA_FIELD_DESC);
        oprot.writeI32(struct.pressaoSistolica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPressaoDiastolica()) {
        oprot.writeFieldBegin(PRESSAO_DIASTOLICA_FIELD_DESC);
        oprot.writeI32(struct.pressaoDiastolica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTemperatura()) {
        oprot.writeFieldBegin(TEMPERATURA_FIELD_DESC);
        oprot.writeDouble(struct.temperatura);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTipoGlicemia()) {
        oprot.writeFieldBegin(TIPO_GLICEMIA_FIELD_DESC);
        oprot.writeI64(struct.tipoGlicemia);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGlicemia()) {
        oprot.writeFieldBegin(GLICEMIA_FIELD_DESC);
        oprot.writeI32(struct.glicemia);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatitude()) {
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongitude()) {
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
      }
      if (struct.uuidOrigemCadastroDomiciliar != null) {
        if (struct.isSetUuidOrigemCadastroDomiciliar()) {
          oprot.writeFieldBegin(UUID_ORIGEM_CADASTRO_DOMICILIAR_FIELD_DESC);
          oprot.writeString(struct.uuidOrigemCadastroDomiciliar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ivcf != null) {
        if (struct.isSetIvcf()) {
          oprot.writeFieldBegin(IVCF_FIELD_DESC);
          struct.ivcf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FichaVisitaDomiciliarChildThriftTupleSchemeFactory implements SchemeFactory {
    public FichaVisitaDomiciliarChildThriftTupleScheme getScheme() {
      return new FichaVisitaDomiciliarChildThriftTupleScheme();
    }
  }

  private static class FichaVisitaDomiciliarChildThriftTupleScheme extends TupleScheme<FichaVisitaDomiciliarChildThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FichaVisitaDomiciliarChildThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTurno()) {
        optionals.set(0);
      }
      if (struct.isSetNumProntuario()) {
        optionals.set(1);
      }
      if (struct.isSetCnsCidadao()) {
        optionals.set(2);
      }
      if (struct.isSetDtNascimento()) {
        optionals.set(3);
      }
      if (struct.isSetSexo()) {
        optionals.set(4);
      }
      if (struct.isSetStatusVisitaCompartilhadaOutroProfissional()) {
        optionals.set(5);
      }
      if (struct.isSetMotivosVisita()) {
        optionals.set(6);
      }
      if (struct.isSetDesfecho()) {
        optionals.set(7);
      }
      if (struct.isSetMicroArea()) {
        optionals.set(8);
      }
      if (struct.isSetStForaArea()) {
        optionals.set(9);
      }
      if (struct.isSetTipoDeImovel()) {
        optionals.set(10);
      }
      if (struct.isSetPesoAcompanhamentoNutricional()) {
        optionals.set(11);
      }
      if (struct.isSetAlturaAcompanhamentoNutricional()) {
        optionals.set(12);
      }
      if (struct.isSetCpfCidadao()) {
        optionals.set(13);
      }
      if (struct.isSetPressaoSistolica()) {
        optionals.set(14);
      }
      if (struct.isSetPressaoDiastolica()) {
        optionals.set(15);
      }
      if (struct.isSetTemperatura()) {
        optionals.set(16);
      }
      if (struct.isSetTipoGlicemia()) {
        optionals.set(17);
      }
      if (struct.isSetGlicemia()) {
        optionals.set(18);
      }
      if (struct.isSetLatitude()) {
        optionals.set(19);
      }
      if (struct.isSetLongitude()) {
        optionals.set(20);
      }
      if (struct.isSetUuidOrigemCadastroDomiciliar()) {
        optionals.set(21);
      }
      if (struct.isSetIvcf()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetTurno()) {
        oprot.writeI64(struct.turno);
      }
      if (struct.isSetNumProntuario()) {
        oprot.writeString(struct.numProntuario);
      }
      if (struct.isSetCnsCidadao()) {
        oprot.writeString(struct.cnsCidadao);
      }
      if (struct.isSetDtNascimento()) {
        oprot.writeI64(struct.dtNascimento);
      }
      if (struct.isSetSexo()) {
        oprot.writeI64(struct.sexo);
      }
      if (struct.isSetStatusVisitaCompartilhadaOutroProfissional()) {
        oprot.writeBool(struct.statusVisitaCompartilhadaOutroProfissional);
      }
      if (struct.isSetMotivosVisita()) {
        {
          oprot.writeI32(struct.motivosVisita.size());
          for (long _iter4 : struct.motivosVisita)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetDesfecho()) {
        oprot.writeI64(struct.desfecho);
      }
      if (struct.isSetMicroArea()) {
        oprot.writeString(struct.microArea);
      }
      if (struct.isSetStForaArea()) {
        oprot.writeBool(struct.stForaArea);
      }
      if (struct.isSetTipoDeImovel()) {
        oprot.writeI64(struct.tipoDeImovel);
      }
      if (struct.isSetPesoAcompanhamentoNutricional()) {
        oprot.writeDouble(struct.pesoAcompanhamentoNutricional);
      }
      if (struct.isSetAlturaAcompanhamentoNutricional()) {
        oprot.writeDouble(struct.alturaAcompanhamentoNutricional);
      }
      if (struct.isSetCpfCidadao()) {
        oprot.writeString(struct.cpfCidadao);
      }
      if (struct.isSetPressaoSistolica()) {
        oprot.writeI32(struct.pressaoSistolica);
      }
      if (struct.isSetPressaoDiastolica()) {
        oprot.writeI32(struct.pressaoDiastolica);
      }
      if (struct.isSetTemperatura()) {
        oprot.writeDouble(struct.temperatura);
      }
      if (struct.isSetTipoGlicemia()) {
        oprot.writeI64(struct.tipoGlicemia);
      }
      if (struct.isSetGlicemia()) {
        oprot.writeI32(struct.glicemia);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetUuidOrigemCadastroDomiciliar()) {
        oprot.writeString(struct.uuidOrigemCadastroDomiciliar);
      }
      if (struct.isSetIvcf()) {
        struct.ivcf.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FichaVisitaDomiciliarChildThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.turno = iprot.readI64();
        struct.setTurnoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numProntuario = iprot.readString();
        struct.setNumProntuarioIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cnsCidadao = iprot.readString();
        struct.setCnsCidadaoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dtNascimento = iprot.readI64();
        struct.setDtNascimentoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sexo = iprot.readI64();
        struct.setSexoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.statusVisitaCompartilhadaOutroProfissional = iprot.readBool();
        struct.setStatusVisitaCompartilhadaOutroProfissionalIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.motivosVisita = new ArrayList<Long>(_list5.size);
          long _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI64();
            struct.motivosVisita.add(_elem6);
          }
        }
        struct.setMotivosVisitaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.desfecho = iprot.readI64();
        struct.setDesfechoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.microArea = iprot.readString();
        struct.setMicroAreaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stForaArea = iprot.readBool();
        struct.setStForaAreaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tipoDeImovel = iprot.readI64();
        struct.setTipoDeImovelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pesoAcompanhamentoNutricional = iprot.readDouble();
        struct.setPesoAcompanhamentoNutricionalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.alturaAcompanhamentoNutricional = iprot.readDouble();
        struct.setAlturaAcompanhamentoNutricionalIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cpfCidadao = iprot.readString();
        struct.setCpfCidadaoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pressaoSistolica = iprot.readI32();
        struct.setPressaoSistolicaIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pressaoDiastolica = iprot.readI32();
        struct.setPressaoDiastolicaIsSet(true);
      }
      if (incoming.get(16)) {
        struct.temperatura = iprot.readDouble();
        struct.setTemperaturaIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tipoGlicemia = iprot.readI64();
        struct.setTipoGlicemiaIsSet(true);
      }
      if (incoming.get(18)) {
        struct.glicemia = iprot.readI32();
        struct.setGlicemiaIsSet(true);
      }
      if (incoming.get(19)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.uuidOrigemCadastroDomiciliar = iprot.readString();
        struct.setUuidOrigemCadastroDomiciliarIsSet(true);
      }
      if (incoming.get(22)) {
        struct.ivcf = new br.gov.saude.esusab.ras.common.IvcfThrift();
        struct.ivcf.read(iprot);
        struct.setIvcfIsSet(true);
      }
    }
  }

}

