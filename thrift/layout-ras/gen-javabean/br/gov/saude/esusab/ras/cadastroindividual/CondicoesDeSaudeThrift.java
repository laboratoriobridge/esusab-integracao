/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.cadastroindividual;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-07")
public class CondicoesDeSaudeThrift implements org.apache.thrift.TBase<CondicoesDeSaudeThrift, CondicoesDeSaudeThrift._Fields>, java.io.Serializable, Cloneable, Comparable<CondicoesDeSaudeThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CondicoesDeSaudeThrift");

  private static final org.apache.thrift.protocol.TField DESCRICAO_CAUSA_INTERNACAO_EM12_MESES_FIELD_DESC = new org.apache.thrift.protocol.TField("descricaoCausaInternacaoEm12Meses", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRICAO_OUTRA_CONDICAO1_FIELD_DESC = new org.apache.thrift.protocol.TField("descricaoOutraCondicao1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRICAO_OUTRA_CONDICAO2_FIELD_DESC = new org.apache.thrift.protocol.TField("descricaoOutraCondicao2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRICAO_OUTRA_CONDICAO3_FIELD_DESC = new org.apache.thrift.protocol.TField("descricaoOutraCondicao3", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRICAO_PLANTAS_MEDICINAIS_USADAS_FIELD_DESC = new org.apache.thrift.protocol.TField("descricaoPlantasMedicinaisUsadas", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DOENCA_CARDIACA_FIELD_DESC = new org.apache.thrift.protocol.TField("doencaCardiaca", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField DOENCA_RESPIRATORIA_FIELD_DESC = new org.apache.thrift.protocol.TField("doencaRespiratoria", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DOENCA_RINS_FIELD_DESC = new org.apache.thrift.protocol.TField("doencaRins", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MATERNIDADE_DE_REFERENCIA_FIELD_DESC = new org.apache.thrift.protocol.TField("maternidadeDeReferencia", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SITUACAO_PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("situacaoPeso", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_EH_DEPENDENTE_ALCOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEhDependenteAlcool", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_EH_DEPENDENTE_OUTRAS_DROGAS_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEhDependenteOutrasDrogas", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_EH_FUMANTE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEhFumante", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_EH_GESTANTE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEhGestante", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_ESTA_ACAMADO_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEstaAcamado", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_ESTA_DOMICILIADO_FIELD_DESC = new org.apache.thrift.protocol.TField("statusEstaDomiciliado", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_DIABETES_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemDiabetes", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_DOENCA_RESPIRATORIA_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemDoencaRespiratoria", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_HANSENIASE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemHanseniase", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_HIPERTENSAO_ARTERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemHipertensaoArterial", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_TEVE_CANCER_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemTeveCancer", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_TEVE_DOENCAS_RINS_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemTeveDoencasRins", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField STATUS_TEM_TUBERCULOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTemTuberculose", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField STATUS_TEVE_AVC_DERRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTeveAvcDerrame", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField STATUS_TEVE_DOENCA_CARDIACA_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTeveDoencaCardiaca", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField STATUS_TEVE_INFARTO_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTeveInfarto", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField STATUS_TEVE_INTERNADO_EM12_MESES_FIELD_DESC = new org.apache.thrift.protocol.TField("statusTeveInternadoEm12Meses", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES_FIELD_DESC = new org.apache.thrift.protocol.TField("statusUsaOutrasPraticasIntegrativasOuComplementares", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField STATUS_USA_PLANTA_MEDICINAIS_FIELD_DESC = new org.apache.thrift.protocol.TField("statusUsaPlantaMedicinais", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField STATUS_DIAGNOSTICO_MENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("statusDiagnosticoMental", org.apache.thrift.protocol.TType.BOOL, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CondicoesDeSaudeThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CondicoesDeSaudeThriftTupleSchemeFactory());
  }

  private String descricaoCausaInternacaoEm12Meses; // optional
  private String descricaoOutraCondicao1; // optional
  private String descricaoOutraCondicao2; // optional
  private String descricaoOutraCondicao3; // optional
  private String descricaoPlantasMedicinaisUsadas; // optional
  private List<Long> doencaCardiaca; // optional
  private List<Long> doencaRespiratoria; // optional
  private List<Long> doencaRins; // optional
  private String maternidadeDeReferencia; // optional
  private long situacaoPeso; // optional
  private boolean statusEhDependenteAlcool; // optional
  private boolean statusEhDependenteOutrasDrogas; // optional
  private boolean statusEhFumante; // optional
  private boolean statusEhGestante; // optional
  private boolean statusEstaAcamado; // optional
  private boolean statusEstaDomiciliado; // optional
  private boolean statusTemDiabetes; // optional
  private boolean statusTemDoencaRespiratoria; // optional
  private boolean statusTemHanseniase; // optional
  private boolean statusTemHipertensaoArterial; // optional
  private boolean statusTemTeveCancer; // optional
  private boolean statusTemTeveDoencasRins; // optional
  private boolean statusTemTuberculose; // optional
  private boolean statusTeveAvcDerrame; // optional
  private boolean statusTeveDoencaCardiaca; // optional
  private boolean statusTeveInfarto; // optional
  private boolean statusTeveInternadoEm12Meses; // optional
  private boolean statusUsaOutrasPraticasIntegrativasOuComplementares; // optional
  private boolean statusUsaPlantaMedicinais; // optional
  private boolean statusDiagnosticoMental; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESCRICAO_CAUSA_INTERNACAO_EM12_MESES((short)1, "descricaoCausaInternacaoEm12Meses"),
    DESCRICAO_OUTRA_CONDICAO1((short)2, "descricaoOutraCondicao1"),
    DESCRICAO_OUTRA_CONDICAO2((short)3, "descricaoOutraCondicao2"),
    DESCRICAO_OUTRA_CONDICAO3((short)4, "descricaoOutraCondicao3"),
    DESCRICAO_PLANTAS_MEDICINAIS_USADAS((short)5, "descricaoPlantasMedicinaisUsadas"),
    DOENCA_CARDIACA((short)6, "doencaCardiaca"),
    DOENCA_RESPIRATORIA((short)7, "doencaRespiratoria"),
    DOENCA_RINS((short)8, "doencaRins"),
    MATERNIDADE_DE_REFERENCIA((short)9, "maternidadeDeReferencia"),
    SITUACAO_PESO((short)10, "situacaoPeso"),
    STATUS_EH_DEPENDENTE_ALCOOL((short)11, "statusEhDependenteAlcool"),
    STATUS_EH_DEPENDENTE_OUTRAS_DROGAS((short)12, "statusEhDependenteOutrasDrogas"),
    STATUS_EH_FUMANTE((short)13, "statusEhFumante"),
    STATUS_EH_GESTANTE((short)14, "statusEhGestante"),
    STATUS_ESTA_ACAMADO((short)15, "statusEstaAcamado"),
    STATUS_ESTA_DOMICILIADO((short)16, "statusEstaDomiciliado"),
    STATUS_TEM_DIABETES((short)17, "statusTemDiabetes"),
    STATUS_TEM_DOENCA_RESPIRATORIA((short)18, "statusTemDoencaRespiratoria"),
    STATUS_TEM_HANSENIASE((short)19, "statusTemHanseniase"),
    STATUS_TEM_HIPERTENSAO_ARTERIAL((short)20, "statusTemHipertensaoArterial"),
    STATUS_TEM_TEVE_CANCER((short)21, "statusTemTeveCancer"),
    STATUS_TEM_TEVE_DOENCAS_RINS((short)22, "statusTemTeveDoencasRins"),
    STATUS_TEM_TUBERCULOSE((short)23, "statusTemTuberculose"),
    STATUS_TEVE_AVC_DERRAME((short)24, "statusTeveAvcDerrame"),
    STATUS_TEVE_DOENCA_CARDIACA((short)25, "statusTeveDoencaCardiaca"),
    STATUS_TEVE_INFARTO((short)26, "statusTeveInfarto"),
    STATUS_TEVE_INTERNADO_EM12_MESES((short)27, "statusTeveInternadoEm12Meses"),
    STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES((short)29, "statusUsaOutrasPraticasIntegrativasOuComplementares"),
    STATUS_USA_PLANTA_MEDICINAIS((short)30, "statusUsaPlantaMedicinais"),
    STATUS_DIAGNOSTICO_MENTAL((short)31, "statusDiagnosticoMental");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESCRICAO_CAUSA_INTERNACAO_EM12_MESES
          return DESCRICAO_CAUSA_INTERNACAO_EM12_MESES;
        case 2: // DESCRICAO_OUTRA_CONDICAO1
          return DESCRICAO_OUTRA_CONDICAO1;
        case 3: // DESCRICAO_OUTRA_CONDICAO2
          return DESCRICAO_OUTRA_CONDICAO2;
        case 4: // DESCRICAO_OUTRA_CONDICAO3
          return DESCRICAO_OUTRA_CONDICAO3;
        case 5: // DESCRICAO_PLANTAS_MEDICINAIS_USADAS
          return DESCRICAO_PLANTAS_MEDICINAIS_USADAS;
        case 6: // DOENCA_CARDIACA
          return DOENCA_CARDIACA;
        case 7: // DOENCA_RESPIRATORIA
          return DOENCA_RESPIRATORIA;
        case 8: // DOENCA_RINS
          return DOENCA_RINS;
        case 9: // MATERNIDADE_DE_REFERENCIA
          return MATERNIDADE_DE_REFERENCIA;
        case 10: // SITUACAO_PESO
          return SITUACAO_PESO;
        case 11: // STATUS_EH_DEPENDENTE_ALCOOL
          return STATUS_EH_DEPENDENTE_ALCOOL;
        case 12: // STATUS_EH_DEPENDENTE_OUTRAS_DROGAS
          return STATUS_EH_DEPENDENTE_OUTRAS_DROGAS;
        case 13: // STATUS_EH_FUMANTE
          return STATUS_EH_FUMANTE;
        case 14: // STATUS_EH_GESTANTE
          return STATUS_EH_GESTANTE;
        case 15: // STATUS_ESTA_ACAMADO
          return STATUS_ESTA_ACAMADO;
        case 16: // STATUS_ESTA_DOMICILIADO
          return STATUS_ESTA_DOMICILIADO;
        case 17: // STATUS_TEM_DIABETES
          return STATUS_TEM_DIABETES;
        case 18: // STATUS_TEM_DOENCA_RESPIRATORIA
          return STATUS_TEM_DOENCA_RESPIRATORIA;
        case 19: // STATUS_TEM_HANSENIASE
          return STATUS_TEM_HANSENIASE;
        case 20: // STATUS_TEM_HIPERTENSAO_ARTERIAL
          return STATUS_TEM_HIPERTENSAO_ARTERIAL;
        case 21: // STATUS_TEM_TEVE_CANCER
          return STATUS_TEM_TEVE_CANCER;
        case 22: // STATUS_TEM_TEVE_DOENCAS_RINS
          return STATUS_TEM_TEVE_DOENCAS_RINS;
        case 23: // STATUS_TEM_TUBERCULOSE
          return STATUS_TEM_TUBERCULOSE;
        case 24: // STATUS_TEVE_AVC_DERRAME
          return STATUS_TEVE_AVC_DERRAME;
        case 25: // STATUS_TEVE_DOENCA_CARDIACA
          return STATUS_TEVE_DOENCA_CARDIACA;
        case 26: // STATUS_TEVE_INFARTO
          return STATUS_TEVE_INFARTO;
        case 27: // STATUS_TEVE_INTERNADO_EM12_MESES
          return STATUS_TEVE_INTERNADO_EM12_MESES;
        case 29: // STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES
          return STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES;
        case 30: // STATUS_USA_PLANTA_MEDICINAIS
          return STATUS_USA_PLANTA_MEDICINAIS;
        case 31: // STATUS_DIAGNOSTICO_MENTAL
          return STATUS_DIAGNOSTICO_MENTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SITUACAOPESO_ISSET_ID = 0;
  private static final int __STATUSEHDEPENDENTEALCOOL_ISSET_ID = 1;
  private static final int __STATUSEHDEPENDENTEOUTRASDROGAS_ISSET_ID = 2;
  private static final int __STATUSEHFUMANTE_ISSET_ID = 3;
  private static final int __STATUSEHGESTANTE_ISSET_ID = 4;
  private static final int __STATUSESTAACAMADO_ISSET_ID = 5;
  private static final int __STATUSESTADOMICILIADO_ISSET_ID = 6;
  private static final int __STATUSTEMDIABETES_ISSET_ID = 7;
  private static final int __STATUSTEMDOENCARESPIRATORIA_ISSET_ID = 8;
  private static final int __STATUSTEMHANSENIASE_ISSET_ID = 9;
  private static final int __STATUSTEMHIPERTENSAOARTERIAL_ISSET_ID = 10;
  private static final int __STATUSTEMTEVECANCER_ISSET_ID = 11;
  private static final int __STATUSTEMTEVEDOENCASRINS_ISSET_ID = 12;
  private static final int __STATUSTEMTUBERCULOSE_ISSET_ID = 13;
  private static final int __STATUSTEVEAVCDERRAME_ISSET_ID = 14;
  private static final int __STATUSTEVEDOENCACARDIACA_ISSET_ID = 15;
  private static final int __STATUSTEVEINFARTO_ISSET_ID = 16;
  private static final int __STATUSTEVEINTERNADOEM12MESES_ISSET_ID = 17;
  private static final int __STATUSUSAOUTRASPRATICASINTEGRATIVASOUCOMPLEMENTARES_ISSET_ID = 18;
  private static final int __STATUSUSAPLANTAMEDICINAIS_ISSET_ID = 19;
  private static final int __STATUSDIAGNOSTICOMENTAL_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESCRICAO_CAUSA_INTERNACAO_EM12_MESES,_Fields.DESCRICAO_OUTRA_CONDICAO1,_Fields.DESCRICAO_OUTRA_CONDICAO2,_Fields.DESCRICAO_OUTRA_CONDICAO3,_Fields.DESCRICAO_PLANTAS_MEDICINAIS_USADAS,_Fields.DOENCA_CARDIACA,_Fields.DOENCA_RESPIRATORIA,_Fields.DOENCA_RINS,_Fields.MATERNIDADE_DE_REFERENCIA,_Fields.SITUACAO_PESO,_Fields.STATUS_EH_DEPENDENTE_ALCOOL,_Fields.STATUS_EH_DEPENDENTE_OUTRAS_DROGAS,_Fields.STATUS_EH_FUMANTE,_Fields.STATUS_EH_GESTANTE,_Fields.STATUS_ESTA_ACAMADO,_Fields.STATUS_ESTA_DOMICILIADO,_Fields.STATUS_TEM_DIABETES,_Fields.STATUS_TEM_DOENCA_RESPIRATORIA,_Fields.STATUS_TEM_HANSENIASE,_Fields.STATUS_TEM_HIPERTENSAO_ARTERIAL,_Fields.STATUS_TEM_TEVE_CANCER,_Fields.STATUS_TEM_TEVE_DOENCAS_RINS,_Fields.STATUS_TEM_TUBERCULOSE,_Fields.STATUS_TEVE_AVC_DERRAME,_Fields.STATUS_TEVE_DOENCA_CARDIACA,_Fields.STATUS_TEVE_INFARTO,_Fields.STATUS_TEVE_INTERNADO_EM12_MESES,_Fields.STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES,_Fields.STATUS_USA_PLANTA_MEDICINAIS,_Fields.STATUS_DIAGNOSTICO_MENTAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESCRICAO_CAUSA_INTERNACAO_EM12_MESES, new org.apache.thrift.meta_data.FieldMetaData("descricaoCausaInternacaoEm12Meses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRICAO_OUTRA_CONDICAO1, new org.apache.thrift.meta_data.FieldMetaData("descricaoOutraCondicao1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRICAO_OUTRA_CONDICAO2, new org.apache.thrift.meta_data.FieldMetaData("descricaoOutraCondicao2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRICAO_OUTRA_CONDICAO3, new org.apache.thrift.meta_data.FieldMetaData("descricaoOutraCondicao3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRICAO_PLANTAS_MEDICINAIS_USADAS, new org.apache.thrift.meta_data.FieldMetaData("descricaoPlantasMedicinaisUsadas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOENCA_CARDIACA, new org.apache.thrift.meta_data.FieldMetaData("doencaCardiaca", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOENCA_RESPIRATORIA, new org.apache.thrift.meta_data.FieldMetaData("doencaRespiratoria", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOENCA_RINS, new org.apache.thrift.meta_data.FieldMetaData("doencaRins", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MATERNIDADE_DE_REFERENCIA, new org.apache.thrift.meta_data.FieldMetaData("maternidadeDeReferencia", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITUACAO_PESO, new org.apache.thrift.meta_data.FieldMetaData("situacaoPeso", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS_EH_DEPENDENTE_ALCOOL, new org.apache.thrift.meta_data.FieldMetaData("statusEhDependenteAlcool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_EH_DEPENDENTE_OUTRAS_DROGAS, new org.apache.thrift.meta_data.FieldMetaData("statusEhDependenteOutrasDrogas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_EH_FUMANTE, new org.apache.thrift.meta_data.FieldMetaData("statusEhFumante", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_EH_GESTANTE, new org.apache.thrift.meta_data.FieldMetaData("statusEhGestante", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_ESTA_ACAMADO, new org.apache.thrift.meta_data.FieldMetaData("statusEstaAcamado", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_ESTA_DOMICILIADO, new org.apache.thrift.meta_data.FieldMetaData("statusEstaDomiciliado", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_DIABETES, new org.apache.thrift.meta_data.FieldMetaData("statusTemDiabetes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_DOENCA_RESPIRATORIA, new org.apache.thrift.meta_data.FieldMetaData("statusTemDoencaRespiratoria", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_HANSENIASE, new org.apache.thrift.meta_data.FieldMetaData("statusTemHanseniase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_HIPERTENSAO_ARTERIAL, new org.apache.thrift.meta_data.FieldMetaData("statusTemHipertensaoArterial", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_TEVE_CANCER, new org.apache.thrift.meta_data.FieldMetaData("statusTemTeveCancer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_TEVE_DOENCAS_RINS, new org.apache.thrift.meta_data.FieldMetaData("statusTemTeveDoencasRins", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEM_TUBERCULOSE, new org.apache.thrift.meta_data.FieldMetaData("statusTemTuberculose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEVE_AVC_DERRAME, new org.apache.thrift.meta_data.FieldMetaData("statusTeveAvcDerrame", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEVE_DOENCA_CARDIACA, new org.apache.thrift.meta_data.FieldMetaData("statusTeveDoencaCardiaca", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEVE_INFARTO, new org.apache.thrift.meta_data.FieldMetaData("statusTeveInfarto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_TEVE_INTERNADO_EM12_MESES, new org.apache.thrift.meta_data.FieldMetaData("statusTeveInternadoEm12Meses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES, new org.apache.thrift.meta_data.FieldMetaData("statusUsaOutrasPraticasIntegrativasOuComplementares", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_USA_PLANTA_MEDICINAIS, new org.apache.thrift.meta_data.FieldMetaData("statusUsaPlantaMedicinais", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_DIAGNOSTICO_MENTAL, new org.apache.thrift.meta_data.FieldMetaData("statusDiagnosticoMental", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CondicoesDeSaudeThrift.class, metaDataMap);
  }

  public CondicoesDeSaudeThrift() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CondicoesDeSaudeThrift(CondicoesDeSaudeThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDescricaoCausaInternacaoEm12Meses()) {
      this.descricaoCausaInternacaoEm12Meses = other.descricaoCausaInternacaoEm12Meses;
    }
    if (other.isSetDescricaoOutraCondicao1()) {
      this.descricaoOutraCondicao1 = other.descricaoOutraCondicao1;
    }
    if (other.isSetDescricaoOutraCondicao2()) {
      this.descricaoOutraCondicao2 = other.descricaoOutraCondicao2;
    }
    if (other.isSetDescricaoOutraCondicao3()) {
      this.descricaoOutraCondicao3 = other.descricaoOutraCondicao3;
    }
    if (other.isSetDescricaoPlantasMedicinaisUsadas()) {
      this.descricaoPlantasMedicinaisUsadas = other.descricaoPlantasMedicinaisUsadas;
    }
    if (other.isSetDoencaCardiaca()) {
      List<Long> __this__doencaCardiaca = new ArrayList<Long>(other.doencaCardiaca);
      this.doencaCardiaca = __this__doencaCardiaca;
    }
    if (other.isSetDoencaRespiratoria()) {
      List<Long> __this__doencaRespiratoria = new ArrayList<Long>(other.doencaRespiratoria);
      this.doencaRespiratoria = __this__doencaRespiratoria;
    }
    if (other.isSetDoencaRins()) {
      List<Long> __this__doencaRins = new ArrayList<Long>(other.doencaRins);
      this.doencaRins = __this__doencaRins;
    }
    if (other.isSetMaternidadeDeReferencia()) {
      this.maternidadeDeReferencia = other.maternidadeDeReferencia;
    }
    this.situacaoPeso = other.situacaoPeso;
    this.statusEhDependenteAlcool = other.statusEhDependenteAlcool;
    this.statusEhDependenteOutrasDrogas = other.statusEhDependenteOutrasDrogas;
    this.statusEhFumante = other.statusEhFumante;
    this.statusEhGestante = other.statusEhGestante;
    this.statusEstaAcamado = other.statusEstaAcamado;
    this.statusEstaDomiciliado = other.statusEstaDomiciliado;
    this.statusTemDiabetes = other.statusTemDiabetes;
    this.statusTemDoencaRespiratoria = other.statusTemDoencaRespiratoria;
    this.statusTemHanseniase = other.statusTemHanseniase;
    this.statusTemHipertensaoArterial = other.statusTemHipertensaoArterial;
    this.statusTemTeveCancer = other.statusTemTeveCancer;
    this.statusTemTeveDoencasRins = other.statusTemTeveDoencasRins;
    this.statusTemTuberculose = other.statusTemTuberculose;
    this.statusTeveAvcDerrame = other.statusTeveAvcDerrame;
    this.statusTeveDoencaCardiaca = other.statusTeveDoencaCardiaca;
    this.statusTeveInfarto = other.statusTeveInfarto;
    this.statusTeveInternadoEm12Meses = other.statusTeveInternadoEm12Meses;
    this.statusUsaOutrasPraticasIntegrativasOuComplementares = other.statusUsaOutrasPraticasIntegrativasOuComplementares;
    this.statusUsaPlantaMedicinais = other.statusUsaPlantaMedicinais;
    this.statusDiagnosticoMental = other.statusDiagnosticoMental;
  }

  public CondicoesDeSaudeThrift deepCopy() {
    return new CondicoesDeSaudeThrift(this);
  }

  @Override
  public void clear() {
    this.descricaoCausaInternacaoEm12Meses = null;
    this.descricaoOutraCondicao1 = null;
    this.descricaoOutraCondicao2 = null;
    this.descricaoOutraCondicao3 = null;
    this.descricaoPlantasMedicinaisUsadas = null;
    this.doencaCardiaca = null;
    this.doencaRespiratoria = null;
    this.doencaRins = null;
    this.maternidadeDeReferencia = null;
    setSituacaoPesoIsSet(false);
    this.situacaoPeso = 0;
    setStatusEhDependenteAlcoolIsSet(false);
    this.statusEhDependenteAlcool = false;
    setStatusEhDependenteOutrasDrogasIsSet(false);
    this.statusEhDependenteOutrasDrogas = false;
    setStatusEhFumanteIsSet(false);
    this.statusEhFumante = false;
    setStatusEhGestanteIsSet(false);
    this.statusEhGestante = false;
    setStatusEstaAcamadoIsSet(false);
    this.statusEstaAcamado = false;
    setStatusEstaDomiciliadoIsSet(false);
    this.statusEstaDomiciliado = false;
    setStatusTemDiabetesIsSet(false);
    this.statusTemDiabetes = false;
    setStatusTemDoencaRespiratoriaIsSet(false);
    this.statusTemDoencaRespiratoria = false;
    setStatusTemHanseniaseIsSet(false);
    this.statusTemHanseniase = false;
    setStatusTemHipertensaoArterialIsSet(false);
    this.statusTemHipertensaoArterial = false;
    setStatusTemTeveCancerIsSet(false);
    this.statusTemTeveCancer = false;
    setStatusTemTeveDoencasRinsIsSet(false);
    this.statusTemTeveDoencasRins = false;
    setStatusTemTuberculoseIsSet(false);
    this.statusTemTuberculose = false;
    setStatusTeveAvcDerrameIsSet(false);
    this.statusTeveAvcDerrame = false;
    setStatusTeveDoencaCardiacaIsSet(false);
    this.statusTeveDoencaCardiaca = false;
    setStatusTeveInfartoIsSet(false);
    this.statusTeveInfarto = false;
    setStatusTeveInternadoEm12MesesIsSet(false);
    this.statusTeveInternadoEm12Meses = false;
    setStatusUsaOutrasPraticasIntegrativasOuComplementaresIsSet(false);
    this.statusUsaOutrasPraticasIntegrativasOuComplementares = false;
    setStatusUsaPlantaMedicinaisIsSet(false);
    this.statusUsaPlantaMedicinais = false;
    setStatusDiagnosticoMentalIsSet(false);
    this.statusDiagnosticoMental = false;
  }

  public String getDescricaoCausaInternacaoEm12Meses() {
    return this.descricaoCausaInternacaoEm12Meses;
  }

  public void setDescricaoCausaInternacaoEm12Meses(String descricaoCausaInternacaoEm12Meses) {
    this.descricaoCausaInternacaoEm12Meses = descricaoCausaInternacaoEm12Meses;
  }

  public void unsetDescricaoCausaInternacaoEm12Meses() {
    this.descricaoCausaInternacaoEm12Meses = null;
  }

  /** Returns true if field descricaoCausaInternacaoEm12Meses is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricaoCausaInternacaoEm12Meses() {
    return this.descricaoCausaInternacaoEm12Meses != null;
  }

  public void setDescricaoCausaInternacaoEm12MesesIsSet(boolean value) {
    if (!value) {
      this.descricaoCausaInternacaoEm12Meses = null;
    }
  }

  public String getDescricaoOutraCondicao1() {
    return this.descricaoOutraCondicao1;
  }

  public void setDescricaoOutraCondicao1(String descricaoOutraCondicao1) {
    this.descricaoOutraCondicao1 = descricaoOutraCondicao1;
  }

  public void unsetDescricaoOutraCondicao1() {
    this.descricaoOutraCondicao1 = null;
  }

  /** Returns true if field descricaoOutraCondicao1 is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricaoOutraCondicao1() {
    return this.descricaoOutraCondicao1 != null;
  }

  public void setDescricaoOutraCondicao1IsSet(boolean value) {
    if (!value) {
      this.descricaoOutraCondicao1 = null;
    }
  }

  public String getDescricaoOutraCondicao2() {
    return this.descricaoOutraCondicao2;
  }

  public void setDescricaoOutraCondicao2(String descricaoOutraCondicao2) {
    this.descricaoOutraCondicao2 = descricaoOutraCondicao2;
  }

  public void unsetDescricaoOutraCondicao2() {
    this.descricaoOutraCondicao2 = null;
  }

  /** Returns true if field descricaoOutraCondicao2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricaoOutraCondicao2() {
    return this.descricaoOutraCondicao2 != null;
  }

  public void setDescricaoOutraCondicao2IsSet(boolean value) {
    if (!value) {
      this.descricaoOutraCondicao2 = null;
    }
  }

  public String getDescricaoOutraCondicao3() {
    return this.descricaoOutraCondicao3;
  }

  public void setDescricaoOutraCondicao3(String descricaoOutraCondicao3) {
    this.descricaoOutraCondicao3 = descricaoOutraCondicao3;
  }

  public void unsetDescricaoOutraCondicao3() {
    this.descricaoOutraCondicao3 = null;
  }

  /** Returns true if field descricaoOutraCondicao3 is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricaoOutraCondicao3() {
    return this.descricaoOutraCondicao3 != null;
  }

  public void setDescricaoOutraCondicao3IsSet(boolean value) {
    if (!value) {
      this.descricaoOutraCondicao3 = null;
    }
  }

  public String getDescricaoPlantasMedicinaisUsadas() {
    return this.descricaoPlantasMedicinaisUsadas;
  }

  public void setDescricaoPlantasMedicinaisUsadas(String descricaoPlantasMedicinaisUsadas) {
    this.descricaoPlantasMedicinaisUsadas = descricaoPlantasMedicinaisUsadas;
  }

  public void unsetDescricaoPlantasMedicinaisUsadas() {
    this.descricaoPlantasMedicinaisUsadas = null;
  }

  /** Returns true if field descricaoPlantasMedicinaisUsadas is set (has been assigned a value) and false otherwise */
  public boolean isSetDescricaoPlantasMedicinaisUsadas() {
    return this.descricaoPlantasMedicinaisUsadas != null;
  }

  public void setDescricaoPlantasMedicinaisUsadasIsSet(boolean value) {
    if (!value) {
      this.descricaoPlantasMedicinaisUsadas = null;
    }
  }

  public int getDoencaCardiacaSize() {
    return (this.doencaCardiaca == null) ? 0 : this.doencaCardiaca.size();
  }

  public java.util.Iterator<Long> getDoencaCardiacaIterator() {
    return (this.doencaCardiaca == null) ? null : this.doencaCardiaca.iterator();
  }

  public void addToDoencaCardiaca(long elem) {
    if (this.doencaCardiaca == null) {
      this.doencaCardiaca = new ArrayList<Long>();
    }
    this.doencaCardiaca.add(elem);
  }

  public List<Long> getDoencaCardiaca() {
    return this.doencaCardiaca;
  }

  public void setDoencaCardiaca(List<Long> doencaCardiaca) {
    this.doencaCardiaca = doencaCardiaca;
  }

  public void unsetDoencaCardiaca() {
    this.doencaCardiaca = null;
  }

  /** Returns true if field doencaCardiaca is set (has been assigned a value) and false otherwise */
  public boolean isSetDoencaCardiaca() {
    return this.doencaCardiaca != null;
  }

  public void setDoencaCardiacaIsSet(boolean value) {
    if (!value) {
      this.doencaCardiaca = null;
    }
  }

  public int getDoencaRespiratoriaSize() {
    return (this.doencaRespiratoria == null) ? 0 : this.doencaRespiratoria.size();
  }

  public java.util.Iterator<Long> getDoencaRespiratoriaIterator() {
    return (this.doencaRespiratoria == null) ? null : this.doencaRespiratoria.iterator();
  }

  public void addToDoencaRespiratoria(long elem) {
    if (this.doencaRespiratoria == null) {
      this.doencaRespiratoria = new ArrayList<Long>();
    }
    this.doencaRespiratoria.add(elem);
  }

  public List<Long> getDoencaRespiratoria() {
    return this.doencaRespiratoria;
  }

  public void setDoencaRespiratoria(List<Long> doencaRespiratoria) {
    this.doencaRespiratoria = doencaRespiratoria;
  }

  public void unsetDoencaRespiratoria() {
    this.doencaRespiratoria = null;
  }

  /** Returns true if field doencaRespiratoria is set (has been assigned a value) and false otherwise */
  public boolean isSetDoencaRespiratoria() {
    return this.doencaRespiratoria != null;
  }

  public void setDoencaRespiratoriaIsSet(boolean value) {
    if (!value) {
      this.doencaRespiratoria = null;
    }
  }

  public int getDoencaRinsSize() {
    return (this.doencaRins == null) ? 0 : this.doencaRins.size();
  }

  public java.util.Iterator<Long> getDoencaRinsIterator() {
    return (this.doencaRins == null) ? null : this.doencaRins.iterator();
  }

  public void addToDoencaRins(long elem) {
    if (this.doencaRins == null) {
      this.doencaRins = new ArrayList<Long>();
    }
    this.doencaRins.add(elem);
  }

  public List<Long> getDoencaRins() {
    return this.doencaRins;
  }

  public void setDoencaRins(List<Long> doencaRins) {
    this.doencaRins = doencaRins;
  }

  public void unsetDoencaRins() {
    this.doencaRins = null;
  }

  /** Returns true if field doencaRins is set (has been assigned a value) and false otherwise */
  public boolean isSetDoencaRins() {
    return this.doencaRins != null;
  }

  public void setDoencaRinsIsSet(boolean value) {
    if (!value) {
      this.doencaRins = null;
    }
  }

  public String getMaternidadeDeReferencia() {
    return this.maternidadeDeReferencia;
  }

  public void setMaternidadeDeReferencia(String maternidadeDeReferencia) {
    this.maternidadeDeReferencia = maternidadeDeReferencia;
  }

  public void unsetMaternidadeDeReferencia() {
    this.maternidadeDeReferencia = null;
  }

  /** Returns true if field maternidadeDeReferencia is set (has been assigned a value) and false otherwise */
  public boolean isSetMaternidadeDeReferencia() {
    return this.maternidadeDeReferencia != null;
  }

  public void setMaternidadeDeReferenciaIsSet(boolean value) {
    if (!value) {
      this.maternidadeDeReferencia = null;
    }
  }

  public long getSituacaoPeso() {
    return this.situacaoPeso;
  }

  public void setSituacaoPeso(long situacaoPeso) {
    this.situacaoPeso = situacaoPeso;
    setSituacaoPesoIsSet(true);
  }

  public void unsetSituacaoPeso() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITUACAOPESO_ISSET_ID);
  }

  /** Returns true if field situacaoPeso is set (has been assigned a value) and false otherwise */
  public boolean isSetSituacaoPeso() {
    return EncodingUtils.testBit(__isset_bitfield, __SITUACAOPESO_ISSET_ID);
  }

  public void setSituacaoPesoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITUACAOPESO_ISSET_ID, value);
  }

  public boolean isStatusEhDependenteAlcool() {
    return this.statusEhDependenteAlcool;
  }

  public void setStatusEhDependenteAlcool(boolean statusEhDependenteAlcool) {
    this.statusEhDependenteAlcool = statusEhDependenteAlcool;
    setStatusEhDependenteAlcoolIsSet(true);
  }

  public void unsetStatusEhDependenteAlcool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSEHDEPENDENTEALCOOL_ISSET_ID);
  }

  /** Returns true if field statusEhDependenteAlcool is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEhDependenteAlcool() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSEHDEPENDENTEALCOOL_ISSET_ID);
  }

  public void setStatusEhDependenteAlcoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSEHDEPENDENTEALCOOL_ISSET_ID, value);
  }

  public boolean isStatusEhDependenteOutrasDrogas() {
    return this.statusEhDependenteOutrasDrogas;
  }

  public void setStatusEhDependenteOutrasDrogas(boolean statusEhDependenteOutrasDrogas) {
    this.statusEhDependenteOutrasDrogas = statusEhDependenteOutrasDrogas;
    setStatusEhDependenteOutrasDrogasIsSet(true);
  }

  public void unsetStatusEhDependenteOutrasDrogas() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSEHDEPENDENTEOUTRASDROGAS_ISSET_ID);
  }

  /** Returns true if field statusEhDependenteOutrasDrogas is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEhDependenteOutrasDrogas() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSEHDEPENDENTEOUTRASDROGAS_ISSET_ID);
  }

  public void setStatusEhDependenteOutrasDrogasIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSEHDEPENDENTEOUTRASDROGAS_ISSET_ID, value);
  }

  public boolean isStatusEhFumante() {
    return this.statusEhFumante;
  }

  public void setStatusEhFumante(boolean statusEhFumante) {
    this.statusEhFumante = statusEhFumante;
    setStatusEhFumanteIsSet(true);
  }

  public void unsetStatusEhFumante() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSEHFUMANTE_ISSET_ID);
  }

  /** Returns true if field statusEhFumante is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEhFumante() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSEHFUMANTE_ISSET_ID);
  }

  public void setStatusEhFumanteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSEHFUMANTE_ISSET_ID, value);
  }

  public boolean isStatusEhGestante() {
    return this.statusEhGestante;
  }

  public void setStatusEhGestante(boolean statusEhGestante) {
    this.statusEhGestante = statusEhGestante;
    setStatusEhGestanteIsSet(true);
  }

  public void unsetStatusEhGestante() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSEHGESTANTE_ISSET_ID);
  }

  /** Returns true if field statusEhGestante is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEhGestante() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSEHGESTANTE_ISSET_ID);
  }

  public void setStatusEhGestanteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSEHGESTANTE_ISSET_ID, value);
  }

  public boolean isStatusEstaAcamado() {
    return this.statusEstaAcamado;
  }

  public void setStatusEstaAcamado(boolean statusEstaAcamado) {
    this.statusEstaAcamado = statusEstaAcamado;
    setStatusEstaAcamadoIsSet(true);
  }

  public void unsetStatusEstaAcamado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSESTAACAMADO_ISSET_ID);
  }

  /** Returns true if field statusEstaAcamado is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEstaAcamado() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSESTAACAMADO_ISSET_ID);
  }

  public void setStatusEstaAcamadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSESTAACAMADO_ISSET_ID, value);
  }

  public boolean isStatusEstaDomiciliado() {
    return this.statusEstaDomiciliado;
  }

  public void setStatusEstaDomiciliado(boolean statusEstaDomiciliado) {
    this.statusEstaDomiciliado = statusEstaDomiciliado;
    setStatusEstaDomiciliadoIsSet(true);
  }

  public void unsetStatusEstaDomiciliado() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSESTADOMICILIADO_ISSET_ID);
  }

  /** Returns true if field statusEstaDomiciliado is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusEstaDomiciliado() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSESTADOMICILIADO_ISSET_ID);
  }

  public void setStatusEstaDomiciliadoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSESTADOMICILIADO_ISSET_ID, value);
  }

  public boolean isStatusTemDiabetes() {
    return this.statusTemDiabetes;
  }

  public void setStatusTemDiabetes(boolean statusTemDiabetes) {
    this.statusTemDiabetes = statusTemDiabetes;
    setStatusTemDiabetesIsSet(true);
  }

  public void unsetStatusTemDiabetes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMDIABETES_ISSET_ID);
  }

  /** Returns true if field statusTemDiabetes is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemDiabetes() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMDIABETES_ISSET_ID);
  }

  public void setStatusTemDiabetesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMDIABETES_ISSET_ID, value);
  }

  public boolean isStatusTemDoencaRespiratoria() {
    return this.statusTemDoencaRespiratoria;
  }

  public void setStatusTemDoencaRespiratoria(boolean statusTemDoencaRespiratoria) {
    this.statusTemDoencaRespiratoria = statusTemDoencaRespiratoria;
    setStatusTemDoencaRespiratoriaIsSet(true);
  }

  public void unsetStatusTemDoencaRespiratoria() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMDOENCARESPIRATORIA_ISSET_ID);
  }

  /** Returns true if field statusTemDoencaRespiratoria is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemDoencaRespiratoria() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMDOENCARESPIRATORIA_ISSET_ID);
  }

  public void setStatusTemDoencaRespiratoriaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMDOENCARESPIRATORIA_ISSET_ID, value);
  }

  public boolean isStatusTemHanseniase() {
    return this.statusTemHanseniase;
  }

  public void setStatusTemHanseniase(boolean statusTemHanseniase) {
    this.statusTemHanseniase = statusTemHanseniase;
    setStatusTemHanseniaseIsSet(true);
  }

  public void unsetStatusTemHanseniase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMHANSENIASE_ISSET_ID);
  }

  /** Returns true if field statusTemHanseniase is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemHanseniase() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMHANSENIASE_ISSET_ID);
  }

  public void setStatusTemHanseniaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMHANSENIASE_ISSET_ID, value);
  }

  public boolean isStatusTemHipertensaoArterial() {
    return this.statusTemHipertensaoArterial;
  }

  public void setStatusTemHipertensaoArterial(boolean statusTemHipertensaoArterial) {
    this.statusTemHipertensaoArterial = statusTemHipertensaoArterial;
    setStatusTemHipertensaoArterialIsSet(true);
  }

  public void unsetStatusTemHipertensaoArterial() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMHIPERTENSAOARTERIAL_ISSET_ID);
  }

  /** Returns true if field statusTemHipertensaoArterial is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemHipertensaoArterial() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMHIPERTENSAOARTERIAL_ISSET_ID);
  }

  public void setStatusTemHipertensaoArterialIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMHIPERTENSAOARTERIAL_ISSET_ID, value);
  }

  public boolean isStatusTemTeveCancer() {
    return this.statusTemTeveCancer;
  }

  public void setStatusTemTeveCancer(boolean statusTemTeveCancer) {
    this.statusTemTeveCancer = statusTemTeveCancer;
    setStatusTemTeveCancerIsSet(true);
  }

  public void unsetStatusTemTeveCancer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMTEVECANCER_ISSET_ID);
  }

  /** Returns true if field statusTemTeveCancer is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemTeveCancer() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMTEVECANCER_ISSET_ID);
  }

  public void setStatusTemTeveCancerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMTEVECANCER_ISSET_ID, value);
  }

  public boolean isStatusTemTeveDoencasRins() {
    return this.statusTemTeveDoencasRins;
  }

  public void setStatusTemTeveDoencasRins(boolean statusTemTeveDoencasRins) {
    this.statusTemTeveDoencasRins = statusTemTeveDoencasRins;
    setStatusTemTeveDoencasRinsIsSet(true);
  }

  public void unsetStatusTemTeveDoencasRins() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMTEVEDOENCASRINS_ISSET_ID);
  }

  /** Returns true if field statusTemTeveDoencasRins is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemTeveDoencasRins() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMTEVEDOENCASRINS_ISSET_ID);
  }

  public void setStatusTemTeveDoencasRinsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMTEVEDOENCASRINS_ISSET_ID, value);
  }

  public boolean isStatusTemTuberculose() {
    return this.statusTemTuberculose;
  }

  public void setStatusTemTuberculose(boolean statusTemTuberculose) {
    this.statusTemTuberculose = statusTemTuberculose;
    setStatusTemTuberculoseIsSet(true);
  }

  public void unsetStatusTemTuberculose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEMTUBERCULOSE_ISSET_ID);
  }

  /** Returns true if field statusTemTuberculose is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTemTuberculose() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEMTUBERCULOSE_ISSET_ID);
  }

  public void setStatusTemTuberculoseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEMTUBERCULOSE_ISSET_ID, value);
  }

  public boolean isStatusTeveAvcDerrame() {
    return this.statusTeveAvcDerrame;
  }

  public void setStatusTeveAvcDerrame(boolean statusTeveAvcDerrame) {
    this.statusTeveAvcDerrame = statusTeveAvcDerrame;
    setStatusTeveAvcDerrameIsSet(true);
  }

  public void unsetStatusTeveAvcDerrame() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEVEAVCDERRAME_ISSET_ID);
  }

  /** Returns true if field statusTeveAvcDerrame is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTeveAvcDerrame() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEVEAVCDERRAME_ISSET_ID);
  }

  public void setStatusTeveAvcDerrameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEVEAVCDERRAME_ISSET_ID, value);
  }

  public boolean isStatusTeveDoencaCardiaca() {
    return this.statusTeveDoencaCardiaca;
  }

  public void setStatusTeveDoencaCardiaca(boolean statusTeveDoencaCardiaca) {
    this.statusTeveDoencaCardiaca = statusTeveDoencaCardiaca;
    setStatusTeveDoencaCardiacaIsSet(true);
  }

  public void unsetStatusTeveDoencaCardiaca() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEVEDOENCACARDIACA_ISSET_ID);
  }

  /** Returns true if field statusTeveDoencaCardiaca is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTeveDoencaCardiaca() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEVEDOENCACARDIACA_ISSET_ID);
  }

  public void setStatusTeveDoencaCardiacaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEVEDOENCACARDIACA_ISSET_ID, value);
  }

  public boolean isStatusTeveInfarto() {
    return this.statusTeveInfarto;
  }

  public void setStatusTeveInfarto(boolean statusTeveInfarto) {
    this.statusTeveInfarto = statusTeveInfarto;
    setStatusTeveInfartoIsSet(true);
  }

  public void unsetStatusTeveInfarto() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEVEINFARTO_ISSET_ID);
  }

  /** Returns true if field statusTeveInfarto is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTeveInfarto() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEVEINFARTO_ISSET_ID);
  }

  public void setStatusTeveInfartoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEVEINFARTO_ISSET_ID, value);
  }

  public boolean isStatusTeveInternadoEm12Meses() {
    return this.statusTeveInternadoEm12Meses;
  }

  public void setStatusTeveInternadoEm12Meses(boolean statusTeveInternadoEm12Meses) {
    this.statusTeveInternadoEm12Meses = statusTeveInternadoEm12Meses;
    setStatusTeveInternadoEm12MesesIsSet(true);
  }

  public void unsetStatusTeveInternadoEm12Meses() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTEVEINTERNADOEM12MESES_ISSET_ID);
  }

  /** Returns true if field statusTeveInternadoEm12Meses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusTeveInternadoEm12Meses() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTEVEINTERNADOEM12MESES_ISSET_ID);
  }

  public void setStatusTeveInternadoEm12MesesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTEVEINTERNADOEM12MESES_ISSET_ID, value);
  }

  public boolean isStatusUsaOutrasPraticasIntegrativasOuComplementares() {
    return this.statusUsaOutrasPraticasIntegrativasOuComplementares;
  }

  public void setStatusUsaOutrasPraticasIntegrativasOuComplementares(boolean statusUsaOutrasPraticasIntegrativasOuComplementares) {
    this.statusUsaOutrasPraticasIntegrativasOuComplementares = statusUsaOutrasPraticasIntegrativasOuComplementares;
    setStatusUsaOutrasPraticasIntegrativasOuComplementaresIsSet(true);
  }

  public void unsetStatusUsaOutrasPraticasIntegrativasOuComplementares() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSUSAOUTRASPRATICASINTEGRATIVASOUCOMPLEMENTARES_ISSET_ID);
  }

  /** Returns true if field statusUsaOutrasPraticasIntegrativasOuComplementares is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusUsaOutrasPraticasIntegrativasOuComplementares() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSUSAOUTRASPRATICASINTEGRATIVASOUCOMPLEMENTARES_ISSET_ID);
  }

  public void setStatusUsaOutrasPraticasIntegrativasOuComplementaresIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSUSAOUTRASPRATICASINTEGRATIVASOUCOMPLEMENTARES_ISSET_ID, value);
  }

  public boolean isStatusUsaPlantaMedicinais() {
    return this.statusUsaPlantaMedicinais;
  }

  public void setStatusUsaPlantaMedicinais(boolean statusUsaPlantaMedicinais) {
    this.statusUsaPlantaMedicinais = statusUsaPlantaMedicinais;
    setStatusUsaPlantaMedicinaisIsSet(true);
  }

  public void unsetStatusUsaPlantaMedicinais() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSUSAPLANTAMEDICINAIS_ISSET_ID);
  }

  /** Returns true if field statusUsaPlantaMedicinais is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusUsaPlantaMedicinais() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSUSAPLANTAMEDICINAIS_ISSET_ID);
  }

  public void setStatusUsaPlantaMedicinaisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSUSAPLANTAMEDICINAIS_ISSET_ID, value);
  }

  public boolean isStatusDiagnosticoMental() {
    return this.statusDiagnosticoMental;
  }

  public void setStatusDiagnosticoMental(boolean statusDiagnosticoMental) {
    this.statusDiagnosticoMental = statusDiagnosticoMental;
    setStatusDiagnosticoMentalIsSet(true);
  }

  public void unsetStatusDiagnosticoMental() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSDIAGNOSTICOMENTAL_ISSET_ID);
  }

  /** Returns true if field statusDiagnosticoMental is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusDiagnosticoMental() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSDIAGNOSTICOMENTAL_ISSET_ID);
  }

  public void setStatusDiagnosticoMentalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSDIAGNOSTICOMENTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESCRICAO_CAUSA_INTERNACAO_EM12_MESES:
      if (value == null) {
        unsetDescricaoCausaInternacaoEm12Meses();
      } else {
        setDescricaoCausaInternacaoEm12Meses((String)value);
      }
      break;

    case DESCRICAO_OUTRA_CONDICAO1:
      if (value == null) {
        unsetDescricaoOutraCondicao1();
      } else {
        setDescricaoOutraCondicao1((String)value);
      }
      break;

    case DESCRICAO_OUTRA_CONDICAO2:
      if (value == null) {
        unsetDescricaoOutraCondicao2();
      } else {
        setDescricaoOutraCondicao2((String)value);
      }
      break;

    case DESCRICAO_OUTRA_CONDICAO3:
      if (value == null) {
        unsetDescricaoOutraCondicao3();
      } else {
        setDescricaoOutraCondicao3((String)value);
      }
      break;

    case DESCRICAO_PLANTAS_MEDICINAIS_USADAS:
      if (value == null) {
        unsetDescricaoPlantasMedicinaisUsadas();
      } else {
        setDescricaoPlantasMedicinaisUsadas((String)value);
      }
      break;

    case DOENCA_CARDIACA:
      if (value == null) {
        unsetDoencaCardiaca();
      } else {
        setDoencaCardiaca((List<Long>)value);
      }
      break;

    case DOENCA_RESPIRATORIA:
      if (value == null) {
        unsetDoencaRespiratoria();
      } else {
        setDoencaRespiratoria((List<Long>)value);
      }
      break;

    case DOENCA_RINS:
      if (value == null) {
        unsetDoencaRins();
      } else {
        setDoencaRins((List<Long>)value);
      }
      break;

    case MATERNIDADE_DE_REFERENCIA:
      if (value == null) {
        unsetMaternidadeDeReferencia();
      } else {
        setMaternidadeDeReferencia((String)value);
      }
      break;

    case SITUACAO_PESO:
      if (value == null) {
        unsetSituacaoPeso();
      } else {
        setSituacaoPeso((Long)value);
      }
      break;

    case STATUS_EH_DEPENDENTE_ALCOOL:
      if (value == null) {
        unsetStatusEhDependenteAlcool();
      } else {
        setStatusEhDependenteAlcool((Boolean)value);
      }
      break;

    case STATUS_EH_DEPENDENTE_OUTRAS_DROGAS:
      if (value == null) {
        unsetStatusEhDependenteOutrasDrogas();
      } else {
        setStatusEhDependenteOutrasDrogas((Boolean)value);
      }
      break;

    case STATUS_EH_FUMANTE:
      if (value == null) {
        unsetStatusEhFumante();
      } else {
        setStatusEhFumante((Boolean)value);
      }
      break;

    case STATUS_EH_GESTANTE:
      if (value == null) {
        unsetStatusEhGestante();
      } else {
        setStatusEhGestante((Boolean)value);
      }
      break;

    case STATUS_ESTA_ACAMADO:
      if (value == null) {
        unsetStatusEstaAcamado();
      } else {
        setStatusEstaAcamado((Boolean)value);
      }
      break;

    case STATUS_ESTA_DOMICILIADO:
      if (value == null) {
        unsetStatusEstaDomiciliado();
      } else {
        setStatusEstaDomiciliado((Boolean)value);
      }
      break;

    case STATUS_TEM_DIABETES:
      if (value == null) {
        unsetStatusTemDiabetes();
      } else {
        setStatusTemDiabetes((Boolean)value);
      }
      break;

    case STATUS_TEM_DOENCA_RESPIRATORIA:
      if (value == null) {
        unsetStatusTemDoencaRespiratoria();
      } else {
        setStatusTemDoencaRespiratoria((Boolean)value);
      }
      break;

    case STATUS_TEM_HANSENIASE:
      if (value == null) {
        unsetStatusTemHanseniase();
      } else {
        setStatusTemHanseniase((Boolean)value);
      }
      break;

    case STATUS_TEM_HIPERTENSAO_ARTERIAL:
      if (value == null) {
        unsetStatusTemHipertensaoArterial();
      } else {
        setStatusTemHipertensaoArterial((Boolean)value);
      }
      break;

    case STATUS_TEM_TEVE_CANCER:
      if (value == null) {
        unsetStatusTemTeveCancer();
      } else {
        setStatusTemTeveCancer((Boolean)value);
      }
      break;

    case STATUS_TEM_TEVE_DOENCAS_RINS:
      if (value == null) {
        unsetStatusTemTeveDoencasRins();
      } else {
        setStatusTemTeveDoencasRins((Boolean)value);
      }
      break;

    case STATUS_TEM_TUBERCULOSE:
      if (value == null) {
        unsetStatusTemTuberculose();
      } else {
        setStatusTemTuberculose((Boolean)value);
      }
      break;

    case STATUS_TEVE_AVC_DERRAME:
      if (value == null) {
        unsetStatusTeveAvcDerrame();
      } else {
        setStatusTeveAvcDerrame((Boolean)value);
      }
      break;

    case STATUS_TEVE_DOENCA_CARDIACA:
      if (value == null) {
        unsetStatusTeveDoencaCardiaca();
      } else {
        setStatusTeveDoencaCardiaca((Boolean)value);
      }
      break;

    case STATUS_TEVE_INFARTO:
      if (value == null) {
        unsetStatusTeveInfarto();
      } else {
        setStatusTeveInfarto((Boolean)value);
      }
      break;

    case STATUS_TEVE_INTERNADO_EM12_MESES:
      if (value == null) {
        unsetStatusTeveInternadoEm12Meses();
      } else {
        setStatusTeveInternadoEm12Meses((Boolean)value);
      }
      break;

    case STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES:
      if (value == null) {
        unsetStatusUsaOutrasPraticasIntegrativasOuComplementares();
      } else {
        setStatusUsaOutrasPraticasIntegrativasOuComplementares((Boolean)value);
      }
      break;

    case STATUS_USA_PLANTA_MEDICINAIS:
      if (value == null) {
        unsetStatusUsaPlantaMedicinais();
      } else {
        setStatusUsaPlantaMedicinais((Boolean)value);
      }
      break;

    case STATUS_DIAGNOSTICO_MENTAL:
      if (value == null) {
        unsetStatusDiagnosticoMental();
      } else {
        setStatusDiagnosticoMental((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESCRICAO_CAUSA_INTERNACAO_EM12_MESES:
      return getDescricaoCausaInternacaoEm12Meses();

    case DESCRICAO_OUTRA_CONDICAO1:
      return getDescricaoOutraCondicao1();

    case DESCRICAO_OUTRA_CONDICAO2:
      return getDescricaoOutraCondicao2();

    case DESCRICAO_OUTRA_CONDICAO3:
      return getDescricaoOutraCondicao3();

    case DESCRICAO_PLANTAS_MEDICINAIS_USADAS:
      return getDescricaoPlantasMedicinaisUsadas();

    case DOENCA_CARDIACA:
      return getDoencaCardiaca();

    case DOENCA_RESPIRATORIA:
      return getDoencaRespiratoria();

    case DOENCA_RINS:
      return getDoencaRins();

    case MATERNIDADE_DE_REFERENCIA:
      return getMaternidadeDeReferencia();

    case SITUACAO_PESO:
      return getSituacaoPeso();

    case STATUS_EH_DEPENDENTE_ALCOOL:
      return isStatusEhDependenteAlcool();

    case STATUS_EH_DEPENDENTE_OUTRAS_DROGAS:
      return isStatusEhDependenteOutrasDrogas();

    case STATUS_EH_FUMANTE:
      return isStatusEhFumante();

    case STATUS_EH_GESTANTE:
      return isStatusEhGestante();

    case STATUS_ESTA_ACAMADO:
      return isStatusEstaAcamado();

    case STATUS_ESTA_DOMICILIADO:
      return isStatusEstaDomiciliado();

    case STATUS_TEM_DIABETES:
      return isStatusTemDiabetes();

    case STATUS_TEM_DOENCA_RESPIRATORIA:
      return isStatusTemDoencaRespiratoria();

    case STATUS_TEM_HANSENIASE:
      return isStatusTemHanseniase();

    case STATUS_TEM_HIPERTENSAO_ARTERIAL:
      return isStatusTemHipertensaoArterial();

    case STATUS_TEM_TEVE_CANCER:
      return isStatusTemTeveCancer();

    case STATUS_TEM_TEVE_DOENCAS_RINS:
      return isStatusTemTeveDoencasRins();

    case STATUS_TEM_TUBERCULOSE:
      return isStatusTemTuberculose();

    case STATUS_TEVE_AVC_DERRAME:
      return isStatusTeveAvcDerrame();

    case STATUS_TEVE_DOENCA_CARDIACA:
      return isStatusTeveDoencaCardiaca();

    case STATUS_TEVE_INFARTO:
      return isStatusTeveInfarto();

    case STATUS_TEVE_INTERNADO_EM12_MESES:
      return isStatusTeveInternadoEm12Meses();

    case STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES:
      return isStatusUsaOutrasPraticasIntegrativasOuComplementares();

    case STATUS_USA_PLANTA_MEDICINAIS:
      return isStatusUsaPlantaMedicinais();

    case STATUS_DIAGNOSTICO_MENTAL:
      return isStatusDiagnosticoMental();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESCRICAO_CAUSA_INTERNACAO_EM12_MESES:
      return isSetDescricaoCausaInternacaoEm12Meses();
    case DESCRICAO_OUTRA_CONDICAO1:
      return isSetDescricaoOutraCondicao1();
    case DESCRICAO_OUTRA_CONDICAO2:
      return isSetDescricaoOutraCondicao2();
    case DESCRICAO_OUTRA_CONDICAO3:
      return isSetDescricaoOutraCondicao3();
    case DESCRICAO_PLANTAS_MEDICINAIS_USADAS:
      return isSetDescricaoPlantasMedicinaisUsadas();
    case DOENCA_CARDIACA:
      return isSetDoencaCardiaca();
    case DOENCA_RESPIRATORIA:
      return isSetDoencaRespiratoria();
    case DOENCA_RINS:
      return isSetDoencaRins();
    case MATERNIDADE_DE_REFERENCIA:
      return isSetMaternidadeDeReferencia();
    case SITUACAO_PESO:
      return isSetSituacaoPeso();
    case STATUS_EH_DEPENDENTE_ALCOOL:
      return isSetStatusEhDependenteAlcool();
    case STATUS_EH_DEPENDENTE_OUTRAS_DROGAS:
      return isSetStatusEhDependenteOutrasDrogas();
    case STATUS_EH_FUMANTE:
      return isSetStatusEhFumante();
    case STATUS_EH_GESTANTE:
      return isSetStatusEhGestante();
    case STATUS_ESTA_ACAMADO:
      return isSetStatusEstaAcamado();
    case STATUS_ESTA_DOMICILIADO:
      return isSetStatusEstaDomiciliado();
    case STATUS_TEM_DIABETES:
      return isSetStatusTemDiabetes();
    case STATUS_TEM_DOENCA_RESPIRATORIA:
      return isSetStatusTemDoencaRespiratoria();
    case STATUS_TEM_HANSENIASE:
      return isSetStatusTemHanseniase();
    case STATUS_TEM_HIPERTENSAO_ARTERIAL:
      return isSetStatusTemHipertensaoArterial();
    case STATUS_TEM_TEVE_CANCER:
      return isSetStatusTemTeveCancer();
    case STATUS_TEM_TEVE_DOENCAS_RINS:
      return isSetStatusTemTeveDoencasRins();
    case STATUS_TEM_TUBERCULOSE:
      return isSetStatusTemTuberculose();
    case STATUS_TEVE_AVC_DERRAME:
      return isSetStatusTeveAvcDerrame();
    case STATUS_TEVE_DOENCA_CARDIACA:
      return isSetStatusTeveDoencaCardiaca();
    case STATUS_TEVE_INFARTO:
      return isSetStatusTeveInfarto();
    case STATUS_TEVE_INTERNADO_EM12_MESES:
      return isSetStatusTeveInternadoEm12Meses();
    case STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES:
      return isSetStatusUsaOutrasPraticasIntegrativasOuComplementares();
    case STATUS_USA_PLANTA_MEDICINAIS:
      return isSetStatusUsaPlantaMedicinais();
    case STATUS_DIAGNOSTICO_MENTAL:
      return isSetStatusDiagnosticoMental();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CondicoesDeSaudeThrift)
      return this.equals((CondicoesDeSaudeThrift)that);
    return false;
  }

  public boolean equals(CondicoesDeSaudeThrift that) {
    if (that == null)
      return false;

    boolean this_present_descricaoCausaInternacaoEm12Meses = true && this.isSetDescricaoCausaInternacaoEm12Meses();
    boolean that_present_descricaoCausaInternacaoEm12Meses = true && that.isSetDescricaoCausaInternacaoEm12Meses();
    if (this_present_descricaoCausaInternacaoEm12Meses || that_present_descricaoCausaInternacaoEm12Meses) {
      if (!(this_present_descricaoCausaInternacaoEm12Meses && that_present_descricaoCausaInternacaoEm12Meses))
        return false;
      if (!this.descricaoCausaInternacaoEm12Meses.equals(that.descricaoCausaInternacaoEm12Meses))
        return false;
    }

    boolean this_present_descricaoOutraCondicao1 = true && this.isSetDescricaoOutraCondicao1();
    boolean that_present_descricaoOutraCondicao1 = true && that.isSetDescricaoOutraCondicao1();
    if (this_present_descricaoOutraCondicao1 || that_present_descricaoOutraCondicao1) {
      if (!(this_present_descricaoOutraCondicao1 && that_present_descricaoOutraCondicao1))
        return false;
      if (!this.descricaoOutraCondicao1.equals(that.descricaoOutraCondicao1))
        return false;
    }

    boolean this_present_descricaoOutraCondicao2 = true && this.isSetDescricaoOutraCondicao2();
    boolean that_present_descricaoOutraCondicao2 = true && that.isSetDescricaoOutraCondicao2();
    if (this_present_descricaoOutraCondicao2 || that_present_descricaoOutraCondicao2) {
      if (!(this_present_descricaoOutraCondicao2 && that_present_descricaoOutraCondicao2))
        return false;
      if (!this.descricaoOutraCondicao2.equals(that.descricaoOutraCondicao2))
        return false;
    }

    boolean this_present_descricaoOutraCondicao3 = true && this.isSetDescricaoOutraCondicao3();
    boolean that_present_descricaoOutraCondicao3 = true && that.isSetDescricaoOutraCondicao3();
    if (this_present_descricaoOutraCondicao3 || that_present_descricaoOutraCondicao3) {
      if (!(this_present_descricaoOutraCondicao3 && that_present_descricaoOutraCondicao3))
        return false;
      if (!this.descricaoOutraCondicao3.equals(that.descricaoOutraCondicao3))
        return false;
    }

    boolean this_present_descricaoPlantasMedicinaisUsadas = true && this.isSetDescricaoPlantasMedicinaisUsadas();
    boolean that_present_descricaoPlantasMedicinaisUsadas = true && that.isSetDescricaoPlantasMedicinaisUsadas();
    if (this_present_descricaoPlantasMedicinaisUsadas || that_present_descricaoPlantasMedicinaisUsadas) {
      if (!(this_present_descricaoPlantasMedicinaisUsadas && that_present_descricaoPlantasMedicinaisUsadas))
        return false;
      if (!this.descricaoPlantasMedicinaisUsadas.equals(that.descricaoPlantasMedicinaisUsadas))
        return false;
    }

    boolean this_present_doencaCardiaca = true && this.isSetDoencaCardiaca();
    boolean that_present_doencaCardiaca = true && that.isSetDoencaCardiaca();
    if (this_present_doencaCardiaca || that_present_doencaCardiaca) {
      if (!(this_present_doencaCardiaca && that_present_doencaCardiaca))
        return false;
      if (!this.doencaCardiaca.equals(that.doencaCardiaca))
        return false;
    }

    boolean this_present_doencaRespiratoria = true && this.isSetDoencaRespiratoria();
    boolean that_present_doencaRespiratoria = true && that.isSetDoencaRespiratoria();
    if (this_present_doencaRespiratoria || that_present_doencaRespiratoria) {
      if (!(this_present_doencaRespiratoria && that_present_doencaRespiratoria))
        return false;
      if (!this.doencaRespiratoria.equals(that.doencaRespiratoria))
        return false;
    }

    boolean this_present_doencaRins = true && this.isSetDoencaRins();
    boolean that_present_doencaRins = true && that.isSetDoencaRins();
    if (this_present_doencaRins || that_present_doencaRins) {
      if (!(this_present_doencaRins && that_present_doencaRins))
        return false;
      if (!this.doencaRins.equals(that.doencaRins))
        return false;
    }

    boolean this_present_maternidadeDeReferencia = true && this.isSetMaternidadeDeReferencia();
    boolean that_present_maternidadeDeReferencia = true && that.isSetMaternidadeDeReferencia();
    if (this_present_maternidadeDeReferencia || that_present_maternidadeDeReferencia) {
      if (!(this_present_maternidadeDeReferencia && that_present_maternidadeDeReferencia))
        return false;
      if (!this.maternidadeDeReferencia.equals(that.maternidadeDeReferencia))
        return false;
    }

    boolean this_present_situacaoPeso = true && this.isSetSituacaoPeso();
    boolean that_present_situacaoPeso = true && that.isSetSituacaoPeso();
    if (this_present_situacaoPeso || that_present_situacaoPeso) {
      if (!(this_present_situacaoPeso && that_present_situacaoPeso))
        return false;
      if (this.situacaoPeso != that.situacaoPeso)
        return false;
    }

    boolean this_present_statusEhDependenteAlcool = true && this.isSetStatusEhDependenteAlcool();
    boolean that_present_statusEhDependenteAlcool = true && that.isSetStatusEhDependenteAlcool();
    if (this_present_statusEhDependenteAlcool || that_present_statusEhDependenteAlcool) {
      if (!(this_present_statusEhDependenteAlcool && that_present_statusEhDependenteAlcool))
        return false;
      if (this.statusEhDependenteAlcool != that.statusEhDependenteAlcool)
        return false;
    }

    boolean this_present_statusEhDependenteOutrasDrogas = true && this.isSetStatusEhDependenteOutrasDrogas();
    boolean that_present_statusEhDependenteOutrasDrogas = true && that.isSetStatusEhDependenteOutrasDrogas();
    if (this_present_statusEhDependenteOutrasDrogas || that_present_statusEhDependenteOutrasDrogas) {
      if (!(this_present_statusEhDependenteOutrasDrogas && that_present_statusEhDependenteOutrasDrogas))
        return false;
      if (this.statusEhDependenteOutrasDrogas != that.statusEhDependenteOutrasDrogas)
        return false;
    }

    boolean this_present_statusEhFumante = true && this.isSetStatusEhFumante();
    boolean that_present_statusEhFumante = true && that.isSetStatusEhFumante();
    if (this_present_statusEhFumante || that_present_statusEhFumante) {
      if (!(this_present_statusEhFumante && that_present_statusEhFumante))
        return false;
      if (this.statusEhFumante != that.statusEhFumante)
        return false;
    }

    boolean this_present_statusEhGestante = true && this.isSetStatusEhGestante();
    boolean that_present_statusEhGestante = true && that.isSetStatusEhGestante();
    if (this_present_statusEhGestante || that_present_statusEhGestante) {
      if (!(this_present_statusEhGestante && that_present_statusEhGestante))
        return false;
      if (this.statusEhGestante != that.statusEhGestante)
        return false;
    }

    boolean this_present_statusEstaAcamado = true && this.isSetStatusEstaAcamado();
    boolean that_present_statusEstaAcamado = true && that.isSetStatusEstaAcamado();
    if (this_present_statusEstaAcamado || that_present_statusEstaAcamado) {
      if (!(this_present_statusEstaAcamado && that_present_statusEstaAcamado))
        return false;
      if (this.statusEstaAcamado != that.statusEstaAcamado)
        return false;
    }

    boolean this_present_statusEstaDomiciliado = true && this.isSetStatusEstaDomiciliado();
    boolean that_present_statusEstaDomiciliado = true && that.isSetStatusEstaDomiciliado();
    if (this_present_statusEstaDomiciliado || that_present_statusEstaDomiciliado) {
      if (!(this_present_statusEstaDomiciliado && that_present_statusEstaDomiciliado))
        return false;
      if (this.statusEstaDomiciliado != that.statusEstaDomiciliado)
        return false;
    }

    boolean this_present_statusTemDiabetes = true && this.isSetStatusTemDiabetes();
    boolean that_present_statusTemDiabetes = true && that.isSetStatusTemDiabetes();
    if (this_present_statusTemDiabetes || that_present_statusTemDiabetes) {
      if (!(this_present_statusTemDiabetes && that_present_statusTemDiabetes))
        return false;
      if (this.statusTemDiabetes != that.statusTemDiabetes)
        return false;
    }

    boolean this_present_statusTemDoencaRespiratoria = true && this.isSetStatusTemDoencaRespiratoria();
    boolean that_present_statusTemDoencaRespiratoria = true && that.isSetStatusTemDoencaRespiratoria();
    if (this_present_statusTemDoencaRespiratoria || that_present_statusTemDoencaRespiratoria) {
      if (!(this_present_statusTemDoencaRespiratoria && that_present_statusTemDoencaRespiratoria))
        return false;
      if (this.statusTemDoencaRespiratoria != that.statusTemDoencaRespiratoria)
        return false;
    }

    boolean this_present_statusTemHanseniase = true && this.isSetStatusTemHanseniase();
    boolean that_present_statusTemHanseniase = true && that.isSetStatusTemHanseniase();
    if (this_present_statusTemHanseniase || that_present_statusTemHanseniase) {
      if (!(this_present_statusTemHanseniase && that_present_statusTemHanseniase))
        return false;
      if (this.statusTemHanseniase != that.statusTemHanseniase)
        return false;
    }

    boolean this_present_statusTemHipertensaoArterial = true && this.isSetStatusTemHipertensaoArterial();
    boolean that_present_statusTemHipertensaoArterial = true && that.isSetStatusTemHipertensaoArterial();
    if (this_present_statusTemHipertensaoArterial || that_present_statusTemHipertensaoArterial) {
      if (!(this_present_statusTemHipertensaoArterial && that_present_statusTemHipertensaoArterial))
        return false;
      if (this.statusTemHipertensaoArterial != that.statusTemHipertensaoArterial)
        return false;
    }

    boolean this_present_statusTemTeveCancer = true && this.isSetStatusTemTeveCancer();
    boolean that_present_statusTemTeveCancer = true && that.isSetStatusTemTeveCancer();
    if (this_present_statusTemTeveCancer || that_present_statusTemTeveCancer) {
      if (!(this_present_statusTemTeveCancer && that_present_statusTemTeveCancer))
        return false;
      if (this.statusTemTeveCancer != that.statusTemTeveCancer)
        return false;
    }

    boolean this_present_statusTemTeveDoencasRins = true && this.isSetStatusTemTeveDoencasRins();
    boolean that_present_statusTemTeveDoencasRins = true && that.isSetStatusTemTeveDoencasRins();
    if (this_present_statusTemTeveDoencasRins || that_present_statusTemTeveDoencasRins) {
      if (!(this_present_statusTemTeveDoencasRins && that_present_statusTemTeveDoencasRins))
        return false;
      if (this.statusTemTeveDoencasRins != that.statusTemTeveDoencasRins)
        return false;
    }

    boolean this_present_statusTemTuberculose = true && this.isSetStatusTemTuberculose();
    boolean that_present_statusTemTuberculose = true && that.isSetStatusTemTuberculose();
    if (this_present_statusTemTuberculose || that_present_statusTemTuberculose) {
      if (!(this_present_statusTemTuberculose && that_present_statusTemTuberculose))
        return false;
      if (this.statusTemTuberculose != that.statusTemTuberculose)
        return false;
    }

    boolean this_present_statusTeveAvcDerrame = true && this.isSetStatusTeveAvcDerrame();
    boolean that_present_statusTeveAvcDerrame = true && that.isSetStatusTeveAvcDerrame();
    if (this_present_statusTeveAvcDerrame || that_present_statusTeveAvcDerrame) {
      if (!(this_present_statusTeveAvcDerrame && that_present_statusTeveAvcDerrame))
        return false;
      if (this.statusTeveAvcDerrame != that.statusTeveAvcDerrame)
        return false;
    }

    boolean this_present_statusTeveDoencaCardiaca = true && this.isSetStatusTeveDoencaCardiaca();
    boolean that_present_statusTeveDoencaCardiaca = true && that.isSetStatusTeveDoencaCardiaca();
    if (this_present_statusTeveDoencaCardiaca || that_present_statusTeveDoencaCardiaca) {
      if (!(this_present_statusTeveDoencaCardiaca && that_present_statusTeveDoencaCardiaca))
        return false;
      if (this.statusTeveDoencaCardiaca != that.statusTeveDoencaCardiaca)
        return false;
    }

    boolean this_present_statusTeveInfarto = true && this.isSetStatusTeveInfarto();
    boolean that_present_statusTeveInfarto = true && that.isSetStatusTeveInfarto();
    if (this_present_statusTeveInfarto || that_present_statusTeveInfarto) {
      if (!(this_present_statusTeveInfarto && that_present_statusTeveInfarto))
        return false;
      if (this.statusTeveInfarto != that.statusTeveInfarto)
        return false;
    }

    boolean this_present_statusTeveInternadoEm12Meses = true && this.isSetStatusTeveInternadoEm12Meses();
    boolean that_present_statusTeveInternadoEm12Meses = true && that.isSetStatusTeveInternadoEm12Meses();
    if (this_present_statusTeveInternadoEm12Meses || that_present_statusTeveInternadoEm12Meses) {
      if (!(this_present_statusTeveInternadoEm12Meses && that_present_statusTeveInternadoEm12Meses))
        return false;
      if (this.statusTeveInternadoEm12Meses != that.statusTeveInternadoEm12Meses)
        return false;
    }

    boolean this_present_statusUsaOutrasPraticasIntegrativasOuComplementares = true && this.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares();
    boolean that_present_statusUsaOutrasPraticasIntegrativasOuComplementares = true && that.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares();
    if (this_present_statusUsaOutrasPraticasIntegrativasOuComplementares || that_present_statusUsaOutrasPraticasIntegrativasOuComplementares) {
      if (!(this_present_statusUsaOutrasPraticasIntegrativasOuComplementares && that_present_statusUsaOutrasPraticasIntegrativasOuComplementares))
        return false;
      if (this.statusUsaOutrasPraticasIntegrativasOuComplementares != that.statusUsaOutrasPraticasIntegrativasOuComplementares)
        return false;
    }

    boolean this_present_statusUsaPlantaMedicinais = true && this.isSetStatusUsaPlantaMedicinais();
    boolean that_present_statusUsaPlantaMedicinais = true && that.isSetStatusUsaPlantaMedicinais();
    if (this_present_statusUsaPlantaMedicinais || that_present_statusUsaPlantaMedicinais) {
      if (!(this_present_statusUsaPlantaMedicinais && that_present_statusUsaPlantaMedicinais))
        return false;
      if (this.statusUsaPlantaMedicinais != that.statusUsaPlantaMedicinais)
        return false;
    }

    boolean this_present_statusDiagnosticoMental = true && this.isSetStatusDiagnosticoMental();
    boolean that_present_statusDiagnosticoMental = true && that.isSetStatusDiagnosticoMental();
    if (this_present_statusDiagnosticoMental || that_present_statusDiagnosticoMental) {
      if (!(this_present_statusDiagnosticoMental && that_present_statusDiagnosticoMental))
        return false;
      if (this.statusDiagnosticoMental != that.statusDiagnosticoMental)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_descricaoCausaInternacaoEm12Meses = true && (isSetDescricaoCausaInternacaoEm12Meses());
    list.add(present_descricaoCausaInternacaoEm12Meses);
    if (present_descricaoCausaInternacaoEm12Meses)
      list.add(descricaoCausaInternacaoEm12Meses);

    boolean present_descricaoOutraCondicao1 = true && (isSetDescricaoOutraCondicao1());
    list.add(present_descricaoOutraCondicao1);
    if (present_descricaoOutraCondicao1)
      list.add(descricaoOutraCondicao1);

    boolean present_descricaoOutraCondicao2 = true && (isSetDescricaoOutraCondicao2());
    list.add(present_descricaoOutraCondicao2);
    if (present_descricaoOutraCondicao2)
      list.add(descricaoOutraCondicao2);

    boolean present_descricaoOutraCondicao3 = true && (isSetDescricaoOutraCondicao3());
    list.add(present_descricaoOutraCondicao3);
    if (present_descricaoOutraCondicao3)
      list.add(descricaoOutraCondicao3);

    boolean present_descricaoPlantasMedicinaisUsadas = true && (isSetDescricaoPlantasMedicinaisUsadas());
    list.add(present_descricaoPlantasMedicinaisUsadas);
    if (present_descricaoPlantasMedicinaisUsadas)
      list.add(descricaoPlantasMedicinaisUsadas);

    boolean present_doencaCardiaca = true && (isSetDoencaCardiaca());
    list.add(present_doencaCardiaca);
    if (present_doencaCardiaca)
      list.add(doencaCardiaca);

    boolean present_doencaRespiratoria = true && (isSetDoencaRespiratoria());
    list.add(present_doencaRespiratoria);
    if (present_doencaRespiratoria)
      list.add(doencaRespiratoria);

    boolean present_doencaRins = true && (isSetDoencaRins());
    list.add(present_doencaRins);
    if (present_doencaRins)
      list.add(doencaRins);

    boolean present_maternidadeDeReferencia = true && (isSetMaternidadeDeReferencia());
    list.add(present_maternidadeDeReferencia);
    if (present_maternidadeDeReferencia)
      list.add(maternidadeDeReferencia);

    boolean present_situacaoPeso = true && (isSetSituacaoPeso());
    list.add(present_situacaoPeso);
    if (present_situacaoPeso)
      list.add(situacaoPeso);

    boolean present_statusEhDependenteAlcool = true && (isSetStatusEhDependenteAlcool());
    list.add(present_statusEhDependenteAlcool);
    if (present_statusEhDependenteAlcool)
      list.add(statusEhDependenteAlcool);

    boolean present_statusEhDependenteOutrasDrogas = true && (isSetStatusEhDependenteOutrasDrogas());
    list.add(present_statusEhDependenteOutrasDrogas);
    if (present_statusEhDependenteOutrasDrogas)
      list.add(statusEhDependenteOutrasDrogas);

    boolean present_statusEhFumante = true && (isSetStatusEhFumante());
    list.add(present_statusEhFumante);
    if (present_statusEhFumante)
      list.add(statusEhFumante);

    boolean present_statusEhGestante = true && (isSetStatusEhGestante());
    list.add(present_statusEhGestante);
    if (present_statusEhGestante)
      list.add(statusEhGestante);

    boolean present_statusEstaAcamado = true && (isSetStatusEstaAcamado());
    list.add(present_statusEstaAcamado);
    if (present_statusEstaAcamado)
      list.add(statusEstaAcamado);

    boolean present_statusEstaDomiciliado = true && (isSetStatusEstaDomiciliado());
    list.add(present_statusEstaDomiciliado);
    if (present_statusEstaDomiciliado)
      list.add(statusEstaDomiciliado);

    boolean present_statusTemDiabetes = true && (isSetStatusTemDiabetes());
    list.add(present_statusTemDiabetes);
    if (present_statusTemDiabetes)
      list.add(statusTemDiabetes);

    boolean present_statusTemDoencaRespiratoria = true && (isSetStatusTemDoencaRespiratoria());
    list.add(present_statusTemDoencaRespiratoria);
    if (present_statusTemDoencaRespiratoria)
      list.add(statusTemDoencaRespiratoria);

    boolean present_statusTemHanseniase = true && (isSetStatusTemHanseniase());
    list.add(present_statusTemHanseniase);
    if (present_statusTemHanseniase)
      list.add(statusTemHanseniase);

    boolean present_statusTemHipertensaoArterial = true && (isSetStatusTemHipertensaoArterial());
    list.add(present_statusTemHipertensaoArterial);
    if (present_statusTemHipertensaoArterial)
      list.add(statusTemHipertensaoArterial);

    boolean present_statusTemTeveCancer = true && (isSetStatusTemTeveCancer());
    list.add(present_statusTemTeveCancer);
    if (present_statusTemTeveCancer)
      list.add(statusTemTeveCancer);

    boolean present_statusTemTeveDoencasRins = true && (isSetStatusTemTeveDoencasRins());
    list.add(present_statusTemTeveDoencasRins);
    if (present_statusTemTeveDoencasRins)
      list.add(statusTemTeveDoencasRins);

    boolean present_statusTemTuberculose = true && (isSetStatusTemTuberculose());
    list.add(present_statusTemTuberculose);
    if (present_statusTemTuberculose)
      list.add(statusTemTuberculose);

    boolean present_statusTeveAvcDerrame = true && (isSetStatusTeveAvcDerrame());
    list.add(present_statusTeveAvcDerrame);
    if (present_statusTeveAvcDerrame)
      list.add(statusTeveAvcDerrame);

    boolean present_statusTeveDoencaCardiaca = true && (isSetStatusTeveDoencaCardiaca());
    list.add(present_statusTeveDoencaCardiaca);
    if (present_statusTeveDoencaCardiaca)
      list.add(statusTeveDoencaCardiaca);

    boolean present_statusTeveInfarto = true && (isSetStatusTeveInfarto());
    list.add(present_statusTeveInfarto);
    if (present_statusTeveInfarto)
      list.add(statusTeveInfarto);

    boolean present_statusTeveInternadoEm12Meses = true && (isSetStatusTeveInternadoEm12Meses());
    list.add(present_statusTeveInternadoEm12Meses);
    if (present_statusTeveInternadoEm12Meses)
      list.add(statusTeveInternadoEm12Meses);

    boolean present_statusUsaOutrasPraticasIntegrativasOuComplementares = true && (isSetStatusUsaOutrasPraticasIntegrativasOuComplementares());
    list.add(present_statusUsaOutrasPraticasIntegrativasOuComplementares);
    if (present_statusUsaOutrasPraticasIntegrativasOuComplementares)
      list.add(statusUsaOutrasPraticasIntegrativasOuComplementares);

    boolean present_statusUsaPlantaMedicinais = true && (isSetStatusUsaPlantaMedicinais());
    list.add(present_statusUsaPlantaMedicinais);
    if (present_statusUsaPlantaMedicinais)
      list.add(statusUsaPlantaMedicinais);

    boolean present_statusDiagnosticoMental = true && (isSetStatusDiagnosticoMental());
    list.add(present_statusDiagnosticoMental);
    if (present_statusDiagnosticoMental)
      list.add(statusDiagnosticoMental);

    return list.hashCode();
  }

  @Override
  public int compareTo(CondicoesDeSaudeThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDescricaoCausaInternacaoEm12Meses()).compareTo(other.isSetDescricaoCausaInternacaoEm12Meses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricaoCausaInternacaoEm12Meses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricaoCausaInternacaoEm12Meses, other.descricaoCausaInternacaoEm12Meses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescricaoOutraCondicao1()).compareTo(other.isSetDescricaoOutraCondicao1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricaoOutraCondicao1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricaoOutraCondicao1, other.descricaoOutraCondicao1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescricaoOutraCondicao2()).compareTo(other.isSetDescricaoOutraCondicao2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricaoOutraCondicao2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricaoOutraCondicao2, other.descricaoOutraCondicao2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescricaoOutraCondicao3()).compareTo(other.isSetDescricaoOutraCondicao3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricaoOutraCondicao3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricaoOutraCondicao3, other.descricaoOutraCondicao3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescricaoPlantasMedicinaisUsadas()).compareTo(other.isSetDescricaoPlantasMedicinaisUsadas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescricaoPlantasMedicinaisUsadas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricaoPlantasMedicinaisUsadas, other.descricaoPlantasMedicinaisUsadas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoencaCardiaca()).compareTo(other.isSetDoencaCardiaca());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoencaCardiaca()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doencaCardiaca, other.doencaCardiaca);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoencaRespiratoria()).compareTo(other.isSetDoencaRespiratoria());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoencaRespiratoria()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doencaRespiratoria, other.doencaRespiratoria);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoencaRins()).compareTo(other.isSetDoencaRins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoencaRins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doencaRins, other.doencaRins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaternidadeDeReferencia()).compareTo(other.isSetMaternidadeDeReferencia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaternidadeDeReferencia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maternidadeDeReferencia, other.maternidadeDeReferencia);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituacaoPeso()).compareTo(other.isSetSituacaoPeso());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituacaoPeso()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situacaoPeso, other.situacaoPeso);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEhDependenteAlcool()).compareTo(other.isSetStatusEhDependenteAlcool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEhDependenteAlcool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEhDependenteAlcool, other.statusEhDependenteAlcool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEhDependenteOutrasDrogas()).compareTo(other.isSetStatusEhDependenteOutrasDrogas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEhDependenteOutrasDrogas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEhDependenteOutrasDrogas, other.statusEhDependenteOutrasDrogas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEhFumante()).compareTo(other.isSetStatusEhFumante());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEhFumante()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEhFumante, other.statusEhFumante);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEhGestante()).compareTo(other.isSetStatusEhGestante());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEhGestante()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEhGestante, other.statusEhGestante);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEstaAcamado()).compareTo(other.isSetStatusEstaAcamado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEstaAcamado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEstaAcamado, other.statusEstaAcamado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusEstaDomiciliado()).compareTo(other.isSetStatusEstaDomiciliado());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusEstaDomiciliado()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEstaDomiciliado, other.statusEstaDomiciliado);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemDiabetes()).compareTo(other.isSetStatusTemDiabetes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemDiabetes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemDiabetes, other.statusTemDiabetes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemDoencaRespiratoria()).compareTo(other.isSetStatusTemDoencaRespiratoria());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemDoencaRespiratoria()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemDoencaRespiratoria, other.statusTemDoencaRespiratoria);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemHanseniase()).compareTo(other.isSetStatusTemHanseniase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemHanseniase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemHanseniase, other.statusTemHanseniase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemHipertensaoArterial()).compareTo(other.isSetStatusTemHipertensaoArterial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemHipertensaoArterial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemHipertensaoArterial, other.statusTemHipertensaoArterial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemTeveCancer()).compareTo(other.isSetStatusTemTeveCancer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemTeveCancer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemTeveCancer, other.statusTemTeveCancer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemTeveDoencasRins()).compareTo(other.isSetStatusTemTeveDoencasRins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemTeveDoencasRins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemTeveDoencasRins, other.statusTemTeveDoencasRins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTemTuberculose()).compareTo(other.isSetStatusTemTuberculose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTemTuberculose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTemTuberculose, other.statusTemTuberculose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTeveAvcDerrame()).compareTo(other.isSetStatusTeveAvcDerrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTeveAvcDerrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTeveAvcDerrame, other.statusTeveAvcDerrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTeveDoencaCardiaca()).compareTo(other.isSetStatusTeveDoencaCardiaca());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTeveDoencaCardiaca()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTeveDoencaCardiaca, other.statusTeveDoencaCardiaca);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTeveInfarto()).compareTo(other.isSetStatusTeveInfarto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTeveInfarto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTeveInfarto, other.statusTeveInfarto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusTeveInternadoEm12Meses()).compareTo(other.isSetStatusTeveInternadoEm12Meses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusTeveInternadoEm12Meses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusTeveInternadoEm12Meses, other.statusTeveInternadoEm12Meses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()).compareTo(other.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusUsaOutrasPraticasIntegrativasOuComplementares, other.statusUsaOutrasPraticasIntegrativasOuComplementares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusUsaPlantaMedicinais()).compareTo(other.isSetStatusUsaPlantaMedicinais());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusUsaPlantaMedicinais()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusUsaPlantaMedicinais, other.statusUsaPlantaMedicinais);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusDiagnosticoMental()).compareTo(other.isSetStatusDiagnosticoMental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusDiagnosticoMental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusDiagnosticoMental, other.statusDiagnosticoMental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CondicoesDeSaudeThrift(");
    boolean first = true;

    if (isSetDescricaoCausaInternacaoEm12Meses()) {
      sb.append("descricaoCausaInternacaoEm12Meses:");
      if (this.descricaoCausaInternacaoEm12Meses == null) {
        sb.append("null");
      } else {
        sb.append(this.descricaoCausaInternacaoEm12Meses);
      }
      first = false;
    }
    if (isSetDescricaoOutraCondicao1()) {
      if (!first) sb.append(", ");
      sb.append("descricaoOutraCondicao1:");
      if (this.descricaoOutraCondicao1 == null) {
        sb.append("null");
      } else {
        sb.append(this.descricaoOutraCondicao1);
      }
      first = false;
    }
    if (isSetDescricaoOutraCondicao2()) {
      if (!first) sb.append(", ");
      sb.append("descricaoOutraCondicao2:");
      if (this.descricaoOutraCondicao2 == null) {
        sb.append("null");
      } else {
        sb.append(this.descricaoOutraCondicao2);
      }
      first = false;
    }
    if (isSetDescricaoOutraCondicao3()) {
      if (!first) sb.append(", ");
      sb.append("descricaoOutraCondicao3:");
      if (this.descricaoOutraCondicao3 == null) {
        sb.append("null");
      } else {
        sb.append(this.descricaoOutraCondicao3);
      }
      first = false;
    }
    if (isSetDescricaoPlantasMedicinaisUsadas()) {
      if (!first) sb.append(", ");
      sb.append("descricaoPlantasMedicinaisUsadas:");
      if (this.descricaoPlantasMedicinaisUsadas == null) {
        sb.append("null");
      } else {
        sb.append(this.descricaoPlantasMedicinaisUsadas);
      }
      first = false;
    }
    if (isSetDoencaCardiaca()) {
      if (!first) sb.append(", ");
      sb.append("doencaCardiaca:");
      if (this.doencaCardiaca == null) {
        sb.append("null");
      } else {
        sb.append(this.doencaCardiaca);
      }
      first = false;
    }
    if (isSetDoencaRespiratoria()) {
      if (!first) sb.append(", ");
      sb.append("doencaRespiratoria:");
      if (this.doencaRespiratoria == null) {
        sb.append("null");
      } else {
        sb.append(this.doencaRespiratoria);
      }
      first = false;
    }
    if (isSetDoencaRins()) {
      if (!first) sb.append(", ");
      sb.append("doencaRins:");
      if (this.doencaRins == null) {
        sb.append("null");
      } else {
        sb.append(this.doencaRins);
      }
      first = false;
    }
    if (isSetMaternidadeDeReferencia()) {
      if (!first) sb.append(", ");
      sb.append("maternidadeDeReferencia:");
      if (this.maternidadeDeReferencia == null) {
        sb.append("null");
      } else {
        sb.append(this.maternidadeDeReferencia);
      }
      first = false;
    }
    if (isSetSituacaoPeso()) {
      if (!first) sb.append(", ");
      sb.append("situacaoPeso:");
      sb.append(this.situacaoPeso);
      first = false;
    }
    if (isSetStatusEhDependenteAlcool()) {
      if (!first) sb.append(", ");
      sb.append("statusEhDependenteAlcool:");
      sb.append(this.statusEhDependenteAlcool);
      first = false;
    }
    if (isSetStatusEhDependenteOutrasDrogas()) {
      if (!first) sb.append(", ");
      sb.append("statusEhDependenteOutrasDrogas:");
      sb.append(this.statusEhDependenteOutrasDrogas);
      first = false;
    }
    if (isSetStatusEhFumante()) {
      if (!first) sb.append(", ");
      sb.append("statusEhFumante:");
      sb.append(this.statusEhFumante);
      first = false;
    }
    if (isSetStatusEhGestante()) {
      if (!first) sb.append(", ");
      sb.append("statusEhGestante:");
      sb.append(this.statusEhGestante);
      first = false;
    }
    if (isSetStatusEstaAcamado()) {
      if (!first) sb.append(", ");
      sb.append("statusEstaAcamado:");
      sb.append(this.statusEstaAcamado);
      first = false;
    }
    if (isSetStatusEstaDomiciliado()) {
      if (!first) sb.append(", ");
      sb.append("statusEstaDomiciliado:");
      sb.append(this.statusEstaDomiciliado);
      first = false;
    }
    if (isSetStatusTemDiabetes()) {
      if (!first) sb.append(", ");
      sb.append("statusTemDiabetes:");
      sb.append(this.statusTemDiabetes);
      first = false;
    }
    if (isSetStatusTemDoencaRespiratoria()) {
      if (!first) sb.append(", ");
      sb.append("statusTemDoencaRespiratoria:");
      sb.append(this.statusTemDoencaRespiratoria);
      first = false;
    }
    if (isSetStatusTemHanseniase()) {
      if (!first) sb.append(", ");
      sb.append("statusTemHanseniase:");
      sb.append(this.statusTemHanseniase);
      first = false;
    }
    if (isSetStatusTemHipertensaoArterial()) {
      if (!first) sb.append(", ");
      sb.append("statusTemHipertensaoArterial:");
      sb.append(this.statusTemHipertensaoArterial);
      first = false;
    }
    if (isSetStatusTemTeveCancer()) {
      if (!first) sb.append(", ");
      sb.append("statusTemTeveCancer:");
      sb.append(this.statusTemTeveCancer);
      first = false;
    }
    if (isSetStatusTemTeveDoencasRins()) {
      if (!first) sb.append(", ");
      sb.append("statusTemTeveDoencasRins:");
      sb.append(this.statusTemTeveDoencasRins);
      first = false;
    }
    if (isSetStatusTemTuberculose()) {
      if (!first) sb.append(", ");
      sb.append("statusTemTuberculose:");
      sb.append(this.statusTemTuberculose);
      first = false;
    }
    if (isSetStatusTeveAvcDerrame()) {
      if (!first) sb.append(", ");
      sb.append("statusTeveAvcDerrame:");
      sb.append(this.statusTeveAvcDerrame);
      first = false;
    }
    if (isSetStatusTeveDoencaCardiaca()) {
      if (!first) sb.append(", ");
      sb.append("statusTeveDoencaCardiaca:");
      sb.append(this.statusTeveDoencaCardiaca);
      first = false;
    }
    if (isSetStatusTeveInfarto()) {
      if (!first) sb.append(", ");
      sb.append("statusTeveInfarto:");
      sb.append(this.statusTeveInfarto);
      first = false;
    }
    if (isSetStatusTeveInternadoEm12Meses()) {
      if (!first) sb.append(", ");
      sb.append("statusTeveInternadoEm12Meses:");
      sb.append(this.statusTeveInternadoEm12Meses);
      first = false;
    }
    if (isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()) {
      if (!first) sb.append(", ");
      sb.append("statusUsaOutrasPraticasIntegrativasOuComplementares:");
      sb.append(this.statusUsaOutrasPraticasIntegrativasOuComplementares);
      first = false;
    }
    if (isSetStatusUsaPlantaMedicinais()) {
      if (!first) sb.append(", ");
      sb.append("statusUsaPlantaMedicinais:");
      sb.append(this.statusUsaPlantaMedicinais);
      first = false;
    }
    if (isSetStatusDiagnosticoMental()) {
      if (!first) sb.append(", ");
      sb.append("statusDiagnosticoMental:");
      sb.append(this.statusDiagnosticoMental);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CondicoesDeSaudeThriftStandardSchemeFactory implements SchemeFactory {
    public CondicoesDeSaudeThriftStandardScheme getScheme() {
      return new CondicoesDeSaudeThriftStandardScheme();
    }
  }

  private static class CondicoesDeSaudeThriftStandardScheme extends StandardScheme<CondicoesDeSaudeThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CondicoesDeSaudeThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESCRICAO_CAUSA_INTERNACAO_EM12_MESES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricaoCausaInternacaoEm12Meses = iprot.readString();
              struct.setDescricaoCausaInternacaoEm12MesesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRICAO_OUTRA_CONDICAO1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricaoOutraCondicao1 = iprot.readString();
              struct.setDescricaoOutraCondicao1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRICAO_OUTRA_CONDICAO2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricaoOutraCondicao2 = iprot.readString();
              struct.setDescricaoOutraCondicao2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRICAO_OUTRA_CONDICAO3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricaoOutraCondicao3 = iprot.readString();
              struct.setDescricaoOutraCondicao3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRICAO_PLANTAS_MEDICINAIS_USADAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descricaoPlantasMedicinaisUsadas = iprot.readString();
              struct.setDescricaoPlantasMedicinaisUsadasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOENCA_CARDIACA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.doencaCardiaca = new ArrayList<Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.doencaCardiaca.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDoencaCardiacaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOENCA_RESPIRATORIA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.doencaRespiratoria = new ArrayList<Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.doencaRespiratoria.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDoencaRespiratoriaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOENCA_RINS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.doencaRins = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.doencaRins.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setDoencaRinsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MATERNIDADE_DE_REFERENCIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maternidadeDeReferencia = iprot.readString();
              struct.setMaternidadeDeReferenciaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SITUACAO_PESO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.situacaoPeso = iprot.readI64();
              struct.setSituacaoPesoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_EH_DEPENDENTE_ALCOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEhDependenteAlcool = iprot.readBool();
              struct.setStatusEhDependenteAlcoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS_EH_DEPENDENTE_OUTRAS_DROGAS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEhDependenteOutrasDrogas = iprot.readBool();
              struct.setStatusEhDependenteOutrasDrogasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS_EH_FUMANTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEhFumante = iprot.readBool();
              struct.setStatusEhFumanteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS_EH_GESTANTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEhGestante = iprot.readBool();
              struct.setStatusEhGestanteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS_ESTA_ACAMADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEstaAcamado = iprot.readBool();
              struct.setStatusEstaAcamadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS_ESTA_DOMICILIADO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusEstaDomiciliado = iprot.readBool();
              struct.setStatusEstaDomiciliadoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS_TEM_DIABETES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemDiabetes = iprot.readBool();
              struct.setStatusTemDiabetesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STATUS_TEM_DOENCA_RESPIRATORIA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemDoencaRespiratoria = iprot.readBool();
              struct.setStatusTemDoencaRespiratoriaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATUS_TEM_HANSENIASE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemHanseniase = iprot.readBool();
              struct.setStatusTemHanseniaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATUS_TEM_HIPERTENSAO_ARTERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemHipertensaoArterial = iprot.readBool();
              struct.setStatusTemHipertensaoArterialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STATUS_TEM_TEVE_CANCER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemTeveCancer = iprot.readBool();
              struct.setStatusTemTeveCancerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // STATUS_TEM_TEVE_DOENCAS_RINS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemTeveDoencasRins = iprot.readBool();
              struct.setStatusTemTeveDoencasRinsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STATUS_TEM_TUBERCULOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTemTuberculose = iprot.readBool();
              struct.setStatusTemTuberculoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // STATUS_TEVE_AVC_DERRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTeveAvcDerrame = iprot.readBool();
              struct.setStatusTeveAvcDerrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // STATUS_TEVE_DOENCA_CARDIACA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTeveDoencaCardiaca = iprot.readBool();
              struct.setStatusTeveDoencaCardiacaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // STATUS_TEVE_INFARTO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTeveInfarto = iprot.readBool();
              struct.setStatusTeveInfartoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // STATUS_TEVE_INTERNADO_EM12_MESES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusTeveInternadoEm12Meses = iprot.readBool();
              struct.setStatusTeveInternadoEm12MesesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusUsaOutrasPraticasIntegrativasOuComplementares = iprot.readBool();
              struct.setStatusUsaOutrasPraticasIntegrativasOuComplementaresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // STATUS_USA_PLANTA_MEDICINAIS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusUsaPlantaMedicinais = iprot.readBool();
              struct.setStatusUsaPlantaMedicinaisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // STATUS_DIAGNOSTICO_MENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusDiagnosticoMental = iprot.readBool();
              struct.setStatusDiagnosticoMentalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CondicoesDeSaudeThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.descricaoCausaInternacaoEm12Meses != null) {
        if (struct.isSetDescricaoCausaInternacaoEm12Meses()) {
          oprot.writeFieldBegin(DESCRICAO_CAUSA_INTERNACAO_EM12_MESES_FIELD_DESC);
          oprot.writeString(struct.descricaoCausaInternacaoEm12Meses);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descricaoOutraCondicao1 != null) {
        if (struct.isSetDescricaoOutraCondicao1()) {
          oprot.writeFieldBegin(DESCRICAO_OUTRA_CONDICAO1_FIELD_DESC);
          oprot.writeString(struct.descricaoOutraCondicao1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descricaoOutraCondicao2 != null) {
        if (struct.isSetDescricaoOutraCondicao2()) {
          oprot.writeFieldBegin(DESCRICAO_OUTRA_CONDICAO2_FIELD_DESC);
          oprot.writeString(struct.descricaoOutraCondicao2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descricaoOutraCondicao3 != null) {
        if (struct.isSetDescricaoOutraCondicao3()) {
          oprot.writeFieldBegin(DESCRICAO_OUTRA_CONDICAO3_FIELD_DESC);
          oprot.writeString(struct.descricaoOutraCondicao3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descricaoPlantasMedicinaisUsadas != null) {
        if (struct.isSetDescricaoPlantasMedicinaisUsadas()) {
          oprot.writeFieldBegin(DESCRICAO_PLANTAS_MEDICINAIS_USADAS_FIELD_DESC);
          oprot.writeString(struct.descricaoPlantasMedicinaisUsadas);
          oprot.writeFieldEnd();
        }
      }
      if (struct.doencaCardiaca != null) {
        if (struct.isSetDoencaCardiaca()) {
          oprot.writeFieldBegin(DOENCA_CARDIACA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.doencaCardiaca.size()));
            for (long _iter9 : struct.doencaCardiaca)
            {
              oprot.writeI64(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doencaRespiratoria != null) {
        if (struct.isSetDoencaRespiratoria()) {
          oprot.writeFieldBegin(DOENCA_RESPIRATORIA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.doencaRespiratoria.size()));
            for (long _iter10 : struct.doencaRespiratoria)
            {
              oprot.writeI64(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doencaRins != null) {
        if (struct.isSetDoencaRins()) {
          oprot.writeFieldBegin(DOENCA_RINS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.doencaRins.size()));
            for (long _iter11 : struct.doencaRins)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.maternidadeDeReferencia != null) {
        if (struct.isSetMaternidadeDeReferencia()) {
          oprot.writeFieldBegin(MATERNIDADE_DE_REFERENCIA_FIELD_DESC);
          oprot.writeString(struct.maternidadeDeReferencia);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSituacaoPeso()) {
        oprot.writeFieldBegin(SITUACAO_PESO_FIELD_DESC);
        oprot.writeI64(struct.situacaoPeso);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEhDependenteAlcool()) {
        oprot.writeFieldBegin(STATUS_EH_DEPENDENTE_ALCOOL_FIELD_DESC);
        oprot.writeBool(struct.statusEhDependenteAlcool);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEhDependenteOutrasDrogas()) {
        oprot.writeFieldBegin(STATUS_EH_DEPENDENTE_OUTRAS_DROGAS_FIELD_DESC);
        oprot.writeBool(struct.statusEhDependenteOutrasDrogas);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEhFumante()) {
        oprot.writeFieldBegin(STATUS_EH_FUMANTE_FIELD_DESC);
        oprot.writeBool(struct.statusEhFumante);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEhGestante()) {
        oprot.writeFieldBegin(STATUS_EH_GESTANTE_FIELD_DESC);
        oprot.writeBool(struct.statusEhGestante);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEstaAcamado()) {
        oprot.writeFieldBegin(STATUS_ESTA_ACAMADO_FIELD_DESC);
        oprot.writeBool(struct.statusEstaAcamado);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusEstaDomiciliado()) {
        oprot.writeFieldBegin(STATUS_ESTA_DOMICILIADO_FIELD_DESC);
        oprot.writeBool(struct.statusEstaDomiciliado);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemDiabetes()) {
        oprot.writeFieldBegin(STATUS_TEM_DIABETES_FIELD_DESC);
        oprot.writeBool(struct.statusTemDiabetes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemDoencaRespiratoria()) {
        oprot.writeFieldBegin(STATUS_TEM_DOENCA_RESPIRATORIA_FIELD_DESC);
        oprot.writeBool(struct.statusTemDoencaRespiratoria);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemHanseniase()) {
        oprot.writeFieldBegin(STATUS_TEM_HANSENIASE_FIELD_DESC);
        oprot.writeBool(struct.statusTemHanseniase);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemHipertensaoArterial()) {
        oprot.writeFieldBegin(STATUS_TEM_HIPERTENSAO_ARTERIAL_FIELD_DESC);
        oprot.writeBool(struct.statusTemHipertensaoArterial);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemTeveCancer()) {
        oprot.writeFieldBegin(STATUS_TEM_TEVE_CANCER_FIELD_DESC);
        oprot.writeBool(struct.statusTemTeveCancer);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemTeveDoencasRins()) {
        oprot.writeFieldBegin(STATUS_TEM_TEVE_DOENCAS_RINS_FIELD_DESC);
        oprot.writeBool(struct.statusTemTeveDoencasRins);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTemTuberculose()) {
        oprot.writeFieldBegin(STATUS_TEM_TUBERCULOSE_FIELD_DESC);
        oprot.writeBool(struct.statusTemTuberculose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTeveAvcDerrame()) {
        oprot.writeFieldBegin(STATUS_TEVE_AVC_DERRAME_FIELD_DESC);
        oprot.writeBool(struct.statusTeveAvcDerrame);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTeveDoencaCardiaca()) {
        oprot.writeFieldBegin(STATUS_TEVE_DOENCA_CARDIACA_FIELD_DESC);
        oprot.writeBool(struct.statusTeveDoencaCardiaca);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTeveInfarto()) {
        oprot.writeFieldBegin(STATUS_TEVE_INFARTO_FIELD_DESC);
        oprot.writeBool(struct.statusTeveInfarto);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusTeveInternadoEm12Meses()) {
        oprot.writeFieldBegin(STATUS_TEVE_INTERNADO_EM12_MESES_FIELD_DESC);
        oprot.writeBool(struct.statusTeveInternadoEm12Meses);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()) {
        oprot.writeFieldBegin(STATUS_USA_OUTRAS_PRATICAS_INTEGRATIVAS_OU_COMPLEMENTARES_FIELD_DESC);
        oprot.writeBool(struct.statusUsaOutrasPraticasIntegrativasOuComplementares);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusUsaPlantaMedicinais()) {
        oprot.writeFieldBegin(STATUS_USA_PLANTA_MEDICINAIS_FIELD_DESC);
        oprot.writeBool(struct.statusUsaPlantaMedicinais);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusDiagnosticoMental()) {
        oprot.writeFieldBegin(STATUS_DIAGNOSTICO_MENTAL_FIELD_DESC);
        oprot.writeBool(struct.statusDiagnosticoMental);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CondicoesDeSaudeThriftTupleSchemeFactory implements SchemeFactory {
    public CondicoesDeSaudeThriftTupleScheme getScheme() {
      return new CondicoesDeSaudeThriftTupleScheme();
    }
  }

  private static class CondicoesDeSaudeThriftTupleScheme extends TupleScheme<CondicoesDeSaudeThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CondicoesDeSaudeThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDescricaoCausaInternacaoEm12Meses()) {
        optionals.set(0);
      }
      if (struct.isSetDescricaoOutraCondicao1()) {
        optionals.set(1);
      }
      if (struct.isSetDescricaoOutraCondicao2()) {
        optionals.set(2);
      }
      if (struct.isSetDescricaoOutraCondicao3()) {
        optionals.set(3);
      }
      if (struct.isSetDescricaoPlantasMedicinaisUsadas()) {
        optionals.set(4);
      }
      if (struct.isSetDoencaCardiaca()) {
        optionals.set(5);
      }
      if (struct.isSetDoencaRespiratoria()) {
        optionals.set(6);
      }
      if (struct.isSetDoencaRins()) {
        optionals.set(7);
      }
      if (struct.isSetMaternidadeDeReferencia()) {
        optionals.set(8);
      }
      if (struct.isSetSituacaoPeso()) {
        optionals.set(9);
      }
      if (struct.isSetStatusEhDependenteAlcool()) {
        optionals.set(10);
      }
      if (struct.isSetStatusEhDependenteOutrasDrogas()) {
        optionals.set(11);
      }
      if (struct.isSetStatusEhFumante()) {
        optionals.set(12);
      }
      if (struct.isSetStatusEhGestante()) {
        optionals.set(13);
      }
      if (struct.isSetStatusEstaAcamado()) {
        optionals.set(14);
      }
      if (struct.isSetStatusEstaDomiciliado()) {
        optionals.set(15);
      }
      if (struct.isSetStatusTemDiabetes()) {
        optionals.set(16);
      }
      if (struct.isSetStatusTemDoencaRespiratoria()) {
        optionals.set(17);
      }
      if (struct.isSetStatusTemHanseniase()) {
        optionals.set(18);
      }
      if (struct.isSetStatusTemHipertensaoArterial()) {
        optionals.set(19);
      }
      if (struct.isSetStatusTemTeveCancer()) {
        optionals.set(20);
      }
      if (struct.isSetStatusTemTeveDoencasRins()) {
        optionals.set(21);
      }
      if (struct.isSetStatusTemTuberculose()) {
        optionals.set(22);
      }
      if (struct.isSetStatusTeveAvcDerrame()) {
        optionals.set(23);
      }
      if (struct.isSetStatusTeveDoencaCardiaca()) {
        optionals.set(24);
      }
      if (struct.isSetStatusTeveInfarto()) {
        optionals.set(25);
      }
      if (struct.isSetStatusTeveInternadoEm12Meses()) {
        optionals.set(26);
      }
      if (struct.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()) {
        optionals.set(27);
      }
      if (struct.isSetStatusUsaPlantaMedicinais()) {
        optionals.set(28);
      }
      if (struct.isSetStatusDiagnosticoMental()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetDescricaoCausaInternacaoEm12Meses()) {
        oprot.writeString(struct.descricaoCausaInternacaoEm12Meses);
      }
      if (struct.isSetDescricaoOutraCondicao1()) {
        oprot.writeString(struct.descricaoOutraCondicao1);
      }
      if (struct.isSetDescricaoOutraCondicao2()) {
        oprot.writeString(struct.descricaoOutraCondicao2);
      }
      if (struct.isSetDescricaoOutraCondicao3()) {
        oprot.writeString(struct.descricaoOutraCondicao3);
      }
      if (struct.isSetDescricaoPlantasMedicinaisUsadas()) {
        oprot.writeString(struct.descricaoPlantasMedicinaisUsadas);
      }
      if (struct.isSetDoencaCardiaca()) {
        {
          oprot.writeI32(struct.doencaCardiaca.size());
          for (long _iter12 : struct.doencaCardiaca)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
      if (struct.isSetDoencaRespiratoria()) {
        {
          oprot.writeI32(struct.doencaRespiratoria.size());
          for (long _iter13 : struct.doencaRespiratoria)
          {
            oprot.writeI64(_iter13);
          }
        }
      }
      if (struct.isSetDoencaRins()) {
        {
          oprot.writeI32(struct.doencaRins.size());
          for (long _iter14 : struct.doencaRins)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
      if (struct.isSetMaternidadeDeReferencia()) {
        oprot.writeString(struct.maternidadeDeReferencia);
      }
      if (struct.isSetSituacaoPeso()) {
        oprot.writeI64(struct.situacaoPeso);
      }
      if (struct.isSetStatusEhDependenteAlcool()) {
        oprot.writeBool(struct.statusEhDependenteAlcool);
      }
      if (struct.isSetStatusEhDependenteOutrasDrogas()) {
        oprot.writeBool(struct.statusEhDependenteOutrasDrogas);
      }
      if (struct.isSetStatusEhFumante()) {
        oprot.writeBool(struct.statusEhFumante);
      }
      if (struct.isSetStatusEhGestante()) {
        oprot.writeBool(struct.statusEhGestante);
      }
      if (struct.isSetStatusEstaAcamado()) {
        oprot.writeBool(struct.statusEstaAcamado);
      }
      if (struct.isSetStatusEstaDomiciliado()) {
        oprot.writeBool(struct.statusEstaDomiciliado);
      }
      if (struct.isSetStatusTemDiabetes()) {
        oprot.writeBool(struct.statusTemDiabetes);
      }
      if (struct.isSetStatusTemDoencaRespiratoria()) {
        oprot.writeBool(struct.statusTemDoencaRespiratoria);
      }
      if (struct.isSetStatusTemHanseniase()) {
        oprot.writeBool(struct.statusTemHanseniase);
      }
      if (struct.isSetStatusTemHipertensaoArterial()) {
        oprot.writeBool(struct.statusTemHipertensaoArterial);
      }
      if (struct.isSetStatusTemTeveCancer()) {
        oprot.writeBool(struct.statusTemTeveCancer);
      }
      if (struct.isSetStatusTemTeveDoencasRins()) {
        oprot.writeBool(struct.statusTemTeveDoencasRins);
      }
      if (struct.isSetStatusTemTuberculose()) {
        oprot.writeBool(struct.statusTemTuberculose);
      }
      if (struct.isSetStatusTeveAvcDerrame()) {
        oprot.writeBool(struct.statusTeveAvcDerrame);
      }
      if (struct.isSetStatusTeveDoencaCardiaca()) {
        oprot.writeBool(struct.statusTeveDoencaCardiaca);
      }
      if (struct.isSetStatusTeveInfarto()) {
        oprot.writeBool(struct.statusTeveInfarto);
      }
      if (struct.isSetStatusTeveInternadoEm12Meses()) {
        oprot.writeBool(struct.statusTeveInternadoEm12Meses);
      }
      if (struct.isSetStatusUsaOutrasPraticasIntegrativasOuComplementares()) {
        oprot.writeBool(struct.statusUsaOutrasPraticasIntegrativasOuComplementares);
      }
      if (struct.isSetStatusUsaPlantaMedicinais()) {
        oprot.writeBool(struct.statusUsaPlantaMedicinais);
      }
      if (struct.isSetStatusDiagnosticoMental()) {
        oprot.writeBool(struct.statusDiagnosticoMental);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CondicoesDeSaudeThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.descricaoCausaInternacaoEm12Meses = iprot.readString();
        struct.setDescricaoCausaInternacaoEm12MesesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.descricaoOutraCondicao1 = iprot.readString();
        struct.setDescricaoOutraCondicao1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.descricaoOutraCondicao2 = iprot.readString();
        struct.setDescricaoOutraCondicao2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.descricaoOutraCondicao3 = iprot.readString();
        struct.setDescricaoOutraCondicao3IsSet(true);
      }
      if (incoming.get(4)) {
        struct.descricaoPlantasMedicinaisUsadas = iprot.readString();
        struct.setDescricaoPlantasMedicinaisUsadasIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.doencaCardiaca = new ArrayList<Long>(_list15.size);
          long _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI64();
            struct.doencaCardiaca.add(_elem16);
          }
        }
        struct.setDoencaCardiacaIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.doencaRespiratoria = new ArrayList<Long>(_list18.size);
          long _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI64();
            struct.doencaRespiratoria.add(_elem19);
          }
        }
        struct.setDoencaRespiratoriaIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.doencaRins = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.doencaRins.add(_elem22);
          }
        }
        struct.setDoencaRinsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maternidadeDeReferencia = iprot.readString();
        struct.setMaternidadeDeReferenciaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.situacaoPeso = iprot.readI64();
        struct.setSituacaoPesoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.statusEhDependenteAlcool = iprot.readBool();
        struct.setStatusEhDependenteAlcoolIsSet(true);
      }
      if (incoming.get(11)) {
        struct.statusEhDependenteOutrasDrogas = iprot.readBool();
        struct.setStatusEhDependenteOutrasDrogasIsSet(true);
      }
      if (incoming.get(12)) {
        struct.statusEhFumante = iprot.readBool();
        struct.setStatusEhFumanteIsSet(true);
      }
      if (incoming.get(13)) {
        struct.statusEhGestante = iprot.readBool();
        struct.setStatusEhGestanteIsSet(true);
      }
      if (incoming.get(14)) {
        struct.statusEstaAcamado = iprot.readBool();
        struct.setStatusEstaAcamadoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.statusEstaDomiciliado = iprot.readBool();
        struct.setStatusEstaDomiciliadoIsSet(true);
      }
      if (incoming.get(16)) {
        struct.statusTemDiabetes = iprot.readBool();
        struct.setStatusTemDiabetesIsSet(true);
      }
      if (incoming.get(17)) {
        struct.statusTemDoencaRespiratoria = iprot.readBool();
        struct.setStatusTemDoencaRespiratoriaIsSet(true);
      }
      if (incoming.get(18)) {
        struct.statusTemHanseniase = iprot.readBool();
        struct.setStatusTemHanseniaseIsSet(true);
      }
      if (incoming.get(19)) {
        struct.statusTemHipertensaoArterial = iprot.readBool();
        struct.setStatusTemHipertensaoArterialIsSet(true);
      }
      if (incoming.get(20)) {
        struct.statusTemTeveCancer = iprot.readBool();
        struct.setStatusTemTeveCancerIsSet(true);
      }
      if (incoming.get(21)) {
        struct.statusTemTeveDoencasRins = iprot.readBool();
        struct.setStatusTemTeveDoencasRinsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.statusTemTuberculose = iprot.readBool();
        struct.setStatusTemTuberculoseIsSet(true);
      }
      if (incoming.get(23)) {
        struct.statusTeveAvcDerrame = iprot.readBool();
        struct.setStatusTeveAvcDerrameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.statusTeveDoencaCardiaca = iprot.readBool();
        struct.setStatusTeveDoencaCardiacaIsSet(true);
      }
      if (incoming.get(25)) {
        struct.statusTeveInfarto = iprot.readBool();
        struct.setStatusTeveInfartoIsSet(true);
      }
      if (incoming.get(26)) {
        struct.statusTeveInternadoEm12Meses = iprot.readBool();
        struct.setStatusTeveInternadoEm12MesesIsSet(true);
      }
      if (incoming.get(27)) {
        struct.statusUsaOutrasPraticasIntegrativasOuComplementares = iprot.readBool();
        struct.setStatusUsaOutrasPraticasIntegrativasOuComplementaresIsSet(true);
      }
      if (incoming.get(28)) {
        struct.statusUsaPlantaMedicinais = iprot.readBool();
        struct.setStatusUsaPlantaMedicinaisIsSet(true);
      }
      if (incoming.get(29)) {
        struct.statusDiagnosticoMental = iprot.readBool();
        struct.setStatusDiagnosticoMentalIsSet(true);
      }
    }
  }

}

