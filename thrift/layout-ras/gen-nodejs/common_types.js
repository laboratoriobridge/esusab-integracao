//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
HeaderCdsCadastroThrift = module.exports.HeaderCdsCadastroThrift = function(args) {
  this.cnesUnidadeSaude = null;
  this.cnsProfissional = null;
  this.codigoIbgeMunicipio = null;
  this.dataAtendimento = null;
  this.ineEquipe = null;
  this.microarea = null;
  if (args) {
    if (args.cnesUnidadeSaude !== undefined && args.cnesUnidadeSaude !== null) {
      this.cnesUnidadeSaude = args.cnesUnidadeSaude;
    }
    if (args.cnsProfissional !== undefined && args.cnsProfissional !== null) {
      this.cnsProfissional = args.cnsProfissional;
    }
    if (args.codigoIbgeMunicipio !== undefined && args.codigoIbgeMunicipio !== null) {
      this.codigoIbgeMunicipio = args.codigoIbgeMunicipio;
    }
    if (args.dataAtendimento !== undefined && args.dataAtendimento !== null) {
      this.dataAtendimento = args.dataAtendimento;
    }
    if (args.ineEquipe !== undefined && args.ineEquipe !== null) {
      this.ineEquipe = args.ineEquipe;
    }
    if (args.microarea !== undefined && args.microarea !== null) {
      this.microarea = args.microarea;
    }
  }
};
HeaderCdsCadastroThrift.prototype = {};
HeaderCdsCadastroThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cnesUnidadeSaude = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cnsProfissional = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dataAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ineEquipe = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.microarea = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HeaderCdsCadastroThrift.prototype.write = function(output) {
  output.writeStructBegin('HeaderCdsCadastroThrift');
  if (this.cnesUnidadeSaude !== null && this.cnesUnidadeSaude !== undefined) {
    output.writeFieldBegin('cnesUnidadeSaude', Thrift.Type.STRING, 1);
    output.writeString(this.cnesUnidadeSaude);
    output.writeFieldEnd();
  }
  if (this.cnsProfissional !== null && this.cnsProfissional !== undefined) {
    output.writeFieldBegin('cnsProfissional', Thrift.Type.STRING, 2);
    output.writeString(this.cnsProfissional);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipio !== null && this.codigoIbgeMunicipio !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipio', Thrift.Type.STRING, 3);
    output.writeString(this.codigoIbgeMunicipio);
    output.writeFieldEnd();
  }
  if (this.dataAtendimento !== null && this.dataAtendimento !== undefined) {
    output.writeFieldBegin('dataAtendimento', Thrift.Type.I64, 4);
    output.writeI64(this.dataAtendimento);
    output.writeFieldEnd();
  }
  if (this.ineEquipe !== null && this.ineEquipe !== undefined) {
    output.writeFieldBegin('ineEquipe', Thrift.Type.STRING, 5);
    output.writeString(this.ineEquipe);
    output.writeFieldEnd();
  }
  if (this.microarea !== null && this.microarea !== undefined) {
    output.writeFieldBegin('microarea', Thrift.Type.I64, 6);
    output.writeI64(this.microarea);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LotacaoHeaderThrift = module.exports.LotacaoHeaderThrift = function(args) {
  this.profissionalCNS = null;
  this.cboCodigo_2002 = null;
  this.cnes = null;
  this.ine = null;
  if (args) {
    if (args.profissionalCNS !== undefined && args.profissionalCNS !== null) {
      this.profissionalCNS = args.profissionalCNS;
    }
    if (args.cboCodigo_2002 !== undefined && args.cboCodigo_2002 !== null) {
      this.cboCodigo_2002 = args.cboCodigo_2002;
    }
    if (args.cnes !== undefined && args.cnes !== null) {
      this.cnes = args.cnes;
    }
    if (args.ine !== undefined && args.ine !== null) {
      this.ine = args.ine;
    }
  }
};
LotacaoHeaderThrift.prototype = {};
LotacaoHeaderThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profissionalCNS = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cboCodigo_2002 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cnes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ine = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LotacaoHeaderThrift.prototype.write = function(output) {
  output.writeStructBegin('LotacaoHeaderThrift');
  if (this.profissionalCNS !== null && this.profissionalCNS !== undefined) {
    output.writeFieldBegin('profissionalCNS', Thrift.Type.STRING, 1);
    output.writeString(this.profissionalCNS);
    output.writeFieldEnd();
  }
  if (this.cboCodigo_2002 !== null && this.cboCodigo_2002 !== undefined) {
    output.writeFieldBegin('cboCodigo_2002', Thrift.Type.STRING, 2);
    output.writeString(this.cboCodigo_2002);
    output.writeFieldEnd();
  }
  if (this.cnes !== null && this.cnes !== undefined) {
    output.writeFieldBegin('cnes', Thrift.Type.STRING, 3);
    output.writeString(this.cnes);
    output.writeFieldEnd();
  }
  if (this.ine !== null && this.ine !== undefined) {
    output.writeFieldBegin('ine', Thrift.Type.STRING, 4);
    output.writeString(this.ine);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnicaLotacaoHeaderThrift = module.exports.UnicaLotacaoHeaderThrift = function(args) {
  this.profissionalCNS = null;
  this.cboCodigo_2002 = null;
  this.cnes = null;
  this.ine = null;
  this.dataAtendimento = null;
  this.codigoIbgeMunicipio = null;
  if (args) {
    if (args.profissionalCNS !== undefined && args.profissionalCNS !== null) {
      this.profissionalCNS = args.profissionalCNS;
    }
    if (args.cboCodigo_2002 !== undefined && args.cboCodigo_2002 !== null) {
      this.cboCodigo_2002 = args.cboCodigo_2002;
    }
    if (args.cnes !== undefined && args.cnes !== null) {
      this.cnes = args.cnes;
    }
    if (args.ine !== undefined && args.ine !== null) {
      this.ine = args.ine;
    }
    if (args.dataAtendimento !== undefined && args.dataAtendimento !== null) {
      this.dataAtendimento = args.dataAtendimento;
    }
    if (args.codigoIbgeMunicipio !== undefined && args.codigoIbgeMunicipio !== null) {
      this.codigoIbgeMunicipio = args.codigoIbgeMunicipio;
    }
  }
};
UnicaLotacaoHeaderThrift.prototype = {};
UnicaLotacaoHeaderThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profissionalCNS = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cboCodigo_2002 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cnes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ine = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.dataAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnicaLotacaoHeaderThrift.prototype.write = function(output) {
  output.writeStructBegin('UnicaLotacaoHeaderThrift');
  if (this.profissionalCNS !== null && this.profissionalCNS !== undefined) {
    output.writeFieldBegin('profissionalCNS', Thrift.Type.STRING, 1);
    output.writeString(this.profissionalCNS);
    output.writeFieldEnd();
  }
  if (this.cboCodigo_2002 !== null && this.cboCodigo_2002 !== undefined) {
    output.writeFieldBegin('cboCodigo_2002', Thrift.Type.STRING, 2);
    output.writeString(this.cboCodigo_2002);
    output.writeFieldEnd();
  }
  if (this.cnes !== null && this.cnes !== undefined) {
    output.writeFieldBegin('cnes', Thrift.Type.STRING, 3);
    output.writeString(this.cnes);
    output.writeFieldEnd();
  }
  if (this.ine !== null && this.ine !== undefined) {
    output.writeFieldBegin('ine', Thrift.Type.STRING, 4);
    output.writeString(this.ine);
    output.writeFieldEnd();
  }
  if (this.dataAtendimento !== null && this.dataAtendimento !== undefined) {
    output.writeFieldBegin('dataAtendimento', Thrift.Type.I64, 5);
    output.writeI64(this.dataAtendimento);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipio !== null && this.codigoIbgeMunicipio !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipio', Thrift.Type.STRING, 6);
    output.writeString(this.codigoIbgeMunicipio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VariasLotacoesHeaderThrift = module.exports.VariasLotacoesHeaderThrift = function(args) {
  this.lotacaoFormPrincipal = null;
  this.lotacaoFormAtendimentoCompartilhado = null;
  this.dataAtendimento = null;
  this.codigoIbgeMunicipio = null;
  if (args) {
    if (args.lotacaoFormPrincipal !== undefined && args.lotacaoFormPrincipal !== null) {
      this.lotacaoFormPrincipal = new ttypes.LotacaoHeaderThrift(args.lotacaoFormPrincipal);
    }
    if (args.lotacaoFormAtendimentoCompartilhado !== undefined && args.lotacaoFormAtendimentoCompartilhado !== null) {
      this.lotacaoFormAtendimentoCompartilhado = new ttypes.LotacaoHeaderThrift(args.lotacaoFormAtendimentoCompartilhado);
    }
    if (args.dataAtendimento !== undefined && args.dataAtendimento !== null) {
      this.dataAtendimento = args.dataAtendimento;
    }
    if (args.codigoIbgeMunicipio !== undefined && args.codigoIbgeMunicipio !== null) {
      this.codigoIbgeMunicipio = args.codigoIbgeMunicipio;
    }
  }
};
VariasLotacoesHeaderThrift.prototype = {};
VariasLotacoesHeaderThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.lotacaoFormPrincipal = new ttypes.LotacaoHeaderThrift();
        this.lotacaoFormPrincipal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.lotacaoFormAtendimentoCompartilhado = new ttypes.LotacaoHeaderThrift();
        this.lotacaoFormAtendimentoCompartilhado.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.dataAtendimento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VariasLotacoesHeaderThrift.prototype.write = function(output) {
  output.writeStructBegin('VariasLotacoesHeaderThrift');
  if (this.lotacaoFormPrincipal !== null && this.lotacaoFormPrincipal !== undefined) {
    output.writeFieldBegin('lotacaoFormPrincipal', Thrift.Type.STRUCT, 6);
    this.lotacaoFormPrincipal.write(output);
    output.writeFieldEnd();
  }
  if (this.lotacaoFormAtendimentoCompartilhado !== null && this.lotacaoFormAtendimentoCompartilhado !== undefined) {
    output.writeFieldBegin('lotacaoFormAtendimentoCompartilhado', Thrift.Type.STRUCT, 7);
    this.lotacaoFormAtendimentoCompartilhado.write(output);
    output.writeFieldEnd();
  }
  if (this.dataAtendimento !== null && this.dataAtendimento !== undefined) {
    output.writeFieldBegin('dataAtendimento', Thrift.Type.I64, 8);
    output.writeI64(this.dataAtendimento);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipio !== null && this.codigoIbgeMunicipio !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipio', Thrift.Type.STRING, 9);
    output.writeString(this.codigoIbgeMunicipio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LotacaoThrift = module.exports.LotacaoThrift = function(args) {
  this.cpf = null;
  this.cns = null;
  this.cboCodigo_2002 = null;
  this.ine = null;
  this.cnes = null;
  this.codigoIbgeMunicipio = null;
  if (args) {
    if (args.cpf !== undefined && args.cpf !== null) {
      this.cpf = args.cpf;
    }
    if (args.cns !== undefined && args.cns !== null) {
      this.cns = args.cns;
    }
    if (args.cboCodigo_2002 !== undefined && args.cboCodigo_2002 !== null) {
      this.cboCodigo_2002 = args.cboCodigo_2002;
    }
    if (args.ine !== undefined && args.ine !== null) {
      this.ine = args.ine;
    }
    if (args.cnes !== undefined && args.cnes !== null) {
      this.cnes = args.cnes;
    }
    if (args.codigoIbgeMunicipio !== undefined && args.codigoIbgeMunicipio !== null) {
      this.codigoIbgeMunicipio = args.codigoIbgeMunicipio;
    }
  }
};
LotacaoThrift.prototype = {};
LotacaoThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cpf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cboCodigo_2002 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ine = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cnes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LotacaoThrift.prototype.write = function(output) {
  output.writeStructBegin('LotacaoThrift');
  if (this.cpf !== null && this.cpf !== undefined) {
    output.writeFieldBegin('cpf', Thrift.Type.STRING, 1);
    output.writeString(this.cpf);
    output.writeFieldEnd();
  }
  if (this.cns !== null && this.cns !== undefined) {
    output.writeFieldBegin('cns', Thrift.Type.STRING, 2);
    output.writeString(this.cns);
    output.writeFieldEnd();
  }
  if (this.cboCodigo_2002 !== null && this.cboCodigo_2002 !== undefined) {
    output.writeFieldBegin('cboCodigo_2002', Thrift.Type.STRING, 3);
    output.writeString(this.cboCodigo_2002);
    output.writeFieldEnd();
  }
  if (this.ine !== null && this.ine !== undefined) {
    output.writeFieldBegin('ine', Thrift.Type.STRING, 4);
    output.writeString(this.ine);
    output.writeFieldEnd();
  }
  if (this.cnes !== null && this.cnes !== undefined) {
    output.writeFieldBegin('cnes', Thrift.Type.STRING, 5);
    output.writeString(this.cnes);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipio !== null && this.codigoIbgeMunicipio !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipio', Thrift.Type.STRING, 6);
    output.writeString(this.codigoIbgeMunicipio);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EnderecoLocalPermanenciaThrift = module.exports.EnderecoLocalPermanenciaThrift = function(args) {
  this.bairro = null;
  this.cep = null;
  this.codigoIbgeMunicipio = null;
  this.complemento = null;
  this.nomeLogradouro = null;
  this.numero = null;
  this.numeroDneUf = null;
  this.telefoneContato = null;
  this.telefoneResidencia = null;
  this.tipoLogradouroNumeroDne = null;
  this.stSemNumero = null;
  this.pontoReferencia = null;
  this.microArea = null;
  this.stForaArea = null;
  if (args) {
    if (args.bairro !== undefined && args.bairro !== null) {
      this.bairro = args.bairro;
    }
    if (args.cep !== undefined && args.cep !== null) {
      this.cep = args.cep;
    }
    if (args.codigoIbgeMunicipio !== undefined && args.codigoIbgeMunicipio !== null) {
      this.codigoIbgeMunicipio = args.codigoIbgeMunicipio;
    }
    if (args.complemento !== undefined && args.complemento !== null) {
      this.complemento = args.complemento;
    }
    if (args.nomeLogradouro !== undefined && args.nomeLogradouro !== null) {
      this.nomeLogradouro = args.nomeLogradouro;
    }
    if (args.numero !== undefined && args.numero !== null) {
      this.numero = args.numero;
    }
    if (args.numeroDneUf !== undefined && args.numeroDneUf !== null) {
      this.numeroDneUf = args.numeroDneUf;
    }
    if (args.telefoneContato !== undefined && args.telefoneContato !== null) {
      this.telefoneContato = args.telefoneContato;
    }
    if (args.telefoneResidencia !== undefined && args.telefoneResidencia !== null) {
      this.telefoneResidencia = args.telefoneResidencia;
    }
    if (args.tipoLogradouroNumeroDne !== undefined && args.tipoLogradouroNumeroDne !== null) {
      this.tipoLogradouroNumeroDne = args.tipoLogradouroNumeroDne;
    }
    if (args.stSemNumero !== undefined && args.stSemNumero !== null) {
      this.stSemNumero = args.stSemNumero;
    }
    if (args.pontoReferencia !== undefined && args.pontoReferencia !== null) {
      this.pontoReferencia = args.pontoReferencia;
    }
    if (args.microArea !== undefined && args.microArea !== null) {
      this.microArea = args.microArea;
    }
    if (args.stForaArea !== undefined && args.stForaArea !== null) {
      this.stForaArea = args.stForaArea;
    }
  }
};
EnderecoLocalPermanenciaThrift.prototype = {};
EnderecoLocalPermanenciaThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bairro = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cep = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.codigoIbgeMunicipio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.complemento = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nomeLogradouro = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.numero = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.numeroDneUf = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.telefoneContato = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.telefoneResidencia = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.tipoLogradouroNumeroDne = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.stSemNumero = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.pontoReferencia = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.microArea = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.stForaArea = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnderecoLocalPermanenciaThrift.prototype.write = function(output) {
  output.writeStructBegin('EnderecoLocalPermanenciaThrift');
  if (this.bairro !== null && this.bairro !== undefined) {
    output.writeFieldBegin('bairro', Thrift.Type.STRING, 1);
    output.writeString(this.bairro);
    output.writeFieldEnd();
  }
  if (this.cep !== null && this.cep !== undefined) {
    output.writeFieldBegin('cep', Thrift.Type.STRING, 2);
    output.writeString(this.cep);
    output.writeFieldEnd();
  }
  if (this.codigoIbgeMunicipio !== null && this.codigoIbgeMunicipio !== undefined) {
    output.writeFieldBegin('codigoIbgeMunicipio', Thrift.Type.STRING, 3);
    output.writeString(this.codigoIbgeMunicipio);
    output.writeFieldEnd();
  }
  if (this.complemento !== null && this.complemento !== undefined) {
    output.writeFieldBegin('complemento', Thrift.Type.STRING, 4);
    output.writeString(this.complemento);
    output.writeFieldEnd();
  }
  if (this.nomeLogradouro !== null && this.nomeLogradouro !== undefined) {
    output.writeFieldBegin('nomeLogradouro', Thrift.Type.STRING, 5);
    output.writeString(this.nomeLogradouro);
    output.writeFieldEnd();
  }
  if (this.numero !== null && this.numero !== undefined) {
    output.writeFieldBegin('numero', Thrift.Type.STRING, 6);
    output.writeString(this.numero);
    output.writeFieldEnd();
  }
  if (this.numeroDneUf !== null && this.numeroDneUf !== undefined) {
    output.writeFieldBegin('numeroDneUf', Thrift.Type.STRING, 7);
    output.writeString(this.numeroDneUf);
    output.writeFieldEnd();
  }
  if (this.telefoneContato !== null && this.telefoneContato !== undefined) {
    output.writeFieldBegin('telefoneContato', Thrift.Type.STRING, 8);
    output.writeString(this.telefoneContato);
    output.writeFieldEnd();
  }
  if (this.telefoneResidencia !== null && this.telefoneResidencia !== undefined) {
    output.writeFieldBegin('telefoneResidencia', Thrift.Type.STRING, 9);
    output.writeString(this.telefoneResidencia);
    output.writeFieldEnd();
  }
  if (this.tipoLogradouroNumeroDne !== null && this.tipoLogradouroNumeroDne !== undefined) {
    output.writeFieldBegin('tipoLogradouroNumeroDne', Thrift.Type.STRING, 10);
    output.writeString(this.tipoLogradouroNumeroDne);
    output.writeFieldEnd();
  }
  if (this.stSemNumero !== null && this.stSemNumero !== undefined) {
    output.writeFieldBegin('stSemNumero', Thrift.Type.BOOL, 11);
    output.writeBool(this.stSemNumero);
    output.writeFieldEnd();
  }
  if (this.pontoReferencia !== null && this.pontoReferencia !== undefined) {
    output.writeFieldBegin('pontoReferencia', Thrift.Type.STRING, 12);
    output.writeString(this.pontoReferencia);
    output.writeFieldEnd();
  }
  if (this.microArea !== null && this.microArea !== undefined) {
    output.writeFieldBegin('microArea', Thrift.Type.STRING, 13);
    output.writeString(this.microArea);
    output.writeFieldEnd();
  }
  if (this.stForaArea !== null && this.stForaArea !== undefined) {
    output.writeFieldBegin('stForaArea', Thrift.Type.BOOL, 14);
    output.writeBool(this.stForaArea);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MedicamentoThrift = module.exports.MedicamentoThrift = function(args) {
  this.codigoCatmat = null;
  this.viaAdministracao = null;
  this.dose = null;
  this.doseUnica = null;
  this.usoContinuo = null;
  this.doseFrequenciaTipo = null;
  this.doseFrequencia = null;
  this.doseFrequenciaQuantidade = null;
  this.doseFrequenciaUnidadeMedida = null;
  this.dtInicioTratamento = null;
  this.duracaoTratamento = null;
  this.duracaoTratamentoMedida = null;
  this.quantidadeReceitada = null;
  this.qtDoseManha = null;
  this.qtDoseTarde = null;
  this.qtDoseNoite = null;
  if (args) {
    if (args.codigoCatmat !== undefined && args.codigoCatmat !== null) {
      this.codigoCatmat = args.codigoCatmat;
    }
    if (args.viaAdministracao !== undefined && args.viaAdministracao !== null) {
      this.viaAdministracao = args.viaAdministracao;
    }
    if (args.dose !== undefined && args.dose !== null) {
      this.dose = args.dose;
    }
    if (args.doseUnica !== undefined && args.doseUnica !== null) {
      this.doseUnica = args.doseUnica;
    }
    if (args.usoContinuo !== undefined && args.usoContinuo !== null) {
      this.usoContinuo = args.usoContinuo;
    }
    if (args.doseFrequenciaTipo !== undefined && args.doseFrequenciaTipo !== null) {
      this.doseFrequenciaTipo = args.doseFrequenciaTipo;
    }
    if (args.doseFrequencia !== undefined && args.doseFrequencia !== null) {
      this.doseFrequencia = args.doseFrequencia;
    }
    if (args.doseFrequenciaQuantidade !== undefined && args.doseFrequenciaQuantidade !== null) {
      this.doseFrequenciaQuantidade = args.doseFrequenciaQuantidade;
    }
    if (args.doseFrequenciaUnidadeMedida !== undefined && args.doseFrequenciaUnidadeMedida !== null) {
      this.doseFrequenciaUnidadeMedida = args.doseFrequenciaUnidadeMedida;
    }
    if (args.dtInicioTratamento !== undefined && args.dtInicioTratamento !== null) {
      this.dtInicioTratamento = args.dtInicioTratamento;
    }
    if (args.duracaoTratamento !== undefined && args.duracaoTratamento !== null) {
      this.duracaoTratamento = args.duracaoTratamento;
    }
    if (args.duracaoTratamentoMedida !== undefined && args.duracaoTratamentoMedida !== null) {
      this.duracaoTratamentoMedida = args.duracaoTratamentoMedida;
    }
    if (args.quantidadeReceitada !== undefined && args.quantidadeReceitada !== null) {
      this.quantidadeReceitada = args.quantidadeReceitada;
    }
    if (args.qtDoseManha !== undefined && args.qtDoseManha !== null) {
      this.qtDoseManha = args.qtDoseManha;
    }
    if (args.qtDoseTarde !== undefined && args.qtDoseTarde !== null) {
      this.qtDoseTarde = args.qtDoseTarde;
    }
    if (args.qtDoseNoite !== undefined && args.qtDoseNoite !== null) {
      this.qtDoseNoite = args.qtDoseNoite;
    }
  }
};
MedicamentoThrift.prototype = {};
MedicamentoThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.codigoCatmat = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.viaAdministracao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dose = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.doseUnica = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.usoContinuo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.doseFrequenciaTipo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.doseFrequencia = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.doseFrequenciaQuantidade = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.doseFrequenciaUnidadeMedida = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.dtInicioTratamento = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.duracaoTratamento = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.duracaoTratamentoMedida = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.quantidadeReceitada = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.qtDoseManha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.qtDoseTarde = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.qtDoseNoite = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MedicamentoThrift.prototype.write = function(output) {
  output.writeStructBegin('MedicamentoThrift');
  if (this.codigoCatmat !== null && this.codigoCatmat !== undefined) {
    output.writeFieldBegin('codigoCatmat', Thrift.Type.STRING, 1);
    output.writeString(this.codigoCatmat);
    output.writeFieldEnd();
  }
  if (this.viaAdministracao !== null && this.viaAdministracao !== undefined) {
    output.writeFieldBegin('viaAdministracao', Thrift.Type.I64, 2);
    output.writeI64(this.viaAdministracao);
    output.writeFieldEnd();
  }
  if (this.dose !== null && this.dose !== undefined) {
    output.writeFieldBegin('dose', Thrift.Type.STRING, 3);
    output.writeString(this.dose);
    output.writeFieldEnd();
  }
  if (this.doseUnica !== null && this.doseUnica !== undefined) {
    output.writeFieldBegin('doseUnica', Thrift.Type.BOOL, 4);
    output.writeBool(this.doseUnica);
    output.writeFieldEnd();
  }
  if (this.usoContinuo !== null && this.usoContinuo !== undefined) {
    output.writeFieldBegin('usoContinuo', Thrift.Type.BOOL, 5);
    output.writeBool(this.usoContinuo);
    output.writeFieldEnd();
  }
  if (this.doseFrequenciaTipo !== null && this.doseFrequenciaTipo !== undefined) {
    output.writeFieldBegin('doseFrequenciaTipo', Thrift.Type.I64, 6);
    output.writeI64(this.doseFrequenciaTipo);
    output.writeFieldEnd();
  }
  if (this.doseFrequencia !== null && this.doseFrequencia !== undefined) {
    output.writeFieldBegin('doseFrequencia', Thrift.Type.STRING, 7);
    output.writeString(this.doseFrequencia);
    output.writeFieldEnd();
  }
  if (this.doseFrequenciaQuantidade !== null && this.doseFrequenciaQuantidade !== undefined) {
    output.writeFieldBegin('doseFrequenciaQuantidade', Thrift.Type.I32, 8);
    output.writeI32(this.doseFrequenciaQuantidade);
    output.writeFieldEnd();
  }
  if (this.doseFrequenciaUnidadeMedida !== null && this.doseFrequenciaUnidadeMedida !== undefined) {
    output.writeFieldBegin('doseFrequenciaUnidadeMedida', Thrift.Type.I64, 9);
    output.writeI64(this.doseFrequenciaUnidadeMedida);
    output.writeFieldEnd();
  }
  if (this.dtInicioTratamento !== null && this.dtInicioTratamento !== undefined) {
    output.writeFieldBegin('dtInicioTratamento', Thrift.Type.I64, 10);
    output.writeI64(this.dtInicioTratamento);
    output.writeFieldEnd();
  }
  if (this.duracaoTratamento !== null && this.duracaoTratamento !== undefined) {
    output.writeFieldBegin('duracaoTratamento', Thrift.Type.I32, 11);
    output.writeI32(this.duracaoTratamento);
    output.writeFieldEnd();
  }
  if (this.duracaoTratamentoMedida !== null && this.duracaoTratamentoMedida !== undefined) {
    output.writeFieldBegin('duracaoTratamentoMedida', Thrift.Type.I64, 12);
    output.writeI64(this.duracaoTratamentoMedida);
    output.writeFieldEnd();
  }
  if (this.quantidadeReceitada !== null && this.quantidadeReceitada !== undefined) {
    output.writeFieldBegin('quantidadeReceitada', Thrift.Type.I32, 13);
    output.writeI32(this.quantidadeReceitada);
    output.writeFieldEnd();
  }
  if (this.qtDoseManha !== null && this.qtDoseManha !== undefined) {
    output.writeFieldBegin('qtDoseManha', Thrift.Type.STRING, 15);
    output.writeString(this.qtDoseManha);
    output.writeFieldEnd();
  }
  if (this.qtDoseTarde !== null && this.qtDoseTarde !== undefined) {
    output.writeFieldBegin('qtDoseTarde', Thrift.Type.STRING, 16);
    output.writeString(this.qtDoseTarde);
    output.writeFieldEnd();
  }
  if (this.qtDoseNoite !== null && this.qtDoseNoite !== undefined) {
    output.writeFieldBegin('qtDoseNoite', Thrift.Type.STRING, 17);
    output.writeString(this.qtDoseNoite);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EncaminhamentoExternoThrift = module.exports.EncaminhamentoExternoThrift = function(args) {
  this.especialidade = null;
  this.hipoteseDiagnosticoCid10 = null;
  this.hipoteseDiagnosticoCiap2 = null;
  this.classificacaoRisco = null;
  if (args) {
    if (args.especialidade !== undefined && args.especialidade !== null) {
      this.especialidade = args.especialidade;
    }
    if (args.hipoteseDiagnosticoCid10 !== undefined && args.hipoteseDiagnosticoCid10 !== null) {
      this.hipoteseDiagnosticoCid10 = args.hipoteseDiagnosticoCid10;
    }
    if (args.hipoteseDiagnosticoCiap2 !== undefined && args.hipoteseDiagnosticoCiap2 !== null) {
      this.hipoteseDiagnosticoCiap2 = args.hipoteseDiagnosticoCiap2;
    }
    if (args.classificacaoRisco !== undefined && args.classificacaoRisco !== null) {
      this.classificacaoRisco = args.classificacaoRisco;
    }
  }
};
EncaminhamentoExternoThrift.prototype = {};
EncaminhamentoExternoThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.especialidade = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hipoteseDiagnosticoCid10 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hipoteseDiagnosticoCiap2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.classificacaoRisco = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EncaminhamentoExternoThrift.prototype.write = function(output) {
  output.writeStructBegin('EncaminhamentoExternoThrift');
  if (this.especialidade !== null && this.especialidade !== undefined) {
    output.writeFieldBegin('especialidade', Thrift.Type.I64, 1);
    output.writeI64(this.especialidade);
    output.writeFieldEnd();
  }
  if (this.hipoteseDiagnosticoCid10 !== null && this.hipoteseDiagnosticoCid10 !== undefined) {
    output.writeFieldBegin('hipoteseDiagnosticoCid10', Thrift.Type.STRING, 2);
    output.writeString(this.hipoteseDiagnosticoCid10);
    output.writeFieldEnd();
  }
  if (this.hipoteseDiagnosticoCiap2 !== null && this.hipoteseDiagnosticoCiap2 !== undefined) {
    output.writeFieldBegin('hipoteseDiagnosticoCiap2', Thrift.Type.STRING, 3);
    output.writeString(this.hipoteseDiagnosticoCiap2);
    output.writeFieldEnd();
  }
  if (this.classificacaoRisco !== null && this.classificacaoRisco !== undefined) {
    output.writeFieldBegin('classificacaoRisco', Thrift.Type.I64, 4);
    output.writeI64(this.classificacaoRisco);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultadoExameThrift = module.exports.ResultadoExameThrift = function(args) {
  this.tipoResultado = null;
  this.valorResultado = null;
  if (args) {
    if (args.tipoResultado !== undefined && args.tipoResultado !== null) {
      this.tipoResultado = args.tipoResultado;
    }
    if (args.valorResultado !== undefined && args.valorResultado !== null) {
      this.valorResultado = args.valorResultado;
    }
  }
};
ResultadoExameThrift.prototype = {};
ResultadoExameThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tipoResultado = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.valorResultado = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultadoExameThrift.prototype.write = function(output) {
  output.writeStructBegin('ResultadoExameThrift');
  if (this.tipoResultado !== null && this.tipoResultado !== undefined) {
    output.writeFieldBegin('tipoResultado', Thrift.Type.I32, 1);
    output.writeI32(this.tipoResultado);
    output.writeFieldEnd();
  }
  if (this.valorResultado !== null && this.valorResultado !== undefined) {
    output.writeFieldBegin('valorResultado', Thrift.Type.STRING, 2);
    output.writeString(this.valorResultado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultadosExameThrift = module.exports.ResultadosExameThrift = function(args) {
  this.exame = null;
  this.dataSolicitacao = null;
  this.dataRealizacao = null;
  this.dataResultado = null;
  this.resultadoExame = null;
  if (args) {
    if (args.exame !== undefined && args.exame !== null) {
      this.exame = args.exame;
    }
    if (args.dataSolicitacao !== undefined && args.dataSolicitacao !== null) {
      this.dataSolicitacao = args.dataSolicitacao;
    }
    if (args.dataRealizacao !== undefined && args.dataRealizacao !== null) {
      this.dataRealizacao = args.dataRealizacao;
    }
    if (args.dataResultado !== undefined && args.dataResultado !== null) {
      this.dataResultado = args.dataResultado;
    }
    if (args.resultadoExame !== undefined && args.resultadoExame !== null) {
      this.resultadoExame = Thrift.copyList(args.resultadoExame, [ttypes.ResultadoExameThrift]);
    }
  }
};
ResultadosExameThrift.prototype = {};
ResultadosExameThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.exame = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dataSolicitacao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dataRealizacao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dataResultado = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.resultadoExame = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ResultadoExameThrift();
          elem6.read(input);
          this.resultadoExame.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultadosExameThrift.prototype.write = function(output) {
  output.writeStructBegin('ResultadosExameThrift');
  if (this.exame !== null && this.exame !== undefined) {
    output.writeFieldBegin('exame', Thrift.Type.STRING, 1);
    output.writeString(this.exame);
    output.writeFieldEnd();
  }
  if (this.dataSolicitacao !== null && this.dataSolicitacao !== undefined) {
    output.writeFieldBegin('dataSolicitacao', Thrift.Type.I64, 2);
    output.writeI64(this.dataSolicitacao);
    output.writeFieldEnd();
  }
  if (this.dataRealizacao !== null && this.dataRealizacao !== undefined) {
    output.writeFieldBegin('dataRealizacao', Thrift.Type.I64, 3);
    output.writeI64(this.dataRealizacao);
    output.writeFieldEnd();
  }
  if (this.dataResultado !== null && this.dataResultado !== undefined) {
    output.writeFieldBegin('dataResultado', Thrift.Type.I64, 4);
    output.writeI64(this.dataResultado);
    output.writeFieldEnd();
  }
  if (this.resultadoExame !== null && this.resultadoExame !== undefined) {
    output.writeFieldBegin('resultadoExame', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.resultadoExame.length);
    for (var iter7 in this.resultadoExame)
    {
      if (this.resultadoExame.hasOwnProperty(iter7))
      {
        iter7 = this.resultadoExame[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MedicoesThrift = module.exports.MedicoesThrift = function(args) {
  this.circunferenciaAbdominal = null;
  this.perimetroPanturrilha = null;
  this.pressaoArterialSistolica = null;
  this.pressaoArterialDiastolica = null;
  this.frequenciaRespiratoria = null;
  this.frequenciaCardiaca = null;
  this.temperatura = null;
  this.saturacaoO2 = null;
  this.glicemiaCapilar = null;
  this.tipoGlicemiaCapilar = null;
  this.peso = null;
  this.altura = null;
  this.perimetroCefalico = null;
  if (args) {
    if (args.circunferenciaAbdominal !== undefined && args.circunferenciaAbdominal !== null) {
      this.circunferenciaAbdominal = args.circunferenciaAbdominal;
    }
    if (args.perimetroPanturrilha !== undefined && args.perimetroPanturrilha !== null) {
      this.perimetroPanturrilha = args.perimetroPanturrilha;
    }
    if (args.pressaoArterialSistolica !== undefined && args.pressaoArterialSistolica !== null) {
      this.pressaoArterialSistolica = args.pressaoArterialSistolica;
    }
    if (args.pressaoArterialDiastolica !== undefined && args.pressaoArterialDiastolica !== null) {
      this.pressaoArterialDiastolica = args.pressaoArterialDiastolica;
    }
    if (args.frequenciaRespiratoria !== undefined && args.frequenciaRespiratoria !== null) {
      this.frequenciaRespiratoria = args.frequenciaRespiratoria;
    }
    if (args.frequenciaCardiaca !== undefined && args.frequenciaCardiaca !== null) {
      this.frequenciaCardiaca = args.frequenciaCardiaca;
    }
    if (args.temperatura !== undefined && args.temperatura !== null) {
      this.temperatura = args.temperatura;
    }
    if (args.saturacaoO2 !== undefined && args.saturacaoO2 !== null) {
      this.saturacaoO2 = args.saturacaoO2;
    }
    if (args.glicemiaCapilar !== undefined && args.glicemiaCapilar !== null) {
      this.glicemiaCapilar = args.glicemiaCapilar;
    }
    if (args.tipoGlicemiaCapilar !== undefined && args.tipoGlicemiaCapilar !== null) {
      this.tipoGlicemiaCapilar = args.tipoGlicemiaCapilar;
    }
    if (args.peso !== undefined && args.peso !== null) {
      this.peso = args.peso;
    }
    if (args.altura !== undefined && args.altura !== null) {
      this.altura = args.altura;
    }
    if (args.perimetroCefalico !== undefined && args.perimetroCefalico !== null) {
      this.perimetroCefalico = args.perimetroCefalico;
    }
  }
};
MedicoesThrift.prototype = {};
MedicoesThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.circunferenciaAbdominal = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.perimetroPanturrilha = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pressaoArterialSistolica = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pressaoArterialDiastolica = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.frequenciaRespiratoria = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.frequenciaCardiaca = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.temperatura = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.saturacaoO2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.glicemiaCapilar = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.tipoGlicemiaCapilar = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.peso = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altura = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.perimetroCefalico = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MedicoesThrift.prototype.write = function(output) {
  output.writeStructBegin('MedicoesThrift');
  if (this.circunferenciaAbdominal !== null && this.circunferenciaAbdominal !== undefined) {
    output.writeFieldBegin('circunferenciaAbdominal', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.circunferenciaAbdominal);
    output.writeFieldEnd();
  }
  if (this.perimetroPanturrilha !== null && this.perimetroPanturrilha !== undefined) {
    output.writeFieldBegin('perimetroPanturrilha', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.perimetroPanturrilha);
    output.writeFieldEnd();
  }
  if (this.pressaoArterialSistolica !== null && this.pressaoArterialSistolica !== undefined) {
    output.writeFieldBegin('pressaoArterialSistolica', Thrift.Type.I32, 3);
    output.writeI32(this.pressaoArterialSistolica);
    output.writeFieldEnd();
  }
  if (this.pressaoArterialDiastolica !== null && this.pressaoArterialDiastolica !== undefined) {
    output.writeFieldBegin('pressaoArterialDiastolica', Thrift.Type.I32, 4);
    output.writeI32(this.pressaoArterialDiastolica);
    output.writeFieldEnd();
  }
  if (this.frequenciaRespiratoria !== null && this.frequenciaRespiratoria !== undefined) {
    output.writeFieldBegin('frequenciaRespiratoria', Thrift.Type.I32, 5);
    output.writeI32(this.frequenciaRespiratoria);
    output.writeFieldEnd();
  }
  if (this.frequenciaCardiaca !== null && this.frequenciaCardiaca !== undefined) {
    output.writeFieldBegin('frequenciaCardiaca', Thrift.Type.I32, 6);
    output.writeI32(this.frequenciaCardiaca);
    output.writeFieldEnd();
  }
  if (this.temperatura !== null && this.temperatura !== undefined) {
    output.writeFieldBegin('temperatura', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.temperatura);
    output.writeFieldEnd();
  }
  if (this.saturacaoO2 !== null && this.saturacaoO2 !== undefined) {
    output.writeFieldBegin('saturacaoO2', Thrift.Type.I32, 8);
    output.writeI32(this.saturacaoO2);
    output.writeFieldEnd();
  }
  if (this.glicemiaCapilar !== null && this.glicemiaCapilar !== undefined) {
    output.writeFieldBegin('glicemiaCapilar', Thrift.Type.I32, 9);
    output.writeI32(this.glicemiaCapilar);
    output.writeFieldEnd();
  }
  if (this.tipoGlicemiaCapilar !== null && this.tipoGlicemiaCapilar !== undefined) {
    output.writeFieldBegin('tipoGlicemiaCapilar', Thrift.Type.I64, 10);
    output.writeI64(this.tipoGlicemiaCapilar);
    output.writeFieldEnd();
  }
  if (this.peso !== null && this.peso !== undefined) {
    output.writeFieldBegin('peso', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.peso);
    output.writeFieldEnd();
  }
  if (this.altura !== null && this.altura !== undefined) {
    output.writeFieldBegin('altura', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.altura);
    output.writeFieldEnd();
  }
  if (this.perimetroCefalico !== null && this.perimetroCefalico !== undefined) {
    output.writeFieldBegin('perimetroCefalico', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.perimetroCefalico);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProblemaCondicaoThrift = module.exports.ProblemaCondicaoThrift = function(args) {
  this.uuidProblema = null;
  this.uuidEvolucaoProblema = null;
  this.coSequencialEvolucao = null;
  this.ciap = null;
  this.cid10 = null;
  this.situacao = null;
  this.dataInicioProblema = null;
  this.dataFimProblema = null;
  this.isAvaliado = null;
  if (args) {
    if (args.uuidProblema !== undefined && args.uuidProblema !== null) {
      this.uuidProblema = args.uuidProblema;
    }
    if (args.uuidEvolucaoProblema !== undefined && args.uuidEvolucaoProblema !== null) {
      this.uuidEvolucaoProblema = args.uuidEvolucaoProblema;
    }
    if (args.coSequencialEvolucao !== undefined && args.coSequencialEvolucao !== null) {
      this.coSequencialEvolucao = args.coSequencialEvolucao;
    }
    if (args.ciap !== undefined && args.ciap !== null) {
      this.ciap = args.ciap;
    }
    if (args.cid10 !== undefined && args.cid10 !== null) {
      this.cid10 = args.cid10;
    }
    if (args.situacao !== undefined && args.situacao !== null) {
      this.situacao = args.situacao;
    }
    if (args.dataInicioProblema !== undefined && args.dataInicioProblema !== null) {
      this.dataInicioProblema = args.dataInicioProblema;
    }
    if (args.dataFimProblema !== undefined && args.dataFimProblema !== null) {
      this.dataFimProblema = args.dataFimProblema;
    }
    if (args.isAvaliado !== undefined && args.isAvaliado !== null) {
      this.isAvaliado = args.isAvaliado;
    }
  }
};
ProblemaCondicaoThrift.prototype = {};
ProblemaCondicaoThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuidProblema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuidEvolucaoProblema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.coSequencialEvolucao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ciap = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cid10 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.situacao = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.dataInicioProblema = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.dataFimProblema = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isAvaliado = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProblemaCondicaoThrift.prototype.write = function(output) {
  output.writeStructBegin('ProblemaCondicaoThrift');
  if (this.uuidProblema !== null && this.uuidProblema !== undefined) {
    output.writeFieldBegin('uuidProblema', Thrift.Type.STRING, 1);
    output.writeString(this.uuidProblema);
    output.writeFieldEnd();
  }
  if (this.uuidEvolucaoProblema !== null && this.uuidEvolucaoProblema !== undefined) {
    output.writeFieldBegin('uuidEvolucaoProblema', Thrift.Type.STRING, 2);
    output.writeString(this.uuidEvolucaoProblema);
    output.writeFieldEnd();
  }
  if (this.coSequencialEvolucao !== null && this.coSequencialEvolucao !== undefined) {
    output.writeFieldBegin('coSequencialEvolucao', Thrift.Type.I64, 3);
    output.writeI64(this.coSequencialEvolucao);
    output.writeFieldEnd();
  }
  if (this.ciap !== null && this.ciap !== undefined) {
    output.writeFieldBegin('ciap', Thrift.Type.STRING, 4);
    output.writeString(this.ciap);
    output.writeFieldEnd();
  }
  if (this.cid10 !== null && this.cid10 !== undefined) {
    output.writeFieldBegin('cid10', Thrift.Type.STRING, 5);
    output.writeString(this.cid10);
    output.writeFieldEnd();
  }
  if (this.situacao !== null && this.situacao !== undefined) {
    output.writeFieldBegin('situacao', Thrift.Type.I64, 6);
    output.writeI64(this.situacao);
    output.writeFieldEnd();
  }
  if (this.dataInicioProblema !== null && this.dataInicioProblema !== undefined) {
    output.writeFieldBegin('dataInicioProblema', Thrift.Type.I64, 7);
    output.writeI64(this.dataInicioProblema);
    output.writeFieldEnd();
  }
  if (this.dataFimProblema !== null && this.dataFimProblema !== undefined) {
    output.writeFieldBegin('dataFimProblema', Thrift.Type.I64, 8);
    output.writeI64(this.dataFimProblema);
    output.writeFieldEnd();
  }
  if (this.isAvaliado !== null && this.isAvaliado !== undefined) {
    output.writeFieldBegin('isAvaliado', Thrift.Type.BOOL, 9);
    output.writeBool(this.isAvaliado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IvcfThrift = module.exports.IvcfThrift = function(args) {
  this.resultado = null;
  this.hasSgIdade = null;
  this.hasSgPercepcaoSaude = null;
  this.hasSgAvdInstrumental = null;
  this.hasSgAvdBasica = null;
  this.hasSgCognicao = null;
  this.hasSgHumor = null;
  this.hasSgAlcancePreensaoPinca = null;
  this.hasSgCapAerobicaMuscular = null;
  this.hasSgMarcha = null;
  this.hasSgContinencia = null;
  this.hasSgVisao = null;
  this.hasSgAudicao = null;
  this.hasSgComorbidade = null;
  this.dataResultado = null;
  if (args) {
    if (args.resultado !== undefined && args.resultado !== null) {
      this.resultado = args.resultado;
    }
    if (args.hasSgIdade !== undefined && args.hasSgIdade !== null) {
      this.hasSgIdade = args.hasSgIdade;
    }
    if (args.hasSgPercepcaoSaude !== undefined && args.hasSgPercepcaoSaude !== null) {
      this.hasSgPercepcaoSaude = args.hasSgPercepcaoSaude;
    }
    if (args.hasSgAvdInstrumental !== undefined && args.hasSgAvdInstrumental !== null) {
      this.hasSgAvdInstrumental = args.hasSgAvdInstrumental;
    }
    if (args.hasSgAvdBasica !== undefined && args.hasSgAvdBasica !== null) {
      this.hasSgAvdBasica = args.hasSgAvdBasica;
    }
    if (args.hasSgCognicao !== undefined && args.hasSgCognicao !== null) {
      this.hasSgCognicao = args.hasSgCognicao;
    }
    if (args.hasSgHumor !== undefined && args.hasSgHumor !== null) {
      this.hasSgHumor = args.hasSgHumor;
    }
    if (args.hasSgAlcancePreensaoPinca !== undefined && args.hasSgAlcancePreensaoPinca !== null) {
      this.hasSgAlcancePreensaoPinca = args.hasSgAlcancePreensaoPinca;
    }
    if (args.hasSgCapAerobicaMuscular !== undefined && args.hasSgCapAerobicaMuscular !== null) {
      this.hasSgCapAerobicaMuscular = args.hasSgCapAerobicaMuscular;
    }
    if (args.hasSgMarcha !== undefined && args.hasSgMarcha !== null) {
      this.hasSgMarcha = args.hasSgMarcha;
    }
    if (args.hasSgContinencia !== undefined && args.hasSgContinencia !== null) {
      this.hasSgContinencia = args.hasSgContinencia;
    }
    if (args.hasSgVisao !== undefined && args.hasSgVisao !== null) {
      this.hasSgVisao = args.hasSgVisao;
    }
    if (args.hasSgAudicao !== undefined && args.hasSgAudicao !== null) {
      this.hasSgAudicao = args.hasSgAudicao;
    }
    if (args.hasSgComorbidade !== undefined && args.hasSgComorbidade !== null) {
      this.hasSgComorbidade = args.hasSgComorbidade;
    }
    if (args.dataResultado !== undefined && args.dataResultado !== null) {
      this.dataResultado = args.dataResultado;
    }
  }
};
IvcfThrift.prototype = {};
IvcfThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resultado = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgIdade = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgPercepcaoSaude = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgAvdInstrumental = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgAvdBasica = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgCognicao = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgHumor = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgAlcancePreensaoPinca = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgCapAerobicaMuscular = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgMarcha = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgContinencia = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgVisao = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgAudicao = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSgComorbidade = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.dataResultado = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IvcfThrift.prototype.write = function(output) {
  output.writeStructBegin('IvcfThrift');
  if (this.resultado !== null && this.resultado !== undefined) {
    output.writeFieldBegin('resultado', Thrift.Type.I32, 1);
    output.writeI32(this.resultado);
    output.writeFieldEnd();
  }
  if (this.hasSgIdade !== null && this.hasSgIdade !== undefined) {
    output.writeFieldBegin('hasSgIdade', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasSgIdade);
    output.writeFieldEnd();
  }
  if (this.hasSgPercepcaoSaude !== null && this.hasSgPercepcaoSaude !== undefined) {
    output.writeFieldBegin('hasSgPercepcaoSaude', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasSgPercepcaoSaude);
    output.writeFieldEnd();
  }
  if (this.hasSgAvdInstrumental !== null && this.hasSgAvdInstrumental !== undefined) {
    output.writeFieldBegin('hasSgAvdInstrumental', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasSgAvdInstrumental);
    output.writeFieldEnd();
  }
  if (this.hasSgAvdBasica !== null && this.hasSgAvdBasica !== undefined) {
    output.writeFieldBegin('hasSgAvdBasica', Thrift.Type.BOOL, 5);
    output.writeBool(this.hasSgAvdBasica);
    output.writeFieldEnd();
  }
  if (this.hasSgCognicao !== null && this.hasSgCognicao !== undefined) {
    output.writeFieldBegin('hasSgCognicao', Thrift.Type.BOOL, 6);
    output.writeBool(this.hasSgCognicao);
    output.writeFieldEnd();
  }
  if (this.hasSgHumor !== null && this.hasSgHumor !== undefined) {
    output.writeFieldBegin('hasSgHumor', Thrift.Type.BOOL, 7);
    output.writeBool(this.hasSgHumor);
    output.writeFieldEnd();
  }
  if (this.hasSgAlcancePreensaoPinca !== null && this.hasSgAlcancePreensaoPinca !== undefined) {
    output.writeFieldBegin('hasSgAlcancePreensaoPinca', Thrift.Type.BOOL, 8);
    output.writeBool(this.hasSgAlcancePreensaoPinca);
    output.writeFieldEnd();
  }
  if (this.hasSgCapAerobicaMuscular !== null && this.hasSgCapAerobicaMuscular !== undefined) {
    output.writeFieldBegin('hasSgCapAerobicaMuscular', Thrift.Type.BOOL, 9);
    output.writeBool(this.hasSgCapAerobicaMuscular);
    output.writeFieldEnd();
  }
  if (this.hasSgMarcha !== null && this.hasSgMarcha !== undefined) {
    output.writeFieldBegin('hasSgMarcha', Thrift.Type.BOOL, 10);
    output.writeBool(this.hasSgMarcha);
    output.writeFieldEnd();
  }
  if (this.hasSgContinencia !== null && this.hasSgContinencia !== undefined) {
    output.writeFieldBegin('hasSgContinencia', Thrift.Type.BOOL, 11);
    output.writeBool(this.hasSgContinencia);
    output.writeFieldEnd();
  }
  if (this.hasSgVisao !== null && this.hasSgVisao !== undefined) {
    output.writeFieldBegin('hasSgVisao', Thrift.Type.BOOL, 12);
    output.writeBool(this.hasSgVisao);
    output.writeFieldEnd();
  }
  if (this.hasSgAudicao !== null && this.hasSgAudicao !== undefined) {
    output.writeFieldBegin('hasSgAudicao', Thrift.Type.BOOL, 13);
    output.writeBool(this.hasSgAudicao);
    output.writeFieldEnd();
  }
  if (this.hasSgComorbidade !== null && this.hasSgComorbidade !== undefined) {
    output.writeFieldBegin('hasSgComorbidade', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasSgComorbidade);
    output.writeFieldEnd();
  }
  if (this.dataResultado !== null && this.dataResultado !== undefined) {
    output.writeFieldBegin('dataResultado', Thrift.Type.I64, 15);
    output.writeI64(this.dataResultado);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExameThrift = module.exports.ExameThrift = function(args) {
  this.codigoExame = null;
  this.solicitadoAvaliado = null;
  if (args) {
    if (args.codigoExame !== undefined && args.codigoExame !== null) {
      this.codigoExame = args.codigoExame;
    }
    if (args.solicitadoAvaliado !== undefined && args.solicitadoAvaliado !== null) {
      this.solicitadoAvaliado = Thrift.copyList(args.solicitadoAvaliado, [null]);
    }
  }
};
ExameThrift.prototype = {};
ExameThrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.codigoExame = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.solicitadoAvaliado = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.solicitadoAvaliado.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExameThrift.prototype.write = function(output) {
  output.writeStructBegin('ExameThrift');
  if (this.codigoExame !== null && this.codigoExame !== undefined) {
    output.writeFieldBegin('codigoExame', Thrift.Type.STRING, 1);
    output.writeString(this.codigoExame);
    output.writeFieldEnd();
  }
  if (this.solicitadoAvaliado !== null && this.solicitadoAvaliado !== undefined) {
    output.writeFieldBegin('solicitadoAvaliado', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.solicitadoAvaliado.length);
    for (var iter15 in this.solicitadoAvaliado)
    {
      if (this.solicitadoAvaliado.hasOwnProperty(iter15))
      {
        iter15 = this.solicitadoAvaliado[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

