// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package solicitacaooci

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - CodigoSigtap
type SolicitacaoOciThrift struct {
	CodigoSigtap *string `thrift:"codigoSigtap,1" json:"codigoSigtap,omitempty"`
}

func NewSolicitacaoOciThrift() *SolicitacaoOciThrift {
	return &SolicitacaoOciThrift{}
}

var SolicitacaoOciThrift_CodigoSigtap_DEFAULT string

func (p *SolicitacaoOciThrift) GetCodigoSigtap() string {
	if !p.IsSetCodigoSigtap() {
		return SolicitacaoOciThrift_CodigoSigtap_DEFAULT
	}
	return *p.CodigoSigtap
}
func (p *SolicitacaoOciThrift) IsSetCodigoSigtap() bool {
	return p.CodigoSigtap != nil
}

func (p *SolicitacaoOciThrift) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SolicitacaoOciThrift) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CodigoSigtap = &v
	}
	return nil
}

func (p *SolicitacaoOciThrift) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SolicitacaoOciThrift"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SolicitacaoOciThrift) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodigoSigtap() {
		if err := oprot.WriteFieldBegin("codigoSigtap", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:codigoSigtap: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CodigoSigtap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.codigoSigtap (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:codigoSigtap: ", p), err)
		}
	}
	return err
}

func (p *SolicitacaoOciThrift) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SolicitacaoOciThrift(%+v)", *p)
}
