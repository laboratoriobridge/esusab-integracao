/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace br.gov.saude.esusab.ras.atendindividual
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProblemaCondicaoAvaliacaoAIThrift : TBase
  {
    private List<string> _ciaps;
    private string _outroCiap1;
    private string _outroCiap2;
    private string _cid10;
    private string _cid10_2;

    public List<string> Ciaps
    {
      get
      {
        return _ciaps;
      }
      set
      {
        __isset.ciaps = true;
        this._ciaps = value;
      }
    }

    public string OutroCiap1
    {
      get
      {
        return _outroCiap1;
      }
      set
      {
        __isset.outroCiap1 = true;
        this._outroCiap1 = value;
      }
    }

    public string OutroCiap2
    {
      get
      {
        return _outroCiap2;
      }
      set
      {
        __isset.outroCiap2 = true;
        this._outroCiap2 = value;
      }
    }

    public string Cid10
    {
      get
      {
        return _cid10;
      }
      set
      {
        __isset.cid10 = true;
        this._cid10 = value;
      }
    }

    public string Cid10_2
    {
      get
      {
        return _cid10_2;
      }
      set
      {
        __isset.cid10_2 = true;
        this._cid10_2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ciaps;
      public bool outroCiap1;
      public bool outroCiap2;
      public bool cid10;
      public bool cid10_2;
    }

    public ProblemaCondicaoAvaliacaoAIThrift() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Ciaps = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    Ciaps.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OutroCiap1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OutroCiap2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Cid10 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Cid10_2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ProblemaCondicaoAvaliacaoAIThrift");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ciaps != null && __isset.ciaps) {
          field.Name = "ciaps";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ciaps.Count));
            foreach (string _iter3 in Ciaps)
            {
              oprot.WriteString(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (OutroCiap1 != null && __isset.outroCiap1) {
          field.Name = "outroCiap1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutroCiap1);
          oprot.WriteFieldEnd();
        }
        if (OutroCiap2 != null && __isset.outroCiap2) {
          field.Name = "outroCiap2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutroCiap2);
          oprot.WriteFieldEnd();
        }
        if (Cid10 != null && __isset.cid10) {
          field.Name = "cid10";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cid10);
          oprot.WriteFieldEnd();
        }
        if (Cid10_2 != null && __isset.cid10_2) {
          field.Name = "cid10_2";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Cid10_2);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ProblemaCondicaoAvaliacaoAIThrift(");
      bool __first = true;
      if (Ciaps != null && __isset.ciaps) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ciaps: ");
        __sb.Append(Ciaps);
      }
      if (OutroCiap1 != null && __isset.outroCiap1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutroCiap1: ");
        __sb.Append(OutroCiap1);
      }
      if (OutroCiap2 != null && __isset.outroCiap2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutroCiap2: ");
        __sb.Append(OutroCiap2);
      }
      if (Cid10 != null && __isset.cid10) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cid10: ");
        __sb.Append(Cid10);
      }
      if (Cid10_2 != null && __isset.cid10_2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cid10_2: ");
        __sb.Append(Cid10_2);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
