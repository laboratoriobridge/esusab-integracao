(**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit br.gov.saude.esusab.ras.common;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport;

const
  cbr_gov_saude_esusab_ras_common_Option_AnsiStr_Binary = False;
  cbr_gov_saude_esusab_ras_common_Option_Register_Types = False;
  cbr_gov_saude_esusab_ras_common_Option_ConstPrefix    = False;
  cbr_gov_saude_esusab_ras_common_Option_Events         = False;
  cbr_gov_saude_esusab_ras_common_Option_XmlDoc         = False;

type
  IHeaderCdsCadastroThrift = interface;
  ILotacaoHeaderThrift = interface;
  IUnicaLotacaoHeaderThrift = interface;
  IVariasLotacoesHeaderThrift = interface;
  ILotacaoThrift = interface;
  IEnderecoLocalPermanenciaThrift = interface;
  IMedicamentoThrift = interface;
  IEncaminhamentoExternoThrift = interface;
  IResultadoExameThrift = interface;
  IResultadosExameThrift = interface;
  IMedicoesThrift = interface;

  IHeaderCdsCadastroThrift = interface(IBase)
    function GetCnesUnidadeSaude: string;
    procedure SetCnesUnidadeSaude( const Value: string);
    function GetCnsProfissional: string;
    procedure SetCnsProfissional( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetIneEquipe: string;
    procedure SetIneEquipe( const Value: string);
    function GetMicroarea: Int64;
    procedure SetMicroarea( const Value: Int64);

    property CnesUnidadeSaude: string read GetCnesUnidadeSaude write SetCnesUnidadeSaude;
    property CnsProfissional: string read GetCnsProfissional write SetCnsProfissional;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property IneEquipe: string read GetIneEquipe write SetIneEquipe;
    property Microarea: Int64 read GetMicroarea write SetMicroarea;

    function Get__isset_CnesUnidadeSaude: Boolean;
    function Get__isset_CnsProfissional: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_IneEquipe: Boolean;
    function Get__isset_Microarea: Boolean;

    property __isset_CnesUnidadeSaude: Boolean read Get__isset_CnesUnidadeSaude;
    property __isset_CnsProfissional: Boolean read Get__isset_CnsProfissional;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_IneEquipe: Boolean read Get__isset_IneEquipe;
    property __isset_Microarea: Boolean read Get__isset_Microarea;
  end;

  THeaderCdsCadastroThriftImpl = class(TInterfacedObject, IBase, IHeaderCdsCadastroThrift)
  private
    FCnesUnidadeSaude: string;
    FCnsProfissional: string;
    FCodigoIbgeMunicipio: string;
    FDataAtendimento: Int64;
    FIneEquipe: string;
    FMicroarea: Int64;
    
    F__isset_CnesUnidadeSaude: Boolean;
    F__isset_CnsProfissional: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    F__isset_DataAtendimento: Boolean;
    F__isset_IneEquipe: Boolean;
    F__isset_Microarea: Boolean;
    
    function GetCnesUnidadeSaude: string;
    procedure SetCnesUnidadeSaude( const Value: string);
    function GetCnsProfissional: string;
    procedure SetCnsProfissional( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetIneEquipe: string;
    procedure SetIneEquipe( const Value: string);
    function GetMicroarea: Int64;
    procedure SetMicroarea( const Value: Int64);

    function Get__isset_CnesUnidadeSaude: Boolean;
    function Get__isset_CnsProfissional: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_IneEquipe: Boolean;
    function Get__isset_Microarea: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property CnesUnidadeSaude: string read GetCnesUnidadeSaude write SetCnesUnidadeSaude;
    property CnsProfissional: string read GetCnsProfissional write SetCnsProfissional;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property IneEquipe: string read GetIneEquipe write SetIneEquipe;
    property Microarea: Int64 read GetMicroarea write SetMicroarea;

    // isset
    property __isset_CnesUnidadeSaude: Boolean read Get__isset_CnesUnidadeSaude;
    property __isset_CnsProfissional: Boolean read Get__isset_CnsProfissional;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_IneEquipe: Boolean read Get__isset_IneEquipe;
    property __isset_Microarea: Boolean read Get__isset_Microarea;
  end;

  ILotacaoHeaderThrift = interface(IBase)
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);

    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;

    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
  end;

  TLotacaoHeaderThriftImpl = class(TInterfacedObject, IBase, ILotacaoHeaderThrift)
  private
    FProfissionalCNS: string;
    FCboCodigo_2002: string;
    FCnes: string;
    FIne: string;
    
    F__isset_ProfissionalCNS: Boolean;
    F__isset_CboCodigo_2002: Boolean;
    F__isset_Cnes: Boolean;
    F__isset_Ine: Boolean;
    
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;

    // isset
    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
  end;

  IUnicaLotacaoHeaderThrift = interface(IBase)
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;

    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  TUnicaLotacaoHeaderThriftImpl = class(TInterfacedObject, IBase, IUnicaLotacaoHeaderThrift)
  private
    FProfissionalCNS: string;
    FCboCodigo_2002: string;
    FCnes: string;
    FIne: string;
    FDataAtendimento: Int64;
    FCodigoIbgeMunicipio: string;
    
    F__isset_ProfissionalCNS: Boolean;
    F__isset_CboCodigo_2002: Boolean;
    F__isset_Cnes: Boolean;
    F__isset_Ine: Boolean;
    F__isset_DataAtendimento: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    
    function GetProfissionalCNS: string;
    procedure SetProfissionalCNS( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    function Get__isset_ProfissionalCNS: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property ProfissionalCNS: string read GetProfissionalCNS write SetProfissionalCNS;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Cnes: string read GetCnes write SetCnes;
    property Ine: string read GetIne write SetIne;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    // isset
    property __isset_ProfissionalCNS: Boolean read Get__isset_ProfissionalCNS;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  IVariasLotacoesHeaderThrift = interface(IBase)
    function GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
    procedure SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
    function GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    procedure SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    property LotacaoFormPrincipal: ILotacaoHeaderThrift read GetLotacaoFormPrincipal write SetLotacaoFormPrincipal;
    property LotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift read GetLotacaoFormAtendimentoCompartilhado write SetLotacaoFormAtendimentoCompartilhado;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    function Get__isset_LotacaoFormPrincipal: Boolean;
    function Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;

    property __isset_LotacaoFormPrincipal: Boolean read Get__isset_LotacaoFormPrincipal;
    property __isset_LotacaoFormAtendimentoCompartilhado: Boolean read Get__isset_LotacaoFormAtendimentoCompartilhado;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  TVariasLotacoesHeaderThriftImpl = class(TInterfacedObject, IBase, IVariasLotacoesHeaderThrift)
  private
    FLotacaoFormPrincipal: ILotacaoHeaderThrift;
    FLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    FDataAtendimento: Int64;
    FCodigoIbgeMunicipio: string;
    
    F__isset_LotacaoFormPrincipal: Boolean;
    F__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    F__isset_DataAtendimento: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    
    function GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
    procedure SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
    function GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
    procedure SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
    function GetDataAtendimento: Int64;
    procedure SetDataAtendimento( const Value: Int64);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    function Get__isset_LotacaoFormPrincipal: Boolean;
    function Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
    function Get__isset_DataAtendimento: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property LotacaoFormPrincipal: ILotacaoHeaderThrift read GetLotacaoFormPrincipal write SetLotacaoFormPrincipal;
    property LotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift read GetLotacaoFormAtendimentoCompartilhado write SetLotacaoFormAtendimentoCompartilhado;
    property DataAtendimento: Int64 read GetDataAtendimento write SetDataAtendimento;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    // isset
    property __isset_LotacaoFormPrincipal: Boolean read Get__isset_LotacaoFormPrincipal;
    property __isset_LotacaoFormAtendimentoCompartilhado: Boolean read Get__isset_LotacaoFormAtendimentoCompartilhado;
    property __isset_DataAtendimento: Boolean read Get__isset_DataAtendimento;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  ILotacaoThrift = interface(IBase)
    function GetCpf: string;
    procedure SetCpf( const Value: string);
    function GetCns: string;
    procedure SetCns( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    property Cpf: string read GetCpf write SetCpf;
    property Cns: string read GetCns write SetCns;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Ine: string read GetIne write SetIne;
    property Cnes: string read GetCnes write SetCnes;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    function Get__isset_Cpf: Boolean;
    function Get__isset_Cns: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;

    property __isset_Cpf: Boolean read Get__isset_Cpf;
    property __isset_Cns: Boolean read Get__isset_Cns;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  TLotacaoThriftImpl = class(TInterfacedObject, IBase, ILotacaoThrift)
  private
    FCpf: string;
    FCns: string;
    FCboCodigo_2002: string;
    FIne: string;
    FCnes: string;
    FCodigoIbgeMunicipio: string;
    
    F__isset_Cpf: Boolean;
    F__isset_Cns: Boolean;
    F__isset_CboCodigo_2002: Boolean;
    F__isset_Ine: Boolean;
    F__isset_Cnes: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    
    function GetCpf: string;
    procedure SetCpf( const Value: string);
    function GetCns: string;
    procedure SetCns( const Value: string);
    function GetCboCodigo_2002: string;
    procedure SetCboCodigo_2002( const Value: string);
    function GetIne: string;
    procedure SetIne( const Value: string);
    function GetCnes: string;
    procedure SetCnes( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);

    function Get__isset_Cpf: Boolean;
    function Get__isset_Cns: Boolean;
    function Get__isset_CboCodigo_2002: Boolean;
    function Get__isset_Ine: Boolean;
    function Get__isset_Cnes: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Cpf: string read GetCpf write SetCpf;
    property Cns: string read GetCns write SetCns;
    property CboCodigo_2002: string read GetCboCodigo_2002 write SetCboCodigo_2002;
    property Ine: string read GetIne write SetIne;
    property Cnes: string read GetCnes write SetCnes;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;

    // isset
    property __isset_Cpf: Boolean read Get__isset_Cpf;
    property __isset_Cns: Boolean read Get__isset_Cns;
    property __isset_CboCodigo_2002: Boolean read Get__isset_CboCodigo_2002;
    property __isset_Ine: Boolean read Get__isset_Ine;
    property __isset_Cnes: Boolean read Get__isset_Cnes;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
  end;

  IEnderecoLocalPermanenciaThrift = interface(IBase)
    function GetBairro: string;
    procedure SetBairro( const Value: string);
    function GetCep: string;
    procedure SetCep( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetComplemento: string;
    procedure SetComplemento( const Value: string);
    function GetNomeLogradouro: string;
    procedure SetNomeLogradouro( const Value: string);
    function GetNumero: string;
    procedure SetNumero( const Value: string);
    function GetNumeroDneUf: string;
    procedure SetNumeroDneUf( const Value: string);
    function GetTelefoneContato: string;
    procedure SetTelefoneContato( const Value: string);
    function GetTelefoneResidencia: string;
    procedure SetTelefoneResidencia( const Value: string);
    function GetTipoLogradouroNumeroDne: string;
    procedure SetTipoLogradouroNumeroDne( const Value: string);
    function GetStSemNumero: Boolean;
    procedure SetStSemNumero( const Value: Boolean);
    function GetPontoReferencia: string;
    procedure SetPontoReferencia( const Value: string);
    function GetMicroArea: string;
    procedure SetMicroArea( const Value: string);
    function GetStForaArea: Boolean;
    procedure SetStForaArea( const Value: Boolean);

    property Bairro: string read GetBairro write SetBairro;
    property Cep: string read GetCep write SetCep;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property Complemento: string read GetComplemento write SetComplemento;
    property NomeLogradouro: string read GetNomeLogradouro write SetNomeLogradouro;
    property Numero: string read GetNumero write SetNumero;
    property NumeroDneUf: string read GetNumeroDneUf write SetNumeroDneUf;
    property TelefoneContato: string read GetTelefoneContato write SetTelefoneContato;
    property TelefoneResidencia: string read GetTelefoneResidencia write SetTelefoneResidencia;
    property TipoLogradouroNumeroDne: string read GetTipoLogradouroNumeroDne write SetTipoLogradouroNumeroDne;
    property StSemNumero: Boolean read GetStSemNumero write SetStSemNumero;
    property PontoReferencia: string read GetPontoReferencia write SetPontoReferencia;
    property MicroArea: string read GetMicroArea write SetMicroArea;
    property StForaArea: Boolean read GetStForaArea write SetStForaArea;

    function Get__isset_Bairro: Boolean;
    function Get__isset_Cep: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_Complemento: Boolean;
    function Get__isset_NomeLogradouro: Boolean;
    function Get__isset_Numero: Boolean;
    function Get__isset_NumeroDneUf: Boolean;
    function Get__isset_TelefoneContato: Boolean;
    function Get__isset_TelefoneResidencia: Boolean;
    function Get__isset_TipoLogradouroNumeroDne: Boolean;
    function Get__isset_StSemNumero: Boolean;
    function Get__isset_PontoReferencia: Boolean;
    function Get__isset_MicroArea: Boolean;
    function Get__isset_StForaArea: Boolean;

    property __isset_Bairro: Boolean read Get__isset_Bairro;
    property __isset_Cep: Boolean read Get__isset_Cep;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_Complemento: Boolean read Get__isset_Complemento;
    property __isset_NomeLogradouro: Boolean read Get__isset_NomeLogradouro;
    property __isset_Numero: Boolean read Get__isset_Numero;
    property __isset_NumeroDneUf: Boolean read Get__isset_NumeroDneUf;
    property __isset_TelefoneContato: Boolean read Get__isset_TelefoneContato;
    property __isset_TelefoneResidencia: Boolean read Get__isset_TelefoneResidencia;
    property __isset_TipoLogradouroNumeroDne: Boolean read Get__isset_TipoLogradouroNumeroDne;
    property __isset_StSemNumero: Boolean read Get__isset_StSemNumero;
    property __isset_PontoReferencia: Boolean read Get__isset_PontoReferencia;
    property __isset_MicroArea: Boolean read Get__isset_MicroArea;
    property __isset_StForaArea: Boolean read Get__isset_StForaArea;
  end;

  TEnderecoLocalPermanenciaThriftImpl = class(TInterfacedObject, IBase, IEnderecoLocalPermanenciaThrift)
  private
    FBairro: string;
    FCep: string;
    FCodigoIbgeMunicipio: string;
    FComplemento: string;
    FNomeLogradouro: string;
    FNumero: string;
    FNumeroDneUf: string;
    FTelefoneContato: string;
    FTelefoneResidencia: string;
    FTipoLogradouroNumeroDne: string;
    FStSemNumero: Boolean;
    FPontoReferencia: string;
    FMicroArea: string;
    FStForaArea: Boolean;
    
    F__isset_Bairro: Boolean;
    F__isset_Cep: Boolean;
    F__isset_CodigoIbgeMunicipio: Boolean;
    F__isset_Complemento: Boolean;
    F__isset_NomeLogradouro: Boolean;
    F__isset_Numero: Boolean;
    F__isset_NumeroDneUf: Boolean;
    F__isset_TelefoneContato: Boolean;
    F__isset_TelefoneResidencia: Boolean;
    F__isset_TipoLogradouroNumeroDne: Boolean;
    F__isset_StSemNumero: Boolean;
    F__isset_PontoReferencia: Boolean;
    F__isset_MicroArea: Boolean;
    F__isset_StForaArea: Boolean;
    
    function GetBairro: string;
    procedure SetBairro( const Value: string);
    function GetCep: string;
    procedure SetCep( const Value: string);
    function GetCodigoIbgeMunicipio: string;
    procedure SetCodigoIbgeMunicipio( const Value: string);
    function GetComplemento: string;
    procedure SetComplemento( const Value: string);
    function GetNomeLogradouro: string;
    procedure SetNomeLogradouro( const Value: string);
    function GetNumero: string;
    procedure SetNumero( const Value: string);
    function GetNumeroDneUf: string;
    procedure SetNumeroDneUf( const Value: string);
    function GetTelefoneContato: string;
    procedure SetTelefoneContato( const Value: string);
    function GetTelefoneResidencia: string;
    procedure SetTelefoneResidencia( const Value: string);
    function GetTipoLogradouroNumeroDne: string;
    procedure SetTipoLogradouroNumeroDne( const Value: string);
    function GetStSemNumero: Boolean;
    procedure SetStSemNumero( const Value: Boolean);
    function GetPontoReferencia: string;
    procedure SetPontoReferencia( const Value: string);
    function GetMicroArea: string;
    procedure SetMicroArea( const Value: string);
    function GetStForaArea: Boolean;
    procedure SetStForaArea( const Value: Boolean);

    function Get__isset_Bairro: Boolean;
    function Get__isset_Cep: Boolean;
    function Get__isset_CodigoIbgeMunicipio: Boolean;
    function Get__isset_Complemento: Boolean;
    function Get__isset_NomeLogradouro: Boolean;
    function Get__isset_Numero: Boolean;
    function Get__isset_NumeroDneUf: Boolean;
    function Get__isset_TelefoneContato: Boolean;
    function Get__isset_TelefoneResidencia: Boolean;
    function Get__isset_TipoLogradouroNumeroDne: Boolean;
    function Get__isset_StSemNumero: Boolean;
    function Get__isset_PontoReferencia: Boolean;
    function Get__isset_MicroArea: Boolean;
    function Get__isset_StForaArea: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Bairro: string read GetBairro write SetBairro;
    property Cep: string read GetCep write SetCep;
    property CodigoIbgeMunicipio: string read GetCodigoIbgeMunicipio write SetCodigoIbgeMunicipio;
    property Complemento: string read GetComplemento write SetComplemento;
    property NomeLogradouro: string read GetNomeLogradouro write SetNomeLogradouro;
    property Numero: string read GetNumero write SetNumero;
    property NumeroDneUf: string read GetNumeroDneUf write SetNumeroDneUf;
    property TelefoneContato: string read GetTelefoneContato write SetTelefoneContato;
    property TelefoneResidencia: string read GetTelefoneResidencia write SetTelefoneResidencia;
    property TipoLogradouroNumeroDne: string read GetTipoLogradouroNumeroDne write SetTipoLogradouroNumeroDne;
    property StSemNumero: Boolean read GetStSemNumero write SetStSemNumero;
    property PontoReferencia: string read GetPontoReferencia write SetPontoReferencia;
    property MicroArea: string read GetMicroArea write SetMicroArea;
    property StForaArea: Boolean read GetStForaArea write SetStForaArea;

    // isset
    property __isset_Bairro: Boolean read Get__isset_Bairro;
    property __isset_Cep: Boolean read Get__isset_Cep;
    property __isset_CodigoIbgeMunicipio: Boolean read Get__isset_CodigoIbgeMunicipio;
    property __isset_Complemento: Boolean read Get__isset_Complemento;
    property __isset_NomeLogradouro: Boolean read Get__isset_NomeLogradouro;
    property __isset_Numero: Boolean read Get__isset_Numero;
    property __isset_NumeroDneUf: Boolean read Get__isset_NumeroDneUf;
    property __isset_TelefoneContato: Boolean read Get__isset_TelefoneContato;
    property __isset_TelefoneResidencia: Boolean read Get__isset_TelefoneResidencia;
    property __isset_TipoLogradouroNumeroDne: Boolean read Get__isset_TipoLogradouroNumeroDne;
    property __isset_StSemNumero: Boolean read Get__isset_StSemNumero;
    property __isset_PontoReferencia: Boolean read Get__isset_PontoReferencia;
    property __isset_MicroArea: Boolean read Get__isset_MicroArea;
    property __isset_StForaArea: Boolean read Get__isset_StForaArea;
  end;

  IMedicamentoThrift = interface(IBase)
    function GetCodigoCatmat: string;
    procedure SetCodigoCatmat( const Value: string);
    function GetViaAdministracao: Int64;
    procedure SetViaAdministracao( const Value: Int64);
    function GetDose: string;
    procedure SetDose( const Value: string);
    function GetDoseUnica: Boolean;
    procedure SetDoseUnica( const Value: Boolean);
    function GetUsoContinuo: Boolean;
    procedure SetUsoContinuo( const Value: Boolean);
    function GetDoseFrequenciaTipo: Int64;
    procedure SetDoseFrequenciaTipo( const Value: Int64);
    function GetDoseFrequencia: string;
    procedure SetDoseFrequencia( const Value: string);
    function GetDoseFrequenciaQuantidade: Integer;
    procedure SetDoseFrequenciaQuantidade( const Value: Integer);
    function GetDoseFrequenciaUnidadeMedida: Int64;
    procedure SetDoseFrequenciaUnidadeMedida( const Value: Int64);
    function GetDtInicioTratamento: Int64;
    procedure SetDtInicioTratamento( const Value: Int64);
    function GetDuracaoTratamento: Integer;
    procedure SetDuracaoTratamento( const Value: Integer);
    function GetDuracaoTratamentoMedida: Int64;
    procedure SetDuracaoTratamentoMedida( const Value: Int64);
    function GetQuantidadeReceitada: Integer;
    procedure SetQuantidadeReceitada( const Value: Integer);

    property CodigoCatmat: string read GetCodigoCatmat write SetCodigoCatmat;
    property ViaAdministracao: Int64 read GetViaAdministracao write SetViaAdministracao;
    property Dose: string read GetDose write SetDose;
    property DoseUnica: Boolean read GetDoseUnica write SetDoseUnica;
    property UsoContinuo: Boolean read GetUsoContinuo write SetUsoContinuo;
    property DoseFrequenciaTipo: Int64 read GetDoseFrequenciaTipo write SetDoseFrequenciaTipo;
    property DoseFrequencia: string read GetDoseFrequencia write SetDoseFrequencia;
    property DoseFrequenciaQuantidade: Integer read GetDoseFrequenciaQuantidade write SetDoseFrequenciaQuantidade;
    property DoseFrequenciaUnidadeMedida: Int64 read GetDoseFrequenciaUnidadeMedida write SetDoseFrequenciaUnidadeMedida;
    property DtInicioTratamento: Int64 read GetDtInicioTratamento write SetDtInicioTratamento;
    property DuracaoTratamento: Integer read GetDuracaoTratamento write SetDuracaoTratamento;
    property DuracaoTratamentoMedida: Int64 read GetDuracaoTratamentoMedida write SetDuracaoTratamentoMedida;
    property QuantidadeReceitada: Integer read GetQuantidadeReceitada write SetQuantidadeReceitada;

    function Get__isset_CodigoCatmat: Boolean;
    function Get__isset_ViaAdministracao: Boolean;
    function Get__isset_Dose: Boolean;
    function Get__isset_DoseUnica: Boolean;
    function Get__isset_UsoContinuo: Boolean;
    function Get__isset_DoseFrequenciaTipo: Boolean;
    function Get__isset_DoseFrequencia: Boolean;
    function Get__isset_DoseFrequenciaQuantidade: Boolean;
    function Get__isset_DoseFrequenciaUnidadeMedida: Boolean;
    function Get__isset_DtInicioTratamento: Boolean;
    function Get__isset_DuracaoTratamento: Boolean;
    function Get__isset_DuracaoTratamentoMedida: Boolean;
    function Get__isset_QuantidadeReceitada: Boolean;

    property __isset_CodigoCatmat: Boolean read Get__isset_CodigoCatmat;
    property __isset_ViaAdministracao: Boolean read Get__isset_ViaAdministracao;
    property __isset_Dose: Boolean read Get__isset_Dose;
    property __isset_DoseUnica: Boolean read Get__isset_DoseUnica;
    property __isset_UsoContinuo: Boolean read Get__isset_UsoContinuo;
    property __isset_DoseFrequenciaTipo: Boolean read Get__isset_DoseFrequenciaTipo;
    property __isset_DoseFrequencia: Boolean read Get__isset_DoseFrequencia;
    property __isset_DoseFrequenciaQuantidade: Boolean read Get__isset_DoseFrequenciaQuantidade;
    property __isset_DoseFrequenciaUnidadeMedida: Boolean read Get__isset_DoseFrequenciaUnidadeMedida;
    property __isset_DtInicioTratamento: Boolean read Get__isset_DtInicioTratamento;
    property __isset_DuracaoTratamento: Boolean read Get__isset_DuracaoTratamento;
    property __isset_DuracaoTratamentoMedida: Boolean read Get__isset_DuracaoTratamentoMedida;
    property __isset_QuantidadeReceitada: Boolean read Get__isset_QuantidadeReceitada;
  end;

  TMedicamentoThriftImpl = class(TInterfacedObject, IBase, IMedicamentoThrift)
  private
    FCodigoCatmat: string;
    FViaAdministracao: Int64;
    FDose: string;
    FDoseUnica: Boolean;
    FUsoContinuo: Boolean;
    FDoseFrequenciaTipo: Int64;
    FDoseFrequencia: string;
    FDoseFrequenciaQuantidade: Integer;
    FDoseFrequenciaUnidadeMedida: Int64;
    FDtInicioTratamento: Int64;
    FDuracaoTratamento: Integer;
    FDuracaoTratamentoMedida: Int64;
    FQuantidadeReceitada: Integer;
    
    F__isset_CodigoCatmat: Boolean;
    F__isset_ViaAdministracao: Boolean;
    F__isset_Dose: Boolean;
    F__isset_DoseUnica: Boolean;
    F__isset_UsoContinuo: Boolean;
    F__isset_DoseFrequenciaTipo: Boolean;
    F__isset_DoseFrequencia: Boolean;
    F__isset_DoseFrequenciaQuantidade: Boolean;
    F__isset_DoseFrequenciaUnidadeMedida: Boolean;
    F__isset_DtInicioTratamento: Boolean;
    F__isset_DuracaoTratamento: Boolean;
    F__isset_DuracaoTratamentoMedida: Boolean;
    F__isset_QuantidadeReceitada: Boolean;
    
    function GetCodigoCatmat: string;
    procedure SetCodigoCatmat( const Value: string);
    function GetViaAdministracao: Int64;
    procedure SetViaAdministracao( const Value: Int64);
    function GetDose: string;
    procedure SetDose( const Value: string);
    function GetDoseUnica: Boolean;
    procedure SetDoseUnica( const Value: Boolean);
    function GetUsoContinuo: Boolean;
    procedure SetUsoContinuo( const Value: Boolean);
    function GetDoseFrequenciaTipo: Int64;
    procedure SetDoseFrequenciaTipo( const Value: Int64);
    function GetDoseFrequencia: string;
    procedure SetDoseFrequencia( const Value: string);
    function GetDoseFrequenciaQuantidade: Integer;
    procedure SetDoseFrequenciaQuantidade( const Value: Integer);
    function GetDoseFrequenciaUnidadeMedida: Int64;
    procedure SetDoseFrequenciaUnidadeMedida( const Value: Int64);
    function GetDtInicioTratamento: Int64;
    procedure SetDtInicioTratamento( const Value: Int64);
    function GetDuracaoTratamento: Integer;
    procedure SetDuracaoTratamento( const Value: Integer);
    function GetDuracaoTratamentoMedida: Int64;
    procedure SetDuracaoTratamentoMedida( const Value: Int64);
    function GetQuantidadeReceitada: Integer;
    procedure SetQuantidadeReceitada( const Value: Integer);

    function Get__isset_CodigoCatmat: Boolean;
    function Get__isset_ViaAdministracao: Boolean;
    function Get__isset_Dose: Boolean;
    function Get__isset_DoseUnica: Boolean;
    function Get__isset_UsoContinuo: Boolean;
    function Get__isset_DoseFrequenciaTipo: Boolean;
    function Get__isset_DoseFrequencia: Boolean;
    function Get__isset_DoseFrequenciaQuantidade: Boolean;
    function Get__isset_DoseFrequenciaUnidadeMedida: Boolean;
    function Get__isset_DtInicioTratamento: Boolean;
    function Get__isset_DuracaoTratamento: Boolean;
    function Get__isset_DuracaoTratamentoMedida: Boolean;
    function Get__isset_QuantidadeReceitada: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property CodigoCatmat: string read GetCodigoCatmat write SetCodigoCatmat;
    property ViaAdministracao: Int64 read GetViaAdministracao write SetViaAdministracao;
    property Dose: string read GetDose write SetDose;
    property DoseUnica: Boolean read GetDoseUnica write SetDoseUnica;
    property UsoContinuo: Boolean read GetUsoContinuo write SetUsoContinuo;
    property DoseFrequenciaTipo: Int64 read GetDoseFrequenciaTipo write SetDoseFrequenciaTipo;
    property DoseFrequencia: string read GetDoseFrequencia write SetDoseFrequencia;
    property DoseFrequenciaQuantidade: Integer read GetDoseFrequenciaQuantidade write SetDoseFrequenciaQuantidade;
    property DoseFrequenciaUnidadeMedida: Int64 read GetDoseFrequenciaUnidadeMedida write SetDoseFrequenciaUnidadeMedida;
    property DtInicioTratamento: Int64 read GetDtInicioTratamento write SetDtInicioTratamento;
    property DuracaoTratamento: Integer read GetDuracaoTratamento write SetDuracaoTratamento;
    property DuracaoTratamentoMedida: Int64 read GetDuracaoTratamentoMedida write SetDuracaoTratamentoMedida;
    property QuantidadeReceitada: Integer read GetQuantidadeReceitada write SetQuantidadeReceitada;

    // isset
    property __isset_CodigoCatmat: Boolean read Get__isset_CodigoCatmat;
    property __isset_ViaAdministracao: Boolean read Get__isset_ViaAdministracao;
    property __isset_Dose: Boolean read Get__isset_Dose;
    property __isset_DoseUnica: Boolean read Get__isset_DoseUnica;
    property __isset_UsoContinuo: Boolean read Get__isset_UsoContinuo;
    property __isset_DoseFrequenciaTipo: Boolean read Get__isset_DoseFrequenciaTipo;
    property __isset_DoseFrequencia: Boolean read Get__isset_DoseFrequencia;
    property __isset_DoseFrequenciaQuantidade: Boolean read Get__isset_DoseFrequenciaQuantidade;
    property __isset_DoseFrequenciaUnidadeMedida: Boolean read Get__isset_DoseFrequenciaUnidadeMedida;
    property __isset_DtInicioTratamento: Boolean read Get__isset_DtInicioTratamento;
    property __isset_DuracaoTratamento: Boolean read Get__isset_DuracaoTratamento;
    property __isset_DuracaoTratamentoMedida: Boolean read Get__isset_DuracaoTratamentoMedida;
    property __isset_QuantidadeReceitada: Boolean read Get__isset_QuantidadeReceitada;
  end;

  IEncaminhamentoExternoThrift = interface(IBase)
    function GetEspecialidade: Int64;
    procedure SetEspecialidade( const Value: Int64);
    function GetHipoteseDiagnosticoCid10: string;
    procedure SetHipoteseDiagnosticoCid10( const Value: string);
    function GetHipoteseDiagnosticoCiap2: string;
    procedure SetHipoteseDiagnosticoCiap2( const Value: string);
    function GetClassificacaoRisco: Int64;
    procedure SetClassificacaoRisco( const Value: Int64);

    property Especialidade: Int64 read GetEspecialidade write SetEspecialidade;
    property HipoteseDiagnosticoCid10: string read GetHipoteseDiagnosticoCid10 write SetHipoteseDiagnosticoCid10;
    property HipoteseDiagnosticoCiap2: string read GetHipoteseDiagnosticoCiap2 write SetHipoteseDiagnosticoCiap2;
    property ClassificacaoRisco: Int64 read GetClassificacaoRisco write SetClassificacaoRisco;

    function Get__isset_Especialidade: Boolean;
    function Get__isset_HipoteseDiagnosticoCid10: Boolean;
    function Get__isset_HipoteseDiagnosticoCiap2: Boolean;
    function Get__isset_ClassificacaoRisco: Boolean;

    property __isset_Especialidade: Boolean read Get__isset_Especialidade;
    property __isset_HipoteseDiagnosticoCid10: Boolean read Get__isset_HipoteseDiagnosticoCid10;
    property __isset_HipoteseDiagnosticoCiap2: Boolean read Get__isset_HipoteseDiagnosticoCiap2;
    property __isset_ClassificacaoRisco: Boolean read Get__isset_ClassificacaoRisco;
  end;

  TEncaminhamentoExternoThriftImpl = class(TInterfacedObject, IBase, IEncaminhamentoExternoThrift)
  private
    FEspecialidade: Int64;
    FHipoteseDiagnosticoCid10: string;
    FHipoteseDiagnosticoCiap2: string;
    FClassificacaoRisco: Int64;
    
    F__isset_Especialidade: Boolean;
    F__isset_HipoteseDiagnosticoCid10: Boolean;
    F__isset_HipoteseDiagnosticoCiap2: Boolean;
    F__isset_ClassificacaoRisco: Boolean;
    
    function GetEspecialidade: Int64;
    procedure SetEspecialidade( const Value: Int64);
    function GetHipoteseDiagnosticoCid10: string;
    procedure SetHipoteseDiagnosticoCid10( const Value: string);
    function GetHipoteseDiagnosticoCiap2: string;
    procedure SetHipoteseDiagnosticoCiap2( const Value: string);
    function GetClassificacaoRisco: Int64;
    procedure SetClassificacaoRisco( const Value: Int64);

    function Get__isset_Especialidade: Boolean;
    function Get__isset_HipoteseDiagnosticoCid10: Boolean;
    function Get__isset_HipoteseDiagnosticoCiap2: Boolean;
    function Get__isset_ClassificacaoRisco: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Especialidade: Int64 read GetEspecialidade write SetEspecialidade;
    property HipoteseDiagnosticoCid10: string read GetHipoteseDiagnosticoCid10 write SetHipoteseDiagnosticoCid10;
    property HipoteseDiagnosticoCiap2: string read GetHipoteseDiagnosticoCiap2 write SetHipoteseDiagnosticoCiap2;
    property ClassificacaoRisco: Int64 read GetClassificacaoRisco write SetClassificacaoRisco;

    // isset
    property __isset_Especialidade: Boolean read Get__isset_Especialidade;
    property __isset_HipoteseDiagnosticoCid10: Boolean read Get__isset_HipoteseDiagnosticoCid10;
    property __isset_HipoteseDiagnosticoCiap2: Boolean read Get__isset_HipoteseDiagnosticoCiap2;
    property __isset_ClassificacaoRisco: Boolean read Get__isset_ClassificacaoRisco;
  end;

  IResultadoExameThrift = interface(IBase)
    function GetTipoResultado: Integer;
    procedure SetTipoResultado( const Value: Integer);
    function GetValorResultado: string;
    procedure SetValorResultado( const Value: string);

    property TipoResultado: Integer read GetTipoResultado write SetTipoResultado;
    property ValorResultado: string read GetValorResultado write SetValorResultado;

    function Get__isset_TipoResultado: Boolean;
    function Get__isset_ValorResultado: Boolean;

    property __isset_TipoResultado: Boolean read Get__isset_TipoResultado;
    property __isset_ValorResultado: Boolean read Get__isset_ValorResultado;
  end;

  TResultadoExameThriftImpl = class(TInterfacedObject, IBase, IResultadoExameThrift)
  private
    FTipoResultado: Integer;
    FValorResultado: string;
    
    F__isset_TipoResultado: Boolean;
    F__isset_ValorResultado: Boolean;
    
    function GetTipoResultado: Integer;
    procedure SetTipoResultado( const Value: Integer);
    function GetValorResultado: string;
    procedure SetValorResultado( const Value: string);

    function Get__isset_TipoResultado: Boolean;
    function Get__isset_ValorResultado: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property TipoResultado: Integer read GetTipoResultado write SetTipoResultado;
    property ValorResultado: string read GetValorResultado write SetValorResultado;

    // isset
    property __isset_TipoResultado: Boolean read Get__isset_TipoResultado;
    property __isset_ValorResultado: Boolean read Get__isset_ValorResultado;
  end;

  IResultadosExameThrift = interface(IBase)
    function GetExame: string;
    procedure SetExame( const Value: string);
    function GetDataSolicitacao: Int64;
    procedure SetDataSolicitacao( const Value: Int64);
    function GetDataRealizacao: Int64;
    procedure SetDataRealizacao( const Value: Int64);
    function GetDataResultado: Int64;
    procedure SetDataResultado( const Value: Int64);
    function GetResultadoExame: IThriftList<IResultadoExameThrift>;
    procedure SetResultadoExame( const Value: IThriftList<IResultadoExameThrift>);

    property Exame: string read GetExame write SetExame;
    property DataSolicitacao: Int64 read GetDataSolicitacao write SetDataSolicitacao;
    property DataRealizacao: Int64 read GetDataRealizacao write SetDataRealizacao;
    property DataResultado: Int64 read GetDataResultado write SetDataResultado;
    property ResultadoExame: IThriftList<IResultadoExameThrift> read GetResultadoExame write SetResultadoExame;

    function Get__isset_Exame: Boolean;
    function Get__isset_DataSolicitacao: Boolean;
    function Get__isset_DataRealizacao: Boolean;
    function Get__isset_DataResultado: Boolean;
    function Get__isset_ResultadoExame: Boolean;

    property __isset_Exame: Boolean read Get__isset_Exame;
    property __isset_DataSolicitacao: Boolean read Get__isset_DataSolicitacao;
    property __isset_DataRealizacao: Boolean read Get__isset_DataRealizacao;
    property __isset_DataResultado: Boolean read Get__isset_DataResultado;
    property __isset_ResultadoExame: Boolean read Get__isset_ResultadoExame;
  end;

  TResultadosExameThriftImpl = class(TInterfacedObject, IBase, IResultadosExameThrift)
  private
    FExame: string;
    FDataSolicitacao: Int64;
    FDataRealizacao: Int64;
    FDataResultado: Int64;
    FResultadoExame: IThriftList<IResultadoExameThrift>;
    
    F__isset_Exame: Boolean;
    F__isset_DataSolicitacao: Boolean;
    F__isset_DataRealizacao: Boolean;
    F__isset_DataResultado: Boolean;
    F__isset_ResultadoExame: Boolean;
    
    function GetExame: string;
    procedure SetExame( const Value: string);
    function GetDataSolicitacao: Int64;
    procedure SetDataSolicitacao( const Value: Int64);
    function GetDataRealizacao: Int64;
    procedure SetDataRealizacao( const Value: Int64);
    function GetDataResultado: Int64;
    procedure SetDataResultado( const Value: Int64);
    function GetResultadoExame: IThriftList<IResultadoExameThrift>;
    procedure SetResultadoExame( const Value: IThriftList<IResultadoExameThrift>);

    function Get__isset_Exame: Boolean;
    function Get__isset_DataSolicitacao: Boolean;
    function Get__isset_DataRealizacao: Boolean;
    function Get__isset_DataResultado: Boolean;
    function Get__isset_ResultadoExame: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Exame: string read GetExame write SetExame;
    property DataSolicitacao: Int64 read GetDataSolicitacao write SetDataSolicitacao;
    property DataRealizacao: Int64 read GetDataRealizacao write SetDataRealizacao;
    property DataResultado: Int64 read GetDataResultado write SetDataResultado;
    property ResultadoExame: IThriftList<IResultadoExameThrift> read GetResultadoExame write SetResultadoExame;

    // isset
    property __isset_Exame: Boolean read Get__isset_Exame;
    property __isset_DataSolicitacao: Boolean read Get__isset_DataSolicitacao;
    property __isset_DataRealizacao: Boolean read Get__isset_DataRealizacao;
    property __isset_DataResultado: Boolean read Get__isset_DataResultado;
    property __isset_ResultadoExame: Boolean read Get__isset_ResultadoExame;
  end;

  IMedicoesThrift = interface(IBase)
    function GetCircuferenciaAbdominal: Double;
    procedure SetCircuferenciaAbdominal( const Value: Double);
    function GetPerimetroPanturrilha: Double;
    procedure SetPerimetroPanturrilha( const Value: Double);
    function GetPressaoArterialSistolica: Integer;
    procedure SetPressaoArterialSistolica( const Value: Integer);
    function GetPressaoArterialDiastolica: Integer;
    procedure SetPressaoArterialDiastolica( const Value: Integer);
    function GetFrequenciaRespiratoria: Integer;
    procedure SetFrequenciaRespiratoria( const Value: Integer);
    function GetFrequenciaCardiaca: Integer;
    procedure SetFrequenciaCardiaca( const Value: Integer);
    function GetTemperatura: Double;
    procedure SetTemperatura( const Value: Double);
    function GetSaturacaoO2: Integer;
    procedure SetSaturacaoO2( const Value: Integer);
    function GetGlicemiaCapilar: Integer;
    procedure SetGlicemiaCapilar( const Value: Integer);
    function GetTipoGlicemiaCapilar: Int64;
    procedure SetTipoGlicemiaCapilar( const Value: Int64);
    function GetPeso: Double;
    procedure SetPeso( const Value: Double);
    function GetAltura: Double;
    procedure SetAltura( const Value: Double);
    function GetPerimetroCefalico: Double;
    procedure SetPerimetroCefalico( const Value: Double);

    property CircuferenciaAbdominal: Double read GetCircuferenciaAbdominal write SetCircuferenciaAbdominal;
    property PerimetroPanturrilha: Double read GetPerimetroPanturrilha write SetPerimetroPanturrilha;
    property PressaoArterialSistolica: Integer read GetPressaoArterialSistolica write SetPressaoArterialSistolica;
    property PressaoArterialDiastolica: Integer read GetPressaoArterialDiastolica write SetPressaoArterialDiastolica;
    property FrequenciaRespiratoria: Integer read GetFrequenciaRespiratoria write SetFrequenciaRespiratoria;
    property FrequenciaCardiaca: Integer read GetFrequenciaCardiaca write SetFrequenciaCardiaca;
    property Temperatura: Double read GetTemperatura write SetTemperatura;
    property SaturacaoO2: Integer read GetSaturacaoO2 write SetSaturacaoO2;
    property GlicemiaCapilar: Integer read GetGlicemiaCapilar write SetGlicemiaCapilar;
    property TipoGlicemiaCapilar: Int64 read GetTipoGlicemiaCapilar write SetTipoGlicemiaCapilar;
    property Peso: Double read GetPeso write SetPeso;
    property Altura: Double read GetAltura write SetAltura;
    property PerimetroCefalico: Double read GetPerimetroCefalico write SetPerimetroCefalico;

    function Get__isset_CircuferenciaAbdominal: Boolean;
    function Get__isset_PerimetroPanturrilha: Boolean;
    function Get__isset_PressaoArterialSistolica: Boolean;
    function Get__isset_PressaoArterialDiastolica: Boolean;
    function Get__isset_FrequenciaRespiratoria: Boolean;
    function Get__isset_FrequenciaCardiaca: Boolean;
    function Get__isset_Temperatura: Boolean;
    function Get__isset_SaturacaoO2: Boolean;
    function Get__isset_GlicemiaCapilar: Boolean;
    function Get__isset_TipoGlicemiaCapilar: Boolean;
    function Get__isset_Peso: Boolean;
    function Get__isset_Altura: Boolean;
    function Get__isset_PerimetroCefalico: Boolean;

    property __isset_CircuferenciaAbdominal: Boolean read Get__isset_CircuferenciaAbdominal;
    property __isset_PerimetroPanturrilha: Boolean read Get__isset_PerimetroPanturrilha;
    property __isset_PressaoArterialSistolica: Boolean read Get__isset_PressaoArterialSistolica;
    property __isset_PressaoArterialDiastolica: Boolean read Get__isset_PressaoArterialDiastolica;
    property __isset_FrequenciaRespiratoria: Boolean read Get__isset_FrequenciaRespiratoria;
    property __isset_FrequenciaCardiaca: Boolean read Get__isset_FrequenciaCardiaca;
    property __isset_Temperatura: Boolean read Get__isset_Temperatura;
    property __isset_SaturacaoO2: Boolean read Get__isset_SaturacaoO2;
    property __isset_GlicemiaCapilar: Boolean read Get__isset_GlicemiaCapilar;
    property __isset_TipoGlicemiaCapilar: Boolean read Get__isset_TipoGlicemiaCapilar;
    property __isset_Peso: Boolean read Get__isset_Peso;
    property __isset_Altura: Boolean read Get__isset_Altura;
    property __isset_PerimetroCefalico: Boolean read Get__isset_PerimetroCefalico;
  end;

  TMedicoesThriftImpl = class(TInterfacedObject, IBase, IMedicoesThrift)
  private
    FCircuferenciaAbdominal: Double;
    FPerimetroPanturrilha: Double;
    FPressaoArterialSistolica: Integer;
    FPressaoArterialDiastolica: Integer;
    FFrequenciaRespiratoria: Integer;
    FFrequenciaCardiaca: Integer;
    FTemperatura: Double;
    FSaturacaoO2: Integer;
    FGlicemiaCapilar: Integer;
    FTipoGlicemiaCapilar: Int64;
    FPeso: Double;
    FAltura: Double;
    FPerimetroCefalico: Double;
    
    F__isset_CircuferenciaAbdominal: Boolean;
    F__isset_PerimetroPanturrilha: Boolean;
    F__isset_PressaoArterialSistolica: Boolean;
    F__isset_PressaoArterialDiastolica: Boolean;
    F__isset_FrequenciaRespiratoria: Boolean;
    F__isset_FrequenciaCardiaca: Boolean;
    F__isset_Temperatura: Boolean;
    F__isset_SaturacaoO2: Boolean;
    F__isset_GlicemiaCapilar: Boolean;
    F__isset_TipoGlicemiaCapilar: Boolean;
    F__isset_Peso: Boolean;
    F__isset_Altura: Boolean;
    F__isset_PerimetroCefalico: Boolean;
    
    function GetCircuferenciaAbdominal: Double;
    procedure SetCircuferenciaAbdominal( const Value: Double);
    function GetPerimetroPanturrilha: Double;
    procedure SetPerimetroPanturrilha( const Value: Double);
    function GetPressaoArterialSistolica: Integer;
    procedure SetPressaoArterialSistolica( const Value: Integer);
    function GetPressaoArterialDiastolica: Integer;
    procedure SetPressaoArterialDiastolica( const Value: Integer);
    function GetFrequenciaRespiratoria: Integer;
    procedure SetFrequenciaRespiratoria( const Value: Integer);
    function GetFrequenciaCardiaca: Integer;
    procedure SetFrequenciaCardiaca( const Value: Integer);
    function GetTemperatura: Double;
    procedure SetTemperatura( const Value: Double);
    function GetSaturacaoO2: Integer;
    procedure SetSaturacaoO2( const Value: Integer);
    function GetGlicemiaCapilar: Integer;
    procedure SetGlicemiaCapilar( const Value: Integer);
    function GetTipoGlicemiaCapilar: Int64;
    procedure SetTipoGlicemiaCapilar( const Value: Int64);
    function GetPeso: Double;
    procedure SetPeso( const Value: Double);
    function GetAltura: Double;
    procedure SetAltura( const Value: Double);
    function GetPerimetroCefalico: Double;
    procedure SetPerimetroCefalico( const Value: Double);

    function Get__isset_CircuferenciaAbdominal: Boolean;
    function Get__isset_PerimetroPanturrilha: Boolean;
    function Get__isset_PressaoArterialSistolica: Boolean;
    function Get__isset_PressaoArterialDiastolica: Boolean;
    function Get__isset_FrequenciaRespiratoria: Boolean;
    function Get__isset_FrequenciaCardiaca: Boolean;
    function Get__isset_Temperatura: Boolean;
    function Get__isset_SaturacaoO2: Boolean;
    function Get__isset_GlicemiaCapilar: Boolean;
    function Get__isset_TipoGlicemiaCapilar: Boolean;
    function Get__isset_Peso: Boolean;
    function Get__isset_Altura: Boolean;
    function Get__isset_PerimetroCefalico: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property CircuferenciaAbdominal: Double read GetCircuferenciaAbdominal write SetCircuferenciaAbdominal;
    property PerimetroPanturrilha: Double read GetPerimetroPanturrilha write SetPerimetroPanturrilha;
    property PressaoArterialSistolica: Integer read GetPressaoArterialSistolica write SetPressaoArterialSistolica;
    property PressaoArterialDiastolica: Integer read GetPressaoArterialDiastolica write SetPressaoArterialDiastolica;
    property FrequenciaRespiratoria: Integer read GetFrequenciaRespiratoria write SetFrequenciaRespiratoria;
    property FrequenciaCardiaca: Integer read GetFrequenciaCardiaca write SetFrequenciaCardiaca;
    property Temperatura: Double read GetTemperatura write SetTemperatura;
    property SaturacaoO2: Integer read GetSaturacaoO2 write SetSaturacaoO2;
    property GlicemiaCapilar: Integer read GetGlicemiaCapilar write SetGlicemiaCapilar;
    property TipoGlicemiaCapilar: Int64 read GetTipoGlicemiaCapilar write SetTipoGlicemiaCapilar;
    property Peso: Double read GetPeso write SetPeso;
    property Altura: Double read GetAltura write SetAltura;
    property PerimetroCefalico: Double read GetPerimetroCefalico write SetPerimetroCefalico;

    // isset
    property __isset_CircuferenciaAbdominal: Boolean read Get__isset_CircuferenciaAbdominal;
    property __isset_PerimetroPanturrilha: Boolean read Get__isset_PerimetroPanturrilha;
    property __isset_PressaoArterialSistolica: Boolean read Get__isset_PressaoArterialSistolica;
    property __isset_PressaoArterialDiastolica: Boolean read Get__isset_PressaoArterialDiastolica;
    property __isset_FrequenciaRespiratoria: Boolean read Get__isset_FrequenciaRespiratoria;
    property __isset_FrequenciaCardiaca: Boolean read Get__isset_FrequenciaCardiaca;
    property __isset_Temperatura: Boolean read Get__isset_Temperatura;
    property __isset_SaturacaoO2: Boolean read Get__isset_SaturacaoO2;
    property __isset_GlicemiaCapilar: Boolean read Get__isset_GlicemiaCapilar;
    property __isset_TipoGlicemiaCapilar: Boolean read Get__isset_TipoGlicemiaCapilar;
    property __isset_Peso: Boolean read Get__isset_Peso;
    property __isset_Altura: Boolean read Get__isset_Altura;
    property __isset_PerimetroCefalico: Boolean read Get__isset_PerimetroCefalico;
  end;

implementation

constructor THeaderCdsCadastroThriftImpl.Create;
begin
  inherited;
end;

destructor THeaderCdsCadastroThriftImpl.Destroy;
begin
  inherited;
end;

function THeaderCdsCadastroThriftImpl.GetCnesUnidadeSaude: string;
begin
  Result := FCnesUnidadeSaude;
end;

procedure THeaderCdsCadastroThriftImpl.SetCnesUnidadeSaude( const Value: string);
begin
  F__isset_CnesUnidadeSaude := True;
  FCnesUnidadeSaude := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_CnesUnidadeSaude: Boolean;
begin
  Result := F__isset_CnesUnidadeSaude;
end;

function THeaderCdsCadastroThriftImpl.GetCnsProfissional: string;
begin
  Result := FCnsProfissional;
end;

procedure THeaderCdsCadastroThriftImpl.SetCnsProfissional( const Value: string);
begin
  F__isset_CnsProfissional := True;
  FCnsProfissional := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_CnsProfissional: Boolean;
begin
  Result := F__isset_CnsProfissional;
end;

function THeaderCdsCadastroThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure THeaderCdsCadastroThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

function THeaderCdsCadastroThriftImpl.GetDataAtendimento: Int64;
begin
  Result := FDataAtendimento;
end;

procedure THeaderCdsCadastroThriftImpl.SetDataAtendimento( const Value: Int64);
begin
  F__isset_DataAtendimento := True;
  FDataAtendimento := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_DataAtendimento: Boolean;
begin
  Result := F__isset_DataAtendimento;
end;

function THeaderCdsCadastroThriftImpl.GetIneEquipe: string;
begin
  Result := FIneEquipe;
end;

procedure THeaderCdsCadastroThriftImpl.SetIneEquipe( const Value: string);
begin
  F__isset_IneEquipe := True;
  FIneEquipe := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_IneEquipe: Boolean;
begin
  Result := F__isset_IneEquipe;
end;

function THeaderCdsCadastroThriftImpl.GetMicroarea: Int64;
begin
  Result := FMicroarea;
end;

procedure THeaderCdsCadastroThriftImpl.SetMicroarea( const Value: Int64);
begin
  F__isset_Microarea := True;
  FMicroarea := Value;
end;

function THeaderCdsCadastroThriftImpl.Get__isset_Microarea: Boolean;
begin
  Result := F__isset_Microarea;
end;

procedure THeaderCdsCadastroThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            CnesUnidadeSaude := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CnsProfissional := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.String_) then
          begin
            IneEquipe := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.I64) then
          begin
            Microarea := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure THeaderCdsCadastroThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('HeaderCdsCadastroThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CnesUnidadeSaude) then
  begin
    field_.Name := 'cnesUnidadeSaude';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CnesUnidadeSaude);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CnsProfissional) then
  begin
    field_.Name := 'cnsProfissional';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CnsProfissional);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataAtendimento) then
  begin
    field_.Name := 'dataAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_IneEquipe) then
  begin
    field_.Name := 'ineEquipe';
    field_.Type_  := TType.String_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(IneEquipe);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Microarea) then
  begin
    field_.Name := 'microarea';
    field_.Type_  := TType.I64;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(Microarea);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function THeaderCdsCadastroThriftImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (__isset_CnesUnidadeSaude) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CnesUnidadeSaude: ');
      _sb0.Append(CnesUnidadeSaude);
    end;
    if (__isset_CnsProfissional) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CnsProfissional: ');
      _sb0.Append(CnsProfissional);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('CodigoIbgeMunicipio: ');
      _sb0.Append(CodigoIbgeMunicipio);
    end;
    if (__isset_DataAtendimento) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('DataAtendimento: ');
      _sb0.Append(DataAtendimento);
    end;
    if (__isset_IneEquipe) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('IneEquipe: ');
      _sb0.Append(IneEquipe);
    end;
    if (__isset_Microarea) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Microarea: ');
      _sb0.Append(Microarea);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;

constructor TLotacaoHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TLotacaoHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TLotacaoHeaderThriftImpl.GetProfissionalCNS: string;
begin
  Result := FProfissionalCNS;
end;

procedure TLotacaoHeaderThriftImpl.SetProfissionalCNS( const Value: string);
begin
  F__isset_ProfissionalCNS := True;
  FProfissionalCNS := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_ProfissionalCNS: Boolean;
begin
  Result := F__isset_ProfissionalCNS;
end;

function TLotacaoHeaderThriftImpl.GetCboCodigo_2002: string;
begin
  Result := FCboCodigo_2002;
end;

procedure TLotacaoHeaderThriftImpl.SetCboCodigo_2002( const Value: string);
begin
  F__isset_CboCodigo_2002 := True;
  FCboCodigo_2002 := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_CboCodigo_2002: Boolean;
begin
  Result := F__isset_CboCodigo_2002;
end;

function TLotacaoHeaderThriftImpl.GetCnes: string;
begin
  Result := FCnes;
end;

procedure TLotacaoHeaderThriftImpl.SetCnes( const Value: string);
begin
  F__isset_Cnes := True;
  FCnes := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_Cnes: Boolean;
begin
  Result := F__isset_Cnes;
end;

function TLotacaoHeaderThriftImpl.GetIne: string;
begin
  Result := FIne;
end;

procedure TLotacaoHeaderThriftImpl.SetIne( const Value: string);
begin
  F__isset_Ine := True;
  FIne := Value;
end;

function TLotacaoHeaderThriftImpl.Get__isset_Ine: Boolean;
begin
  Result := F__isset_Ine;
end;

procedure TLotacaoHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            ProfissionalCNS := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CboCodigo_2002 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cnes := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Ine := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TLotacaoHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('LotacaoHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_ProfissionalCNS) then
  begin
    field_.Name := 'profissionalCNS';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(ProfissionalCNS);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CboCodigo_2002) then
  begin
    field_.Name := 'cboCodigo_2002';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CboCodigo_2002);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cnes) then
  begin
    field_.Name := 'cnes';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cnes);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Ine) then
  begin
    field_.Name := 'ine';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Ine);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TLotacaoHeaderThriftImpl.ToString: string;
var
  _sb2 : TThriftStringBuilder;
  _first3 : Boolean;
begin
  _sb2 := TThriftStringBuilder.Create('(');
  try
    _first3 := TRUE;
    if (__isset_ProfissionalCNS) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('ProfissionalCNS: ');
      _sb2.Append(ProfissionalCNS);
    end;
    if (__isset_CboCodigo_2002) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('CboCodigo_2002: ');
      _sb2.Append(CboCodigo_2002);
    end;
    if (__isset_Cnes) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('Cnes: ');
      _sb2.Append(Cnes);
    end;
    if (__isset_Ine) then begin
      if not _first3 then _sb2.Append(',');
      _first3 := FALSE;
      _sb2.Append('Ine: ');
      _sb2.Append(Ine);
    end;
    _sb2.Append(')');
    Result := _sb2.ToString;
    if _first3 then {prevent warning};
  finally
    _sb2.Free;
  end;
end;

constructor TUnicaLotacaoHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TUnicaLotacaoHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TUnicaLotacaoHeaderThriftImpl.GetProfissionalCNS: string;
begin
  Result := FProfissionalCNS;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetProfissionalCNS( const Value: string);
begin
  F__isset_ProfissionalCNS := True;
  FProfissionalCNS := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_ProfissionalCNS: Boolean;
begin
  Result := F__isset_ProfissionalCNS;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCboCodigo_2002: string;
begin
  Result := FCboCodigo_2002;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCboCodigo_2002( const Value: string);
begin
  F__isset_CboCodigo_2002 := True;
  FCboCodigo_2002 := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_CboCodigo_2002: Boolean;
begin
  Result := F__isset_CboCodigo_2002;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCnes: string;
begin
  Result := FCnes;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCnes( const Value: string);
begin
  F__isset_Cnes := True;
  FCnes := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_Cnes: Boolean;
begin
  Result := F__isset_Cnes;
end;

function TUnicaLotacaoHeaderThriftImpl.GetIne: string;
begin
  Result := FIne;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetIne( const Value: string);
begin
  F__isset_Ine := True;
  FIne := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_Ine: Boolean;
begin
  Result := F__isset_Ine;
end;

function TUnicaLotacaoHeaderThriftImpl.GetDataAtendimento: Int64;
begin
  Result := FDataAtendimento;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetDataAtendimento( const Value: Int64);
begin
  F__isset_DataAtendimento := True;
  FDataAtendimento := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_DataAtendimento: Boolean;
begin
  Result := F__isset_DataAtendimento;
end;

function TUnicaLotacaoHeaderThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TUnicaLotacaoHeaderThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TUnicaLotacaoHeaderThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

procedure TUnicaLotacaoHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            ProfissionalCNS := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            CboCodigo_2002 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cnes := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Ine := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TUnicaLotacaoHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('UnicaLotacaoHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_ProfissionalCNS) then
  begin
    field_.Name := 'profissionalCNS';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(ProfissionalCNS);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CboCodigo_2002) then
  begin
    field_.Name := 'cboCodigo_2002';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CboCodigo_2002);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cnes) then
  begin
    field_.Name := 'cnes';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cnes);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Ine) then
  begin
    field_.Name := 'ine';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Ine);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataAtendimento) then
  begin
    field_.Name := 'dataAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TUnicaLotacaoHeaderThriftImpl.ToString: string;
var
  _sb4 : TThriftStringBuilder;
  _first5 : Boolean;
begin
  _sb4 := TThriftStringBuilder.Create('(');
  try
    _first5 := TRUE;
    if (__isset_ProfissionalCNS) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('ProfissionalCNS: ');
      _sb4.Append(ProfissionalCNS);
    end;
    if (__isset_CboCodigo_2002) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('CboCodigo_2002: ');
      _sb4.Append(CboCodigo_2002);
    end;
    if (__isset_Cnes) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('Cnes: ');
      _sb4.Append(Cnes);
    end;
    if (__isset_Ine) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('Ine: ');
      _sb4.Append(Ine);
    end;
    if (__isset_DataAtendimento) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('DataAtendimento: ');
      _sb4.Append(DataAtendimento);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first5 then _sb4.Append(',');
      _first5 := FALSE;
      _sb4.Append('CodigoIbgeMunicipio: ');
      _sb4.Append(CodigoIbgeMunicipio);
    end;
    _sb4.Append(')');
    Result := _sb4.ToString;
    if _first5 then {prevent warning};
  finally
    _sb4.Free;
  end;
end;

constructor TVariasLotacoesHeaderThriftImpl.Create;
begin
  inherited;
end;

destructor TVariasLotacoesHeaderThriftImpl.Destroy;
begin
  inherited;
end;

function TVariasLotacoesHeaderThriftImpl.GetLotacaoFormPrincipal: ILotacaoHeaderThrift;
begin
  Result := FLotacaoFormPrincipal;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetLotacaoFormPrincipal( const Value: ILotacaoHeaderThrift);
begin
  F__isset_LotacaoFormPrincipal := True;
  FLotacaoFormPrincipal := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_LotacaoFormPrincipal: Boolean;
begin
  Result := F__isset_LotacaoFormPrincipal;
end;

function TVariasLotacoesHeaderThriftImpl.GetLotacaoFormAtendimentoCompartilhado: ILotacaoHeaderThrift;
begin
  Result := FLotacaoFormAtendimentoCompartilhado;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetLotacaoFormAtendimentoCompartilhado( const Value: ILotacaoHeaderThrift);
begin
  F__isset_LotacaoFormAtendimentoCompartilhado := True;
  FLotacaoFormAtendimentoCompartilhado := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_LotacaoFormAtendimentoCompartilhado: Boolean;
begin
  Result := F__isset_LotacaoFormAtendimentoCompartilhado;
end;

function TVariasLotacoesHeaderThriftImpl.GetDataAtendimento: Int64;
begin
  Result := FDataAtendimento;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetDataAtendimento( const Value: Int64);
begin
  F__isset_DataAtendimento := True;
  FDataAtendimento := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_DataAtendimento: Boolean;
begin
  Result := F__isset_DataAtendimento;
end;

function TVariasLotacoesHeaderThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TVariasLotacoesHeaderThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TVariasLotacoesHeaderThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

procedure TVariasLotacoesHeaderThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        6: begin
          if (field_.Type_ = TType.Struct) then
          begin
            LotacaoFormPrincipal := TLotacaoHeaderThriftImpl.Create;
            LotacaoFormPrincipal.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.Struct) then
          begin
            LotacaoFormAtendimentoCompartilhado := TLotacaoHeaderThriftImpl.Create;
            LotacaoFormAtendimentoCompartilhado.Read(iprot);
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataAtendimento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TVariasLotacoesHeaderThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('VariasLotacoesHeaderThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (LotacaoFormPrincipal <> nil) and __isset_LotacaoFormPrincipal then
  begin
    field_.Name := 'lotacaoFormPrincipal';
    field_.Type_  := TType.Struct;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    LotacaoFormPrincipal.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  if (LotacaoFormAtendimentoCompartilhado <> nil) and __isset_LotacaoFormAtendimentoCompartilhado then
  begin
    field_.Name := 'lotacaoFormAtendimentoCompartilhado';
    field_.Type_  := TType.Struct;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    LotacaoFormAtendimentoCompartilhado.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataAtendimento) then
  begin
    field_.Name := 'dataAtendimento';
    field_.Type_  := TType.I64;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataAtendimento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TVariasLotacoesHeaderThriftImpl.ToString: string;
var
  _sb6 : TThriftStringBuilder;
  _first7 : Boolean;
begin
  _sb6 := TThriftStringBuilder.Create('(');
  try
    _first7 := TRUE;
    if (LotacaoFormPrincipal <> nil) and __isset_LotacaoFormPrincipal then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('LotacaoFormPrincipal: ');
      if (LotacaoFormPrincipal = nil) then _sb6.Append('<null>') else _sb6.Append(LotacaoFormPrincipal.ToString());
    end;
    if (LotacaoFormAtendimentoCompartilhado <> nil) and __isset_LotacaoFormAtendimentoCompartilhado then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('LotacaoFormAtendimentoCompartilhado: ');
      if (LotacaoFormAtendimentoCompartilhado = nil) then _sb6.Append('<null>') else _sb6.Append(LotacaoFormAtendimentoCompartilhado.ToString());
    end;
    if (__isset_DataAtendimento) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('DataAtendimento: ');
      _sb6.Append(DataAtendimento);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first7 then _sb6.Append(',');
      _first7 := FALSE;
      _sb6.Append('CodigoIbgeMunicipio: ');
      _sb6.Append(CodigoIbgeMunicipio);
    end;
    _sb6.Append(')');
    Result := _sb6.ToString;
    if _first7 then {prevent warning};
  finally
    _sb6.Free;
  end;
end;

constructor TLotacaoThriftImpl.Create;
begin
  inherited;
end;

destructor TLotacaoThriftImpl.Destroy;
begin
  inherited;
end;

function TLotacaoThriftImpl.GetCpf: string;
begin
  Result := FCpf;
end;

procedure TLotacaoThriftImpl.SetCpf( const Value: string);
begin
  F__isset_Cpf := True;
  FCpf := Value;
end;

function TLotacaoThriftImpl.Get__isset_Cpf: Boolean;
begin
  Result := F__isset_Cpf;
end;

function TLotacaoThriftImpl.GetCns: string;
begin
  Result := FCns;
end;

procedure TLotacaoThriftImpl.SetCns( const Value: string);
begin
  F__isset_Cns := True;
  FCns := Value;
end;

function TLotacaoThriftImpl.Get__isset_Cns: Boolean;
begin
  Result := F__isset_Cns;
end;

function TLotacaoThriftImpl.GetCboCodigo_2002: string;
begin
  Result := FCboCodigo_2002;
end;

procedure TLotacaoThriftImpl.SetCboCodigo_2002( const Value: string);
begin
  F__isset_CboCodigo_2002 := True;
  FCboCodigo_2002 := Value;
end;

function TLotacaoThriftImpl.Get__isset_CboCodigo_2002: Boolean;
begin
  Result := F__isset_CboCodigo_2002;
end;

function TLotacaoThriftImpl.GetIne: string;
begin
  Result := FIne;
end;

procedure TLotacaoThriftImpl.SetIne( const Value: string);
begin
  F__isset_Ine := True;
  FIne := Value;
end;

function TLotacaoThriftImpl.Get__isset_Ine: Boolean;
begin
  Result := F__isset_Ine;
end;

function TLotacaoThriftImpl.GetCnes: string;
begin
  Result := FCnes;
end;

procedure TLotacaoThriftImpl.SetCnes( const Value: string);
begin
  F__isset_Cnes := True;
  FCnes := Value;
end;

function TLotacaoThriftImpl.Get__isset_Cnes: Boolean;
begin
  Result := F__isset_Cnes;
end;

function TLotacaoThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TLotacaoThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TLotacaoThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

procedure TLotacaoThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cpf := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cns := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            CboCodigo_2002 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Ine := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cnes := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TLotacaoThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('LotacaoThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Cpf) then
  begin
    field_.Name := 'cpf';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cpf);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cns) then
  begin
    field_.Name := 'cns';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cns);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CboCodigo_2002) then
  begin
    field_.Name := 'cboCodigo_2002';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CboCodigo_2002);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Ine) then
  begin
    field_.Name := 'ine';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Ine);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cnes) then
  begin
    field_.Name := 'cnes';
    field_.Type_  := TType.String_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cnes);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TLotacaoThriftImpl.ToString: string;
var
  _sb8 : TThriftStringBuilder;
  _first9 : Boolean;
begin
  _sb8 := TThriftStringBuilder.Create('(');
  try
    _first9 := TRUE;
    if (__isset_Cpf) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('Cpf: ');
      _sb8.Append(Cpf);
    end;
    if (__isset_Cns) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('Cns: ');
      _sb8.Append(Cns);
    end;
    if (__isset_CboCodigo_2002) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('CboCodigo_2002: ');
      _sb8.Append(CboCodigo_2002);
    end;
    if (__isset_Ine) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('Ine: ');
      _sb8.Append(Ine);
    end;
    if (__isset_Cnes) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('Cnes: ');
      _sb8.Append(Cnes);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first9 then _sb8.Append(',');
      _first9 := FALSE;
      _sb8.Append('CodigoIbgeMunicipio: ');
      _sb8.Append(CodigoIbgeMunicipio);
    end;
    _sb8.Append(')');
    Result := _sb8.ToString;
    if _first9 then {prevent warning};
  finally
    _sb8.Free;
  end;
end;

constructor TEnderecoLocalPermanenciaThriftImpl.Create;
begin
  inherited;
end;

destructor TEnderecoLocalPermanenciaThriftImpl.Destroy;
begin
  inherited;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetBairro: string;
begin
  Result := FBairro;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetBairro( const Value: string);
begin
  F__isset_Bairro := True;
  FBairro := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Bairro: Boolean;
begin
  Result := F__isset_Bairro;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetCep: string;
begin
  Result := FCep;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetCep( const Value: string);
begin
  F__isset_Cep := True;
  FCep := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Cep: Boolean;
begin
  Result := F__isset_Cep;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetCodigoIbgeMunicipio: string;
begin
  Result := FCodigoIbgeMunicipio;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetCodigoIbgeMunicipio( const Value: string);
begin
  F__isset_CodigoIbgeMunicipio := True;
  FCodigoIbgeMunicipio := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_CodigoIbgeMunicipio: Boolean;
begin
  Result := F__isset_CodigoIbgeMunicipio;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetComplemento: string;
begin
  Result := FComplemento;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetComplemento( const Value: string);
begin
  F__isset_Complemento := True;
  FComplemento := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Complemento: Boolean;
begin
  Result := F__isset_Complemento;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNomeLogradouro: string;
begin
  Result := FNomeLogradouro;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNomeLogradouro( const Value: string);
begin
  F__isset_NomeLogradouro := True;
  FNomeLogradouro := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_NomeLogradouro: Boolean;
begin
  Result := F__isset_NomeLogradouro;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNumero: string;
begin
  Result := FNumero;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNumero( const Value: string);
begin
  F__isset_Numero := True;
  FNumero := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_Numero: Boolean;
begin
  Result := F__isset_Numero;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetNumeroDneUf: string;
begin
  Result := FNumeroDneUf;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetNumeroDneUf( const Value: string);
begin
  F__isset_NumeroDneUf := True;
  FNumeroDneUf := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_NumeroDneUf: Boolean;
begin
  Result := F__isset_NumeroDneUf;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTelefoneContato: string;
begin
  Result := FTelefoneContato;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTelefoneContato( const Value: string);
begin
  F__isset_TelefoneContato := True;
  FTelefoneContato := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TelefoneContato: Boolean;
begin
  Result := F__isset_TelefoneContato;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTelefoneResidencia: string;
begin
  Result := FTelefoneResidencia;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTelefoneResidencia( const Value: string);
begin
  F__isset_TelefoneResidencia := True;
  FTelefoneResidencia := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TelefoneResidencia: Boolean;
begin
  Result := F__isset_TelefoneResidencia;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetTipoLogradouroNumeroDne: string;
begin
  Result := FTipoLogradouroNumeroDne;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetTipoLogradouroNumeroDne( const Value: string);
begin
  F__isset_TipoLogradouroNumeroDne := True;
  FTipoLogradouroNumeroDne := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_TipoLogradouroNumeroDne: Boolean;
begin
  Result := F__isset_TipoLogradouroNumeroDne;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetStSemNumero: Boolean;
begin
  Result := FStSemNumero;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetStSemNumero( const Value: Boolean);
begin
  F__isset_StSemNumero := True;
  FStSemNumero := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_StSemNumero: Boolean;
begin
  Result := F__isset_StSemNumero;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetPontoReferencia: string;
begin
  Result := FPontoReferencia;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetPontoReferencia( const Value: string);
begin
  F__isset_PontoReferencia := True;
  FPontoReferencia := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_PontoReferencia: Boolean;
begin
  Result := F__isset_PontoReferencia;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetMicroArea: string;
begin
  Result := FMicroArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetMicroArea( const Value: string);
begin
  F__isset_MicroArea := True;
  FMicroArea := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_MicroArea: Boolean;
begin
  Result := F__isset_MicroArea;
end;

function TEnderecoLocalPermanenciaThriftImpl.GetStForaArea: Boolean;
begin
  Result := FStForaArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.SetStForaArea( const Value: Boolean);
begin
  F__isset_StForaArea := True;
  FStForaArea := Value;
end;

function TEnderecoLocalPermanenciaThriftImpl.Get__isset_StForaArea: Boolean;
begin
  Result := F__isset_StForaArea;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            Bairro := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            Cep := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoIbgeMunicipio := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.String_) then
          begin
            Complemento := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.String_) then
          begin
            NomeLogradouro := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.String_) then
          begin
            Numero := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.String_) then
          begin
            NumeroDneUf := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.String_) then
          begin
            TelefoneContato := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.String_) then
          begin
            TelefoneResidencia := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.String_) then
          begin
            TipoLogradouroNumeroDne := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            StSemNumero := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.String_) then
          begin
            PontoReferencia := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        13: begin
          if (field_.Type_ = TType.String_) then
          begin
            MicroArea := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        14: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            StForaArea := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TEnderecoLocalPermanenciaThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('EnderecoLocalPermanenciaThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Bairro) then
  begin
    field_.Name := 'bairro';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Bairro);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Cep) then
  begin
    field_.Name := 'cep';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Cep);
    oprot.WriteFieldEnd();
  end;
  if (__isset_CodigoIbgeMunicipio) then
  begin
    field_.Name := 'codigoIbgeMunicipio';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoIbgeMunicipio);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Complemento) then
  begin
    field_.Name := 'complemento';
    field_.Type_  := TType.String_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Complemento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NomeLogradouro) then
  begin
    field_.Name := 'nomeLogradouro';
    field_.Type_  := TType.String_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(NomeLogradouro);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Numero) then
  begin
    field_.Name := 'numero';
    field_.Type_  := TType.String_;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Numero);
    oprot.WriteFieldEnd();
  end;
  if (__isset_NumeroDneUf) then
  begin
    field_.Name := 'numeroDneUf';
    field_.Type_  := TType.String_;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(NumeroDneUf);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TelefoneContato) then
  begin
    field_.Name := 'telefoneContato';
    field_.Type_  := TType.String_;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TelefoneContato);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TelefoneResidencia) then
  begin
    field_.Name := 'telefoneResidencia';
    field_.Type_  := TType.String_;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TelefoneResidencia);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TipoLogradouroNumeroDne) then
  begin
    field_.Name := 'tipoLogradouroNumeroDne';
    field_.Type_  := TType.String_;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(TipoLogradouroNumeroDne);
    oprot.WriteFieldEnd();
  end;
  if (__isset_StSemNumero) then
  begin
    field_.Name := 'stSemNumero';
    field_.Type_  := TType.Bool_;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(StSemNumero);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PontoReferencia) then
  begin
    field_.Name := 'pontoReferencia';
    field_.Type_  := TType.String_;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(PontoReferencia);
    oprot.WriteFieldEnd();
  end;
  if (__isset_MicroArea) then
  begin
    field_.Name := 'microArea';
    field_.Type_  := TType.String_;
    field_.ID := 13;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(MicroArea);
    oprot.WriteFieldEnd();
  end;
  if (__isset_StForaArea) then
  begin
    field_.Name := 'stForaArea';
    field_.Type_  := TType.Bool_;
    field_.ID := 14;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(StForaArea);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TEnderecoLocalPermanenciaThriftImpl.ToString: string;
var
  _sb10 : TThriftStringBuilder;
  _first11 : Boolean;
begin
  _sb10 := TThriftStringBuilder.Create('(');
  try
    _first11 := TRUE;
    if (__isset_Bairro) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('Bairro: ');
      _sb10.Append(Bairro);
    end;
    if (__isset_Cep) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('Cep: ');
      _sb10.Append(Cep);
    end;
    if (__isset_CodigoIbgeMunicipio) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('CodigoIbgeMunicipio: ');
      _sb10.Append(CodigoIbgeMunicipio);
    end;
    if (__isset_Complemento) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('Complemento: ');
      _sb10.Append(Complemento);
    end;
    if (__isset_NomeLogradouro) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('NomeLogradouro: ');
      _sb10.Append(NomeLogradouro);
    end;
    if (__isset_Numero) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('Numero: ');
      _sb10.Append(Numero);
    end;
    if (__isset_NumeroDneUf) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('NumeroDneUf: ');
      _sb10.Append(NumeroDneUf);
    end;
    if (__isset_TelefoneContato) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('TelefoneContato: ');
      _sb10.Append(TelefoneContato);
    end;
    if (__isset_TelefoneResidencia) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('TelefoneResidencia: ');
      _sb10.Append(TelefoneResidencia);
    end;
    if (__isset_TipoLogradouroNumeroDne) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('TipoLogradouroNumeroDne: ');
      _sb10.Append(TipoLogradouroNumeroDne);
    end;
    if (__isset_StSemNumero) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('StSemNumero: ');
      _sb10.Append(StSemNumero);
    end;
    if (__isset_PontoReferencia) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('PontoReferencia: ');
      _sb10.Append(PontoReferencia);
    end;
    if (__isset_MicroArea) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('MicroArea: ');
      _sb10.Append(MicroArea);
    end;
    if (__isset_StForaArea) then begin
      if not _first11 then _sb10.Append(',');
      _first11 := FALSE;
      _sb10.Append('StForaArea: ');
      _sb10.Append(StForaArea);
    end;
    _sb10.Append(')');
    Result := _sb10.ToString;
    if _first11 then {prevent warning};
  finally
    _sb10.Free;
  end;
end;

constructor TMedicamentoThriftImpl.Create;
begin
  inherited;
end;

destructor TMedicamentoThriftImpl.Destroy;
begin
  inherited;
end;

function TMedicamentoThriftImpl.GetCodigoCatmat: string;
begin
  Result := FCodigoCatmat;
end;

procedure TMedicamentoThriftImpl.SetCodigoCatmat( const Value: string);
begin
  F__isset_CodigoCatmat := True;
  FCodigoCatmat := Value;
end;

function TMedicamentoThriftImpl.Get__isset_CodigoCatmat: Boolean;
begin
  Result := F__isset_CodigoCatmat;
end;

function TMedicamentoThriftImpl.GetViaAdministracao: Int64;
begin
  Result := FViaAdministracao;
end;

procedure TMedicamentoThriftImpl.SetViaAdministracao( const Value: Int64);
begin
  F__isset_ViaAdministracao := True;
  FViaAdministracao := Value;
end;

function TMedicamentoThriftImpl.Get__isset_ViaAdministracao: Boolean;
begin
  Result := F__isset_ViaAdministracao;
end;

function TMedicamentoThriftImpl.GetDose: string;
begin
  Result := FDose;
end;

procedure TMedicamentoThriftImpl.SetDose( const Value: string);
begin
  F__isset_Dose := True;
  FDose := Value;
end;

function TMedicamentoThriftImpl.Get__isset_Dose: Boolean;
begin
  Result := F__isset_Dose;
end;

function TMedicamentoThriftImpl.GetDoseUnica: Boolean;
begin
  Result := FDoseUnica;
end;

procedure TMedicamentoThriftImpl.SetDoseUnica( const Value: Boolean);
begin
  F__isset_DoseUnica := True;
  FDoseUnica := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DoseUnica: Boolean;
begin
  Result := F__isset_DoseUnica;
end;

function TMedicamentoThriftImpl.GetUsoContinuo: Boolean;
begin
  Result := FUsoContinuo;
end;

procedure TMedicamentoThriftImpl.SetUsoContinuo( const Value: Boolean);
begin
  F__isset_UsoContinuo := True;
  FUsoContinuo := Value;
end;

function TMedicamentoThriftImpl.Get__isset_UsoContinuo: Boolean;
begin
  Result := F__isset_UsoContinuo;
end;

function TMedicamentoThriftImpl.GetDoseFrequenciaTipo: Int64;
begin
  Result := FDoseFrequenciaTipo;
end;

procedure TMedicamentoThriftImpl.SetDoseFrequenciaTipo( const Value: Int64);
begin
  F__isset_DoseFrequenciaTipo := True;
  FDoseFrequenciaTipo := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DoseFrequenciaTipo: Boolean;
begin
  Result := F__isset_DoseFrequenciaTipo;
end;

function TMedicamentoThriftImpl.GetDoseFrequencia: string;
begin
  Result := FDoseFrequencia;
end;

procedure TMedicamentoThriftImpl.SetDoseFrequencia( const Value: string);
begin
  F__isset_DoseFrequencia := True;
  FDoseFrequencia := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DoseFrequencia: Boolean;
begin
  Result := F__isset_DoseFrequencia;
end;

function TMedicamentoThriftImpl.GetDoseFrequenciaQuantidade: Integer;
begin
  Result := FDoseFrequenciaQuantidade;
end;

procedure TMedicamentoThriftImpl.SetDoseFrequenciaQuantidade( const Value: Integer);
begin
  F__isset_DoseFrequenciaQuantidade := True;
  FDoseFrequenciaQuantidade := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DoseFrequenciaQuantidade: Boolean;
begin
  Result := F__isset_DoseFrequenciaQuantidade;
end;

function TMedicamentoThriftImpl.GetDoseFrequenciaUnidadeMedida: Int64;
begin
  Result := FDoseFrequenciaUnidadeMedida;
end;

procedure TMedicamentoThriftImpl.SetDoseFrequenciaUnidadeMedida( const Value: Int64);
begin
  F__isset_DoseFrequenciaUnidadeMedida := True;
  FDoseFrequenciaUnidadeMedida := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DoseFrequenciaUnidadeMedida: Boolean;
begin
  Result := F__isset_DoseFrequenciaUnidadeMedida;
end;

function TMedicamentoThriftImpl.GetDtInicioTratamento: Int64;
begin
  Result := FDtInicioTratamento;
end;

procedure TMedicamentoThriftImpl.SetDtInicioTratamento( const Value: Int64);
begin
  F__isset_DtInicioTratamento := True;
  FDtInicioTratamento := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DtInicioTratamento: Boolean;
begin
  Result := F__isset_DtInicioTratamento;
end;

function TMedicamentoThriftImpl.GetDuracaoTratamento: Integer;
begin
  Result := FDuracaoTratamento;
end;

procedure TMedicamentoThriftImpl.SetDuracaoTratamento( const Value: Integer);
begin
  F__isset_DuracaoTratamento := True;
  FDuracaoTratamento := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DuracaoTratamento: Boolean;
begin
  Result := F__isset_DuracaoTratamento;
end;

function TMedicamentoThriftImpl.GetDuracaoTratamentoMedida: Int64;
begin
  Result := FDuracaoTratamentoMedida;
end;

procedure TMedicamentoThriftImpl.SetDuracaoTratamentoMedida( const Value: Int64);
begin
  F__isset_DuracaoTratamentoMedida := True;
  FDuracaoTratamentoMedida := Value;
end;

function TMedicamentoThriftImpl.Get__isset_DuracaoTratamentoMedida: Boolean;
begin
  Result := F__isset_DuracaoTratamentoMedida;
end;

function TMedicamentoThriftImpl.GetQuantidadeReceitada: Integer;
begin
  Result := FQuantidadeReceitada;
end;

procedure TMedicamentoThriftImpl.SetQuantidadeReceitada( const Value: Integer);
begin
  F__isset_QuantidadeReceitada := True;
  FQuantidadeReceitada := Value;
end;

function TMedicamentoThriftImpl.Get__isset_QuantidadeReceitada: Boolean;
begin
  Result := F__isset_QuantidadeReceitada;
end;

procedure TMedicamentoThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            CodigoCatmat := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I64) then
          begin
            ViaAdministracao := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            Dose := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            DoseUnica := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.Bool_) then
          begin
            UsoContinuo := iprot.ReadBool();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.I64) then
          begin
            DoseFrequenciaTipo := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.String_) then
          begin
            DoseFrequencia := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.I32) then
          begin
            DoseFrequenciaQuantidade := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.I64) then
          begin
            DoseFrequenciaUnidadeMedida := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.I64) then
          begin
            DtInicioTratamento := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.I32) then
          begin
            DuracaoTratamento := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.I64) then
          begin
            DuracaoTratamentoMedida := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        13: begin
          if (field_.Type_ = TType.I32) then
          begin
            QuantidadeReceitada := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TMedicamentoThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('MedicamentoThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CodigoCatmat) then
  begin
    field_.Name := 'codigoCatmat';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(CodigoCatmat);
    oprot.WriteFieldEnd();
  end;
  if (__isset_ViaAdministracao) then
  begin
    field_.Name := 'viaAdministracao';
    field_.Type_  := TType.I64;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(ViaAdministracao);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Dose) then
  begin
    field_.Name := 'dose';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Dose);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DoseUnica) then
  begin
    field_.Name := 'doseUnica';
    field_.Type_  := TType.Bool_;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(DoseUnica);
    oprot.WriteFieldEnd();
  end;
  if (__isset_UsoContinuo) then
  begin
    field_.Name := 'usoContinuo';
    field_.Type_  := TType.Bool_;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(UsoContinuo);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DoseFrequenciaTipo) then
  begin
    field_.Name := 'doseFrequenciaTipo';
    field_.Type_  := TType.I64;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DoseFrequenciaTipo);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DoseFrequencia) then
  begin
    field_.Name := 'doseFrequencia';
    field_.Type_  := TType.String_;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(DoseFrequencia);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DoseFrequenciaQuantidade) then
  begin
    field_.Name := 'doseFrequenciaQuantidade';
    field_.Type_  := TType.I32;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(DoseFrequenciaQuantidade);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DoseFrequenciaUnidadeMedida) then
  begin
    field_.Name := 'doseFrequenciaUnidadeMedida';
    field_.Type_  := TType.I64;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DoseFrequenciaUnidadeMedida);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DtInicioTratamento) then
  begin
    field_.Name := 'dtInicioTratamento';
    field_.Type_  := TType.I64;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DtInicioTratamento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DuracaoTratamento) then
  begin
    field_.Name := 'duracaoTratamento';
    field_.Type_  := TType.I32;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(DuracaoTratamento);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DuracaoTratamentoMedida) then
  begin
    field_.Name := 'duracaoTratamentoMedida';
    field_.Type_  := TType.I64;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DuracaoTratamentoMedida);
    oprot.WriteFieldEnd();
  end;
  if (__isset_QuantidadeReceitada) then
  begin
    field_.Name := 'quantidadeReceitada';
    field_.Type_  := TType.I32;
    field_.ID := 13;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(QuantidadeReceitada);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TMedicamentoThriftImpl.ToString: string;
var
  _sb12 : TThriftStringBuilder;
  _first13 : Boolean;
begin
  _sb12 := TThriftStringBuilder.Create('(');
  try
    _first13 := TRUE;
    if (__isset_CodigoCatmat) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('CodigoCatmat: ');
      _sb12.Append(CodigoCatmat);
    end;
    if (__isset_ViaAdministracao) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('ViaAdministracao: ');
      _sb12.Append(ViaAdministracao);
    end;
    if (__isset_Dose) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('Dose: ');
      _sb12.Append(Dose);
    end;
    if (__isset_DoseUnica) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DoseUnica: ');
      _sb12.Append(DoseUnica);
    end;
    if (__isset_UsoContinuo) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('UsoContinuo: ');
      _sb12.Append(UsoContinuo);
    end;
    if (__isset_DoseFrequenciaTipo) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DoseFrequenciaTipo: ');
      _sb12.Append(DoseFrequenciaTipo);
    end;
    if (__isset_DoseFrequencia) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DoseFrequencia: ');
      _sb12.Append(DoseFrequencia);
    end;
    if (__isset_DoseFrequenciaQuantidade) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DoseFrequenciaQuantidade: ');
      _sb12.Append(DoseFrequenciaQuantidade);
    end;
    if (__isset_DoseFrequenciaUnidadeMedida) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DoseFrequenciaUnidadeMedida: ');
      _sb12.Append(DoseFrequenciaUnidadeMedida);
    end;
    if (__isset_DtInicioTratamento) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DtInicioTratamento: ');
      _sb12.Append(DtInicioTratamento);
    end;
    if (__isset_DuracaoTratamento) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DuracaoTratamento: ');
      _sb12.Append(DuracaoTratamento);
    end;
    if (__isset_DuracaoTratamentoMedida) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('DuracaoTratamentoMedida: ');
      _sb12.Append(DuracaoTratamentoMedida);
    end;
    if (__isset_QuantidadeReceitada) then begin
      if not _first13 then _sb12.Append(',');
      _first13 := FALSE;
      _sb12.Append('QuantidadeReceitada: ');
      _sb12.Append(QuantidadeReceitada);
    end;
    _sb12.Append(')');
    Result := _sb12.ToString;
    if _first13 then {prevent warning};
  finally
    _sb12.Free;
  end;
end;

constructor TEncaminhamentoExternoThriftImpl.Create;
begin
  inherited;
end;

destructor TEncaminhamentoExternoThriftImpl.Destroy;
begin
  inherited;
end;

function TEncaminhamentoExternoThriftImpl.GetEspecialidade: Int64;
begin
  Result := FEspecialidade;
end;

procedure TEncaminhamentoExternoThriftImpl.SetEspecialidade( const Value: Int64);
begin
  F__isset_Especialidade := True;
  FEspecialidade := Value;
end;

function TEncaminhamentoExternoThriftImpl.Get__isset_Especialidade: Boolean;
begin
  Result := F__isset_Especialidade;
end;

function TEncaminhamentoExternoThriftImpl.GetHipoteseDiagnosticoCid10: string;
begin
  Result := FHipoteseDiagnosticoCid10;
end;

procedure TEncaminhamentoExternoThriftImpl.SetHipoteseDiagnosticoCid10( const Value: string);
begin
  F__isset_HipoteseDiagnosticoCid10 := True;
  FHipoteseDiagnosticoCid10 := Value;
end;

function TEncaminhamentoExternoThriftImpl.Get__isset_HipoteseDiagnosticoCid10: Boolean;
begin
  Result := F__isset_HipoteseDiagnosticoCid10;
end;

function TEncaminhamentoExternoThriftImpl.GetHipoteseDiagnosticoCiap2: string;
begin
  Result := FHipoteseDiagnosticoCiap2;
end;

procedure TEncaminhamentoExternoThriftImpl.SetHipoteseDiagnosticoCiap2( const Value: string);
begin
  F__isset_HipoteseDiagnosticoCiap2 := True;
  FHipoteseDiagnosticoCiap2 := Value;
end;

function TEncaminhamentoExternoThriftImpl.Get__isset_HipoteseDiagnosticoCiap2: Boolean;
begin
  Result := F__isset_HipoteseDiagnosticoCiap2;
end;

function TEncaminhamentoExternoThriftImpl.GetClassificacaoRisco: Int64;
begin
  Result := FClassificacaoRisco;
end;

procedure TEncaminhamentoExternoThriftImpl.SetClassificacaoRisco( const Value: Int64);
begin
  F__isset_ClassificacaoRisco := True;
  FClassificacaoRisco := Value;
end;

function TEncaminhamentoExternoThriftImpl.Get__isset_ClassificacaoRisco: Boolean;
begin
  Result := F__isset_ClassificacaoRisco;
end;

procedure TEncaminhamentoExternoThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I64) then
          begin
            Especialidade := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            HipoteseDiagnosticoCid10 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then
          begin
            HipoteseDiagnosticoCiap2 := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I64) then
          begin
            ClassificacaoRisco := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TEncaminhamentoExternoThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('EncaminhamentoExternoThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Especialidade) then
  begin
    field_.Name := 'especialidade';
    field_.Type_  := TType.I64;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(Especialidade);
    oprot.WriteFieldEnd();
  end;
  if (__isset_HipoteseDiagnosticoCid10) then
  begin
    field_.Name := 'hipoteseDiagnosticoCid10';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(HipoteseDiagnosticoCid10);
    oprot.WriteFieldEnd();
  end;
  if (__isset_HipoteseDiagnosticoCiap2) then
  begin
    field_.Name := 'hipoteseDiagnosticoCiap2';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(HipoteseDiagnosticoCiap2);
    oprot.WriteFieldEnd();
  end;
  if (__isset_ClassificacaoRisco) then
  begin
    field_.Name := 'classificacaoRisco';
    field_.Type_  := TType.I64;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(ClassificacaoRisco);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TEncaminhamentoExternoThriftImpl.ToString: string;
var
  _sb14 : TThriftStringBuilder;
  _first15 : Boolean;
begin
  _sb14 := TThriftStringBuilder.Create('(');
  try
    _first15 := TRUE;
    if (__isset_Especialidade) then begin
      if not _first15 then _sb14.Append(',');
      _first15 := FALSE;
      _sb14.Append('Especialidade: ');
      _sb14.Append(Especialidade);
    end;
    if (__isset_HipoteseDiagnosticoCid10) then begin
      if not _first15 then _sb14.Append(',');
      _first15 := FALSE;
      _sb14.Append('HipoteseDiagnosticoCid10: ');
      _sb14.Append(HipoteseDiagnosticoCid10);
    end;
    if (__isset_HipoteseDiagnosticoCiap2) then begin
      if not _first15 then _sb14.Append(',');
      _first15 := FALSE;
      _sb14.Append('HipoteseDiagnosticoCiap2: ');
      _sb14.Append(HipoteseDiagnosticoCiap2);
    end;
    if (__isset_ClassificacaoRisco) then begin
      if not _first15 then _sb14.Append(',');
      _first15 := FALSE;
      _sb14.Append('ClassificacaoRisco: ');
      _sb14.Append(ClassificacaoRisco);
    end;
    _sb14.Append(')');
    Result := _sb14.ToString;
    if _first15 then {prevent warning};
  finally
    _sb14.Free;
  end;
end;

constructor TResultadoExameThriftImpl.Create;
begin
  inherited;
end;

destructor TResultadoExameThriftImpl.Destroy;
begin
  inherited;
end;

function TResultadoExameThriftImpl.GetTipoResultado: Integer;
begin
  Result := FTipoResultado;
end;

procedure TResultadoExameThriftImpl.SetTipoResultado( const Value: Integer);
begin
  F__isset_TipoResultado := True;
  FTipoResultado := Value;
end;

function TResultadoExameThriftImpl.Get__isset_TipoResultado: Boolean;
begin
  Result := F__isset_TipoResultado;
end;

function TResultadoExameThriftImpl.GetValorResultado: string;
begin
  Result := FValorResultado;
end;

procedure TResultadoExameThriftImpl.SetValorResultado( const Value: string);
begin
  F__isset_ValorResultado := True;
  FValorResultado := Value;
end;

function TResultadoExameThriftImpl.Get__isset_ValorResultado: Boolean;
begin
  Result := F__isset_ValorResultado;
end;

procedure TResultadoExameThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.I32) then
          begin
            TipoResultado := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.String_) then
          begin
            ValorResultado := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TResultadoExameThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('ResultadoExameThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_TipoResultado) then
  begin
    field_.Name := 'tipoResultado';
    field_.Type_  := TType.I32;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(TipoResultado);
    oprot.WriteFieldEnd();
  end;
  if (__isset_ValorResultado) then
  begin
    field_.Name := 'valorResultado';
    field_.Type_  := TType.String_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(ValorResultado);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TResultadoExameThriftImpl.ToString: string;
var
  _sb16 : TThriftStringBuilder;
  _first17 : Boolean;
begin
  _sb16 := TThriftStringBuilder.Create('(');
  try
    _first17 := TRUE;
    if (__isset_TipoResultado) then begin
      if not _first17 then _sb16.Append(',');
      _first17 := FALSE;
      _sb16.Append('TipoResultado: ');
      _sb16.Append(TipoResultado);
    end;
    if (__isset_ValorResultado) then begin
      if not _first17 then _sb16.Append(',');
      _first17 := FALSE;
      _sb16.Append('ValorResultado: ');
      _sb16.Append(ValorResultado);
    end;
    _sb16.Append(')');
    Result := _sb16.ToString;
    if _first17 then {prevent warning};
  finally
    _sb16.Free;
  end;
end;

constructor TResultadosExameThriftImpl.Create;
begin
  inherited;
end;

destructor TResultadosExameThriftImpl.Destroy;
begin
  inherited;
end;

function TResultadosExameThriftImpl.GetExame: string;
begin
  Result := FExame;
end;

procedure TResultadosExameThriftImpl.SetExame( const Value: string);
begin
  F__isset_Exame := True;
  FExame := Value;
end;

function TResultadosExameThriftImpl.Get__isset_Exame: Boolean;
begin
  Result := F__isset_Exame;
end;

function TResultadosExameThriftImpl.GetDataSolicitacao: Int64;
begin
  Result := FDataSolicitacao;
end;

procedure TResultadosExameThriftImpl.SetDataSolicitacao( const Value: Int64);
begin
  F__isset_DataSolicitacao := True;
  FDataSolicitacao := Value;
end;

function TResultadosExameThriftImpl.Get__isset_DataSolicitacao: Boolean;
begin
  Result := F__isset_DataSolicitacao;
end;

function TResultadosExameThriftImpl.GetDataRealizacao: Int64;
begin
  Result := FDataRealizacao;
end;

procedure TResultadosExameThriftImpl.SetDataRealizacao( const Value: Int64);
begin
  F__isset_DataRealizacao := True;
  FDataRealizacao := Value;
end;

function TResultadosExameThriftImpl.Get__isset_DataRealizacao: Boolean;
begin
  Result := F__isset_DataRealizacao;
end;

function TResultadosExameThriftImpl.GetDataResultado: Int64;
begin
  Result := FDataResultado;
end;

procedure TResultadosExameThriftImpl.SetDataResultado( const Value: Int64);
begin
  F__isset_DataResultado := True;
  FDataResultado := Value;
end;

function TResultadosExameThriftImpl.Get__isset_DataResultado: Boolean;
begin
  Result := F__isset_DataResultado;
end;

function TResultadosExameThriftImpl.GetResultadoExame: IThriftList<IResultadoExameThrift>;
begin
  Result := FResultadoExame;
end;

procedure TResultadosExameThriftImpl.SetResultadoExame( const Value: IThriftList<IResultadoExameThrift>);
begin
  F__isset_ResultadoExame := True;
  FResultadoExame := Value;
end;

function TResultadosExameThriftImpl.Get__isset_ResultadoExame: Boolean;
begin
  Result := F__isset_ResultadoExame;
end;

procedure TResultadosExameThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;
  _list18: IList;
  _i19: Integer;
  _elem20: IResultadoExameThrift;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then
          begin
            Exame := iprot.ReadString();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataSolicitacao := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataRealizacao := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I64) then
          begin
            DataResultado := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.List) then
          begin
            ResultadoExame := TThriftListImpl<IResultadoExameThrift>.Create;
            _list18 := iprot.ReadListBegin();
            for _i19 := 0 to _list18.Count - 1 do
            begin
              _elem20 := TResultadoExameThriftImpl.Create;
              _elem20.Read(iprot);
              ResultadoExame.Add(_elem20);
            end;
            iprot.ReadListEnd();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TResultadosExameThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
  list_21 : IList;
  _iter22: IResultadoExameThrift;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('ResultadosExameThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_Exame) then
  begin
    field_.Name := 'exame';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Exame);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataSolicitacao) then
  begin
    field_.Name := 'dataSolicitacao';
    field_.Type_  := TType.I64;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataSolicitacao);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataRealizacao) then
  begin
    field_.Name := 'dataRealizacao';
    field_.Type_  := TType.I64;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataRealizacao);
    oprot.WriteFieldEnd();
  end;
  if (__isset_DataResultado) then
  begin
    field_.Name := 'dataResultado';
    field_.Type_  := TType.I64;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(DataResultado);
    oprot.WriteFieldEnd();
  end;
  if (ResultadoExame <> nil) and __isset_ResultadoExame then
  begin
    field_.Name := 'resultadoExame';
    field_.Type_  := TType.List;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    list_21 := TListImpl.Create(TType.Struct, ResultadoExame.Count);
    oprot.WriteListBegin( list_21);
    for _iter22 in ResultadoExame do
    begin
      _iter22.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TResultadosExameThriftImpl.ToString: string;
var
  _sb23 : TThriftStringBuilder;
  _first24 : Boolean;
begin
  _sb23 := TThriftStringBuilder.Create('(');
  try
    _first24 := TRUE;
    if (__isset_Exame) then begin
      if not _first24 then _sb23.Append(',');
      _first24 := FALSE;
      _sb23.Append('Exame: ');
      _sb23.Append(Exame);
    end;
    if (__isset_DataSolicitacao) then begin
      if not _first24 then _sb23.Append(',');
      _first24 := FALSE;
      _sb23.Append('DataSolicitacao: ');
      _sb23.Append(DataSolicitacao);
    end;
    if (__isset_DataRealizacao) then begin
      if not _first24 then _sb23.Append(',');
      _first24 := FALSE;
      _sb23.Append('DataRealizacao: ');
      _sb23.Append(DataRealizacao);
    end;
    if (__isset_DataResultado) then begin
      if not _first24 then _sb23.Append(',');
      _first24 := FALSE;
      _sb23.Append('DataResultado: ');
      _sb23.Append(DataResultado);
    end;
    if (ResultadoExame <> nil) and __isset_ResultadoExame then begin
      if not _first24 then _sb23.Append(',');
      _first24 := FALSE;
      _sb23.Append('ResultadoExame: ');
      _sb23.Append(ResultadoExame);
    end;
    _sb23.Append(')');
    Result := _sb23.ToString;
    if _first24 then {prevent warning};
  finally
    _sb23.Free;
  end;
end;

constructor TMedicoesThriftImpl.Create;
begin
  inherited;
end;

destructor TMedicoesThriftImpl.Destroy;
begin
  inherited;
end;

function TMedicoesThriftImpl.GetCircuferenciaAbdominal: Double;
begin
  Result := FCircuferenciaAbdominal;
end;

procedure TMedicoesThriftImpl.SetCircuferenciaAbdominal( const Value: Double);
begin
  F__isset_CircuferenciaAbdominal := True;
  FCircuferenciaAbdominal := Value;
end;

function TMedicoesThriftImpl.Get__isset_CircuferenciaAbdominal: Boolean;
begin
  Result := F__isset_CircuferenciaAbdominal;
end;

function TMedicoesThriftImpl.GetPerimetroPanturrilha: Double;
begin
  Result := FPerimetroPanturrilha;
end;

procedure TMedicoesThriftImpl.SetPerimetroPanturrilha( const Value: Double);
begin
  F__isset_PerimetroPanturrilha := True;
  FPerimetroPanturrilha := Value;
end;

function TMedicoesThriftImpl.Get__isset_PerimetroPanturrilha: Boolean;
begin
  Result := F__isset_PerimetroPanturrilha;
end;

function TMedicoesThriftImpl.GetPressaoArterialSistolica: Integer;
begin
  Result := FPressaoArterialSistolica;
end;

procedure TMedicoesThriftImpl.SetPressaoArterialSistolica( const Value: Integer);
begin
  F__isset_PressaoArterialSistolica := True;
  FPressaoArterialSistolica := Value;
end;

function TMedicoesThriftImpl.Get__isset_PressaoArterialSistolica: Boolean;
begin
  Result := F__isset_PressaoArterialSistolica;
end;

function TMedicoesThriftImpl.GetPressaoArterialDiastolica: Integer;
begin
  Result := FPressaoArterialDiastolica;
end;

procedure TMedicoesThriftImpl.SetPressaoArterialDiastolica( const Value: Integer);
begin
  F__isset_PressaoArterialDiastolica := True;
  FPressaoArterialDiastolica := Value;
end;

function TMedicoesThriftImpl.Get__isset_PressaoArterialDiastolica: Boolean;
begin
  Result := F__isset_PressaoArterialDiastolica;
end;

function TMedicoesThriftImpl.GetFrequenciaRespiratoria: Integer;
begin
  Result := FFrequenciaRespiratoria;
end;

procedure TMedicoesThriftImpl.SetFrequenciaRespiratoria( const Value: Integer);
begin
  F__isset_FrequenciaRespiratoria := True;
  FFrequenciaRespiratoria := Value;
end;

function TMedicoesThriftImpl.Get__isset_FrequenciaRespiratoria: Boolean;
begin
  Result := F__isset_FrequenciaRespiratoria;
end;

function TMedicoesThriftImpl.GetFrequenciaCardiaca: Integer;
begin
  Result := FFrequenciaCardiaca;
end;

procedure TMedicoesThriftImpl.SetFrequenciaCardiaca( const Value: Integer);
begin
  F__isset_FrequenciaCardiaca := True;
  FFrequenciaCardiaca := Value;
end;

function TMedicoesThriftImpl.Get__isset_FrequenciaCardiaca: Boolean;
begin
  Result := F__isset_FrequenciaCardiaca;
end;

function TMedicoesThriftImpl.GetTemperatura: Double;
begin
  Result := FTemperatura;
end;

procedure TMedicoesThriftImpl.SetTemperatura( const Value: Double);
begin
  F__isset_Temperatura := True;
  FTemperatura := Value;
end;

function TMedicoesThriftImpl.Get__isset_Temperatura: Boolean;
begin
  Result := F__isset_Temperatura;
end;

function TMedicoesThriftImpl.GetSaturacaoO2: Integer;
begin
  Result := FSaturacaoO2;
end;

procedure TMedicoesThriftImpl.SetSaturacaoO2( const Value: Integer);
begin
  F__isset_SaturacaoO2 := True;
  FSaturacaoO2 := Value;
end;

function TMedicoesThriftImpl.Get__isset_SaturacaoO2: Boolean;
begin
  Result := F__isset_SaturacaoO2;
end;

function TMedicoesThriftImpl.GetGlicemiaCapilar: Integer;
begin
  Result := FGlicemiaCapilar;
end;

procedure TMedicoesThriftImpl.SetGlicemiaCapilar( const Value: Integer);
begin
  F__isset_GlicemiaCapilar := True;
  FGlicemiaCapilar := Value;
end;

function TMedicoesThriftImpl.Get__isset_GlicemiaCapilar: Boolean;
begin
  Result := F__isset_GlicemiaCapilar;
end;

function TMedicoesThriftImpl.GetTipoGlicemiaCapilar: Int64;
begin
  Result := FTipoGlicemiaCapilar;
end;

procedure TMedicoesThriftImpl.SetTipoGlicemiaCapilar( const Value: Int64);
begin
  F__isset_TipoGlicemiaCapilar := True;
  FTipoGlicemiaCapilar := Value;
end;

function TMedicoesThriftImpl.Get__isset_TipoGlicemiaCapilar: Boolean;
begin
  Result := F__isset_TipoGlicemiaCapilar;
end;

function TMedicoesThriftImpl.GetPeso: Double;
begin
  Result := FPeso;
end;

procedure TMedicoesThriftImpl.SetPeso( const Value: Double);
begin
  F__isset_Peso := True;
  FPeso := Value;
end;

function TMedicoesThriftImpl.Get__isset_Peso: Boolean;
begin
  Result := F__isset_Peso;
end;

function TMedicoesThriftImpl.GetAltura: Double;
begin
  Result := FAltura;
end;

procedure TMedicoesThriftImpl.SetAltura( const Value: Double);
begin
  F__isset_Altura := True;
  FAltura := Value;
end;

function TMedicoesThriftImpl.Get__isset_Altura: Boolean;
begin
  Result := F__isset_Altura;
end;

function TMedicoesThriftImpl.GetPerimetroCefalico: Double;
begin
  Result := FPerimetroCefalico;
end;

procedure TMedicoesThriftImpl.SetPerimetroCefalico( const Value: Double);
begin
  F__isset_PerimetroCefalico := True;
  FPerimetroCefalico := Value;
end;

function TMedicoesThriftImpl.Get__isset_PerimetroCefalico: Boolean;
begin
  Result := F__isset_PerimetroCefalico;
end;

procedure TMedicoesThriftImpl.Read( const iprot: IProtocol);
var
  field_ : IField;
  struc : IStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.Double_) then
          begin
            CircuferenciaAbdominal := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.Double_) then
          begin
            PerimetroPanturrilha := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.I32) then
          begin
            PressaoArterialSistolica := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        4: begin
          if (field_.Type_ = TType.I32) then
          begin
            PressaoArterialDiastolica := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        5: begin
          if (field_.Type_ = TType.I32) then
          begin
            FrequenciaRespiratoria := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        6: begin
          if (field_.Type_ = TType.I32) then
          begin
            FrequenciaCardiaca := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        7: begin
          if (field_.Type_ = TType.Double_) then
          begin
            Temperatura := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        8: begin
          if (field_.Type_ = TType.I32) then
          begin
            SaturacaoO2 := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        9: begin
          if (field_.Type_ = TType.I32) then
          begin
            GlicemiaCapilar := iprot.ReadI32();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        10: begin
          if (field_.Type_ = TType.I64) then
          begin
            TipoGlicemiaCapilar := iprot.ReadI64();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        11: begin
          if (field_.Type_ = TType.Double_) then
          begin
            Peso := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        12: begin
          if (field_.Type_ = TType.Double_) then
          begin
            Altura := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        13: begin
          if (field_.Type_ = TType.Double_) then
          begin
            PerimetroCefalico := iprot.ReadDouble();
          end else
          begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TMedicoesThriftImpl.Write( const oprot: IProtocol);
var
  struc : IStruct;
  field_ : IField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  struc := TStructImpl.Create('MedicoesThrift');
  oprot.WriteStructBegin(struc);
  field_ := TFieldImpl.Create;
  if (__isset_CircuferenciaAbdominal) then
  begin
    field_.Name := 'circuferenciaAbdominal';
    field_.Type_  := TType.Double_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(CircuferenciaAbdominal);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PerimetroPanturrilha) then
  begin
    field_.Name := 'perimetroPanturrilha';
    field_.Type_  := TType.Double_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(PerimetroPanturrilha);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PressaoArterialSistolica) then
  begin
    field_.Name := 'pressaoArterialSistolica';
    field_.Type_  := TType.I32;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(PressaoArterialSistolica);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PressaoArterialDiastolica) then
  begin
    field_.Name := 'pressaoArterialDiastolica';
    field_.Type_  := TType.I32;
    field_.ID := 4;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(PressaoArterialDiastolica);
    oprot.WriteFieldEnd();
  end;
  if (__isset_FrequenciaRespiratoria) then
  begin
    field_.Name := 'frequenciaRespiratoria';
    field_.Type_  := TType.I32;
    field_.ID := 5;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(FrequenciaRespiratoria);
    oprot.WriteFieldEnd();
  end;
  if (__isset_FrequenciaCardiaca) then
  begin
    field_.Name := 'frequenciaCardiaca';
    field_.Type_  := TType.I32;
    field_.ID := 6;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(FrequenciaCardiaca);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Temperatura) then
  begin
    field_.Name := 'temperatura';
    field_.Type_  := TType.Double_;
    field_.ID := 7;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(Temperatura);
    oprot.WriteFieldEnd();
  end;
  if (__isset_SaturacaoO2) then
  begin
    field_.Name := 'saturacaoO2';
    field_.Type_  := TType.I32;
    field_.ID := 8;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(SaturacaoO2);
    oprot.WriteFieldEnd();
  end;
  if (__isset_GlicemiaCapilar) then
  begin
    field_.Name := 'glicemiaCapilar';
    field_.Type_  := TType.I32;
    field_.ID := 9;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI32(GlicemiaCapilar);
    oprot.WriteFieldEnd();
  end;
  if (__isset_TipoGlicemiaCapilar) then
  begin
    field_.Name := 'tipoGlicemiaCapilar';
    field_.Type_  := TType.I64;
    field_.ID := 10;
    oprot.WriteFieldBegin(field_);
    oprot.WriteI64(TipoGlicemiaCapilar);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Peso) then
  begin
    field_.Name := 'peso';
    field_.Type_  := TType.Double_;
    field_.ID := 11;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(Peso);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Altura) then
  begin
    field_.Name := 'altura';
    field_.Type_  := TType.Double_;
    field_.ID := 12;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(Altura);
    oprot.WriteFieldEnd();
  end;
  if (__isset_PerimetroCefalico) then
  begin
    field_.Name := 'perimetroCefalico';
    field_.Type_  := TType.Double_;
    field_.ID := 13;
    oprot.WriteFieldBegin(field_);
    oprot.WriteDouble(PerimetroCefalico);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TMedicoesThriftImpl.ToString: string;
var
  _sb25 : TThriftStringBuilder;
  _first26 : Boolean;
begin
  _sb25 := TThriftStringBuilder.Create('(');
  try
    _first26 := TRUE;
    if (__isset_CircuferenciaAbdominal) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('CircuferenciaAbdominal: ');
      _sb25.Append(CircuferenciaAbdominal);
    end;
    if (__isset_PerimetroPanturrilha) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('PerimetroPanturrilha: ');
      _sb25.Append(PerimetroPanturrilha);
    end;
    if (__isset_PressaoArterialSistolica) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('PressaoArterialSistolica: ');
      _sb25.Append(PressaoArterialSistolica);
    end;
    if (__isset_PressaoArterialDiastolica) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('PressaoArterialDiastolica: ');
      _sb25.Append(PressaoArterialDiastolica);
    end;
    if (__isset_FrequenciaRespiratoria) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('FrequenciaRespiratoria: ');
      _sb25.Append(FrequenciaRespiratoria);
    end;
    if (__isset_FrequenciaCardiaca) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('FrequenciaCardiaca: ');
      _sb25.Append(FrequenciaCardiaca);
    end;
    if (__isset_Temperatura) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('Temperatura: ');
      _sb25.Append(Temperatura);
    end;
    if (__isset_SaturacaoO2) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('SaturacaoO2: ');
      _sb25.Append(SaturacaoO2);
    end;
    if (__isset_GlicemiaCapilar) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('GlicemiaCapilar: ');
      _sb25.Append(GlicemiaCapilar);
    end;
    if (__isset_TipoGlicemiaCapilar) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('TipoGlicemiaCapilar: ');
      _sb25.Append(TipoGlicemiaCapilar);
    end;
    if (__isset_Peso) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('Peso: ');
      _sb25.Append(Peso);
    end;
    if (__isset_Altura) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('Altura: ');
      _sb25.Append(Altura);
    end;
    if (__isset_PerimetroCefalico) then begin
      if not _first26 then _sb25.Append(',');
      _first26 := FALSE;
      _sb25.Append('PerimetroCefalico: ');
      _sb25.Append(PerimetroCefalico);
    end;
    _sb25.Append(')');
    Result := _sb25.ToString;
    if _first26 then {prevent warning};
  finally
    _sb25.Free;
  end;
end;


initialization

finalization


end.
