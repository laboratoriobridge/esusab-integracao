/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.gov.saude.esusab.ras.complementarzika;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2025-08-11")
public class FichaComplementarZikaMicrocefaliaThrift implements org.apache.thrift.TBase<FichaComplementarZikaMicrocefaliaThrift, FichaComplementarZikaMicrocefaliaThrift._Fields>, java.io.Serializable, Cloneable, Comparable<FichaComplementarZikaMicrocefaliaThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FichaComplementarZikaMicrocefaliaThrift");

  private static final org.apache.thrift.protocol.TField HEADER_TRANSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("headerTransport", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField UUID_FICHA_FIELD_DESC = new org.apache.thrift.protocol.TField("uuidFicha", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TP_CDS_ORIGEM_FIELD_DESC = new org.apache.thrift.protocol.TField("tpCdsOrigem", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TURNO_FIELD_DESC = new org.apache.thrift.protocol.TField("turno", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CNS_CIDADAO_FIELD_DESC = new org.apache.thrift.protocol.TField("cnsCidadao", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CNS_RESPONSAVEL_FAMILIAR_FIELD_DESC = new org.apache.thrift.protocol.TField("cnsResponsavelFamiliar", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_TESTE_OLHINHO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoTesteOlhinho", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_TESTE_OLHINHO_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoTesteOlhinho", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_EXAME_FUNDO_OLHO_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoExameFundoOlho", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_EXAME_FUNDO_OLHO_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoExameFundoOlho", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_TESTE_ORELHINHA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoTesteOrelhinha", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_TESTE_ORELHINHA_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoTesteOrelhinha", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_USTRANSFONTANELA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoUSTransfontanela", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_US_TRANSFONTANELA_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoUsTransfontanela", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoTomografiaComputadorizada", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoTomografiaComputadorizada", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField DATA_REALIZACAO_RESSONANCIA_MAGNETICA_FIELD_DESC = new org.apache.thrift.protocol.TField("dataRealizacaoRessonanciaMagnetica", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField CO_RESULTADO_RESSONANCIA_MAGNETICA_FIELD_DESC = new org.apache.thrift.protocol.TField("coResultadoRessonanciaMagnetica", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CPF_CIDADAO_FIELD_DESC = new org.apache.thrift.protocol.TField("cpfCidadao", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CPF_RESPONSAVEL_FAMILIAR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpfResponsavelFamiliar", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FichaComplementarZikaMicrocefaliaThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FichaComplementarZikaMicrocefaliaThriftTupleSchemeFactory());
  }

  private br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift headerTransport; // optional
  private String uuidFicha; // required
  private int tpCdsOrigem; // optional
  private long turno; // optional
  private String cnsCidadao; // optional
  private String cnsResponsavelFamiliar; // optional
  private long dataRealizacaoTesteOlhinho; // optional
  private long coResultadoTesteOlhinho; // optional
  private long dataRealizacaoExameFundoOlho; // optional
  private long coResultadoExameFundoOlho; // optional
  private long dataRealizacaoTesteOrelhinha; // optional
  private long coResultadoTesteOrelhinha; // optional
  private long dataRealizacaoUSTransfontanela; // optional
  private long coResultadoUsTransfontanela; // optional
  private long dataRealizacaoTomografiaComputadorizada; // optional
  private long coResultadoTomografiaComputadorizada; // optional
  private long dataRealizacaoRessonanciaMagnetica; // optional
  private long coResultadoRessonanciaMagnetica; // optional
  private String cpfCidadao; // optional
  private String cpfResponsavelFamiliar; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER_TRANSPORT((short)1, "headerTransport"),
    UUID_FICHA((short)2, "uuidFicha"),
    TP_CDS_ORIGEM((short)3, "tpCdsOrigem"),
    TURNO((short)4, "turno"),
    CNS_CIDADAO((short)5, "cnsCidadao"),
    CNS_RESPONSAVEL_FAMILIAR((short)6, "cnsResponsavelFamiliar"),
    DATA_REALIZACAO_TESTE_OLHINHO((short)7, "dataRealizacaoTesteOlhinho"),
    CO_RESULTADO_TESTE_OLHINHO((short)8, "coResultadoTesteOlhinho"),
    DATA_REALIZACAO_EXAME_FUNDO_OLHO((short)9, "dataRealizacaoExameFundoOlho"),
    CO_RESULTADO_EXAME_FUNDO_OLHO((short)10, "coResultadoExameFundoOlho"),
    DATA_REALIZACAO_TESTE_ORELHINHA((short)11, "dataRealizacaoTesteOrelhinha"),
    CO_RESULTADO_TESTE_ORELHINHA((short)12, "coResultadoTesteOrelhinha"),
    DATA_REALIZACAO_USTRANSFONTANELA((short)13, "dataRealizacaoUSTransfontanela"),
    CO_RESULTADO_US_TRANSFONTANELA((short)14, "coResultadoUsTransfontanela"),
    DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA((short)15, "dataRealizacaoTomografiaComputadorizada"),
    CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA((short)16, "coResultadoTomografiaComputadorizada"),
    DATA_REALIZACAO_RESSONANCIA_MAGNETICA((short)17, "dataRealizacaoRessonanciaMagnetica"),
    CO_RESULTADO_RESSONANCIA_MAGNETICA((short)18, "coResultadoRessonanciaMagnetica"),
    CPF_CIDADAO((short)19, "cpfCidadao"),
    CPF_RESPONSAVEL_FAMILIAR((short)20, "cpfResponsavelFamiliar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER_TRANSPORT
          return HEADER_TRANSPORT;
        case 2: // UUID_FICHA
          return UUID_FICHA;
        case 3: // TP_CDS_ORIGEM
          return TP_CDS_ORIGEM;
        case 4: // TURNO
          return TURNO;
        case 5: // CNS_CIDADAO
          return CNS_CIDADAO;
        case 6: // CNS_RESPONSAVEL_FAMILIAR
          return CNS_RESPONSAVEL_FAMILIAR;
        case 7: // DATA_REALIZACAO_TESTE_OLHINHO
          return DATA_REALIZACAO_TESTE_OLHINHO;
        case 8: // CO_RESULTADO_TESTE_OLHINHO
          return CO_RESULTADO_TESTE_OLHINHO;
        case 9: // DATA_REALIZACAO_EXAME_FUNDO_OLHO
          return DATA_REALIZACAO_EXAME_FUNDO_OLHO;
        case 10: // CO_RESULTADO_EXAME_FUNDO_OLHO
          return CO_RESULTADO_EXAME_FUNDO_OLHO;
        case 11: // DATA_REALIZACAO_TESTE_ORELHINHA
          return DATA_REALIZACAO_TESTE_ORELHINHA;
        case 12: // CO_RESULTADO_TESTE_ORELHINHA
          return CO_RESULTADO_TESTE_ORELHINHA;
        case 13: // DATA_REALIZACAO_USTRANSFONTANELA
          return DATA_REALIZACAO_USTRANSFONTANELA;
        case 14: // CO_RESULTADO_US_TRANSFONTANELA
          return CO_RESULTADO_US_TRANSFONTANELA;
        case 15: // DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA
          return DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA;
        case 16: // CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA
          return CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA;
        case 17: // DATA_REALIZACAO_RESSONANCIA_MAGNETICA
          return DATA_REALIZACAO_RESSONANCIA_MAGNETICA;
        case 18: // CO_RESULTADO_RESSONANCIA_MAGNETICA
          return CO_RESULTADO_RESSONANCIA_MAGNETICA;
        case 19: // CPF_CIDADAO
          return CPF_CIDADAO;
        case 20: // CPF_RESPONSAVEL_FAMILIAR
          return CPF_RESPONSAVEL_FAMILIAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TPCDSORIGEM_ISSET_ID = 0;
  private static final int __TURNO_ISSET_ID = 1;
  private static final int __DATAREALIZACAOTESTEOLHINHO_ISSET_ID = 2;
  private static final int __CORESULTADOTESTEOLHINHO_ISSET_ID = 3;
  private static final int __DATAREALIZACAOEXAMEFUNDOOLHO_ISSET_ID = 4;
  private static final int __CORESULTADOEXAMEFUNDOOLHO_ISSET_ID = 5;
  private static final int __DATAREALIZACAOTESTEORELHINHA_ISSET_ID = 6;
  private static final int __CORESULTADOTESTEORELHINHA_ISSET_ID = 7;
  private static final int __DATAREALIZACAOUSTRANSFONTANELA_ISSET_ID = 8;
  private static final int __CORESULTADOUSTRANSFONTANELA_ISSET_ID = 9;
  private static final int __DATAREALIZACAOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID = 10;
  private static final int __CORESULTADOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID = 11;
  private static final int __DATAREALIZACAORESSONANCIAMAGNETICA_ISSET_ID = 12;
  private static final int __CORESULTADORESSONANCIAMAGNETICA_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HEADER_TRANSPORT,_Fields.TP_CDS_ORIGEM,_Fields.TURNO,_Fields.CNS_CIDADAO,_Fields.CNS_RESPONSAVEL_FAMILIAR,_Fields.DATA_REALIZACAO_TESTE_OLHINHO,_Fields.CO_RESULTADO_TESTE_OLHINHO,_Fields.DATA_REALIZACAO_EXAME_FUNDO_OLHO,_Fields.CO_RESULTADO_EXAME_FUNDO_OLHO,_Fields.DATA_REALIZACAO_TESTE_ORELHINHA,_Fields.CO_RESULTADO_TESTE_ORELHINHA,_Fields.DATA_REALIZACAO_USTRANSFONTANELA,_Fields.CO_RESULTADO_US_TRANSFONTANELA,_Fields.DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA,_Fields.CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA,_Fields.DATA_REALIZACAO_RESSONANCIA_MAGNETICA,_Fields.CO_RESULTADO_RESSONANCIA_MAGNETICA,_Fields.CPF_CIDADAO,_Fields.CPF_RESPONSAVEL_FAMILIAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER_TRANSPORT, new org.apache.thrift.meta_data.FieldMetaData("headerTransport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift.class)));
    tmpMap.put(_Fields.UUID_FICHA, new org.apache.thrift.meta_data.FieldMetaData("uuidFicha", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TP_CDS_ORIGEM, new org.apache.thrift.meta_data.FieldMetaData("tpCdsOrigem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURNO, new org.apache.thrift.meta_data.FieldMetaData("turno", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CNS_CIDADAO, new org.apache.thrift.meta_data.FieldMetaData("cnsCidadao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CNS_RESPONSAVEL_FAMILIAR, new org.apache.thrift.meta_data.FieldMetaData("cnsResponsavelFamiliar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_REALIZACAO_TESTE_OLHINHO, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoTesteOlhinho", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_TESTE_OLHINHO, new org.apache.thrift.meta_data.FieldMetaData("coResultadoTesteOlhinho", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_REALIZACAO_EXAME_FUNDO_OLHO, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoExameFundoOlho", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_EXAME_FUNDO_OLHO, new org.apache.thrift.meta_data.FieldMetaData("coResultadoExameFundoOlho", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_REALIZACAO_TESTE_ORELHINHA, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoTesteOrelhinha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_TESTE_ORELHINHA, new org.apache.thrift.meta_data.FieldMetaData("coResultadoTesteOrelhinha", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_REALIZACAO_USTRANSFONTANELA, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoUSTransfontanela", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_US_TRANSFONTANELA, new org.apache.thrift.meta_data.FieldMetaData("coResultadoUsTransfontanela", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoTomografiaComputadorizada", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA, new org.apache.thrift.meta_data.FieldMetaData("coResultadoTomografiaComputadorizada", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_REALIZACAO_RESSONANCIA_MAGNETICA, new org.apache.thrift.meta_data.FieldMetaData("dataRealizacaoRessonanciaMagnetica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CO_RESULTADO_RESSONANCIA_MAGNETICA, new org.apache.thrift.meta_data.FieldMetaData("coResultadoRessonanciaMagnetica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPF_CIDADAO, new org.apache.thrift.meta_data.FieldMetaData("cpfCidadao", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPF_RESPONSAVEL_FAMILIAR, new org.apache.thrift.meta_data.FieldMetaData("cpfResponsavelFamiliar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FichaComplementarZikaMicrocefaliaThrift.class, metaDataMap);
  }

  public FichaComplementarZikaMicrocefaliaThrift() {
  }

  public FichaComplementarZikaMicrocefaliaThrift(
    String uuidFicha)
  {
    this();
    this.uuidFicha = uuidFicha;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FichaComplementarZikaMicrocefaliaThrift(FichaComplementarZikaMicrocefaliaThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHeaderTransport()) {
      this.headerTransport = new br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift(other.headerTransport);
    }
    if (other.isSetUuidFicha()) {
      this.uuidFicha = other.uuidFicha;
    }
    this.tpCdsOrigem = other.tpCdsOrigem;
    this.turno = other.turno;
    if (other.isSetCnsCidadao()) {
      this.cnsCidadao = other.cnsCidadao;
    }
    if (other.isSetCnsResponsavelFamiliar()) {
      this.cnsResponsavelFamiliar = other.cnsResponsavelFamiliar;
    }
    this.dataRealizacaoTesteOlhinho = other.dataRealizacaoTesteOlhinho;
    this.coResultadoTesteOlhinho = other.coResultadoTesteOlhinho;
    this.dataRealizacaoExameFundoOlho = other.dataRealizacaoExameFundoOlho;
    this.coResultadoExameFundoOlho = other.coResultadoExameFundoOlho;
    this.dataRealizacaoTesteOrelhinha = other.dataRealizacaoTesteOrelhinha;
    this.coResultadoTesteOrelhinha = other.coResultadoTesteOrelhinha;
    this.dataRealizacaoUSTransfontanela = other.dataRealizacaoUSTransfontanela;
    this.coResultadoUsTransfontanela = other.coResultadoUsTransfontanela;
    this.dataRealizacaoTomografiaComputadorizada = other.dataRealizacaoTomografiaComputadorizada;
    this.coResultadoTomografiaComputadorizada = other.coResultadoTomografiaComputadorizada;
    this.dataRealizacaoRessonanciaMagnetica = other.dataRealizacaoRessonanciaMagnetica;
    this.coResultadoRessonanciaMagnetica = other.coResultadoRessonanciaMagnetica;
    if (other.isSetCpfCidadao()) {
      this.cpfCidadao = other.cpfCidadao;
    }
    if (other.isSetCpfResponsavelFamiliar()) {
      this.cpfResponsavelFamiliar = other.cpfResponsavelFamiliar;
    }
  }

  public FichaComplementarZikaMicrocefaliaThrift deepCopy() {
    return new FichaComplementarZikaMicrocefaliaThrift(this);
  }

  @Override
  public void clear() {
    this.headerTransport = null;
    this.uuidFicha = null;
    setTpCdsOrigemIsSet(false);
    this.tpCdsOrigem = 0;
    setTurnoIsSet(false);
    this.turno = 0;
    this.cnsCidadao = null;
    this.cnsResponsavelFamiliar = null;
    setDataRealizacaoTesteOlhinhoIsSet(false);
    this.dataRealizacaoTesteOlhinho = 0;
    setCoResultadoTesteOlhinhoIsSet(false);
    this.coResultadoTesteOlhinho = 0;
    setDataRealizacaoExameFundoOlhoIsSet(false);
    this.dataRealizacaoExameFundoOlho = 0;
    setCoResultadoExameFundoOlhoIsSet(false);
    this.coResultadoExameFundoOlho = 0;
    setDataRealizacaoTesteOrelhinhaIsSet(false);
    this.dataRealizacaoTesteOrelhinha = 0;
    setCoResultadoTesteOrelhinhaIsSet(false);
    this.coResultadoTesteOrelhinha = 0;
    setDataRealizacaoUSTransfontanelaIsSet(false);
    this.dataRealizacaoUSTransfontanela = 0;
    setCoResultadoUsTransfontanelaIsSet(false);
    this.coResultadoUsTransfontanela = 0;
    setDataRealizacaoTomografiaComputadorizadaIsSet(false);
    this.dataRealizacaoTomografiaComputadorizada = 0;
    setCoResultadoTomografiaComputadorizadaIsSet(false);
    this.coResultadoTomografiaComputadorizada = 0;
    setDataRealizacaoRessonanciaMagneticaIsSet(false);
    this.dataRealizacaoRessonanciaMagnetica = 0;
    setCoResultadoRessonanciaMagneticaIsSet(false);
    this.coResultadoRessonanciaMagnetica = 0;
    this.cpfCidadao = null;
    this.cpfResponsavelFamiliar = null;
  }

  public br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift getHeaderTransport() {
    return this.headerTransport;
  }

  public void setHeaderTransport(br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift headerTransport) {
    this.headerTransport = headerTransport;
  }

  public void unsetHeaderTransport() {
    this.headerTransport = null;
  }

  /** Returns true if field headerTransport is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderTransport() {
    return this.headerTransport != null;
  }

  public void setHeaderTransportIsSet(boolean value) {
    if (!value) {
      this.headerTransport = null;
    }
  }

  public String getUuidFicha() {
    return this.uuidFicha;
  }

  public void setUuidFicha(String uuidFicha) {
    this.uuidFicha = uuidFicha;
  }

  public void unsetUuidFicha() {
    this.uuidFicha = null;
  }

  /** Returns true if field uuidFicha is set (has been assigned a value) and false otherwise */
  public boolean isSetUuidFicha() {
    return this.uuidFicha != null;
  }

  public void setUuidFichaIsSet(boolean value) {
    if (!value) {
      this.uuidFicha = null;
    }
  }

  public int getTpCdsOrigem() {
    return this.tpCdsOrigem;
  }

  public void setTpCdsOrigem(int tpCdsOrigem) {
    this.tpCdsOrigem = tpCdsOrigem;
    setTpCdsOrigemIsSet(true);
  }

  public void unsetTpCdsOrigem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TPCDSORIGEM_ISSET_ID);
  }

  /** Returns true if field tpCdsOrigem is set (has been assigned a value) and false otherwise */
  public boolean isSetTpCdsOrigem() {
    return EncodingUtils.testBit(__isset_bitfield, __TPCDSORIGEM_ISSET_ID);
  }

  public void setTpCdsOrigemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TPCDSORIGEM_ISSET_ID, value);
  }

  public long getTurno() {
    return this.turno;
  }

  public void setTurno(long turno) {
    this.turno = turno;
    setTurnoIsSet(true);
  }

  public void unsetTurno() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  /** Returns true if field turno is set (has been assigned a value) and false otherwise */
  public boolean isSetTurno() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNO_ISSET_ID);
  }

  public void setTurnoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNO_ISSET_ID, value);
  }

  public String getCnsCidadao() {
    return this.cnsCidadao;
  }

  public void setCnsCidadao(String cnsCidadao) {
    this.cnsCidadao = cnsCidadao;
  }

  public void unsetCnsCidadao() {
    this.cnsCidadao = null;
  }

  /** Returns true if field cnsCidadao is set (has been assigned a value) and false otherwise */
  public boolean isSetCnsCidadao() {
    return this.cnsCidadao != null;
  }

  public void setCnsCidadaoIsSet(boolean value) {
    if (!value) {
      this.cnsCidadao = null;
    }
  }

  public String getCnsResponsavelFamiliar() {
    return this.cnsResponsavelFamiliar;
  }

  public void setCnsResponsavelFamiliar(String cnsResponsavelFamiliar) {
    this.cnsResponsavelFamiliar = cnsResponsavelFamiliar;
  }

  public void unsetCnsResponsavelFamiliar() {
    this.cnsResponsavelFamiliar = null;
  }

  /** Returns true if field cnsResponsavelFamiliar is set (has been assigned a value) and false otherwise */
  public boolean isSetCnsResponsavelFamiliar() {
    return this.cnsResponsavelFamiliar != null;
  }

  public void setCnsResponsavelFamiliarIsSet(boolean value) {
    if (!value) {
      this.cnsResponsavelFamiliar = null;
    }
  }

  public long getDataRealizacaoTesteOlhinho() {
    return this.dataRealizacaoTesteOlhinho;
  }

  public void setDataRealizacaoTesteOlhinho(long dataRealizacaoTesteOlhinho) {
    this.dataRealizacaoTesteOlhinho = dataRealizacaoTesteOlhinho;
    setDataRealizacaoTesteOlhinhoIsSet(true);
  }

  public void unsetDataRealizacaoTesteOlhinho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAOTESTEOLHINHO_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoTesteOlhinho is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoTesteOlhinho() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAOTESTEOLHINHO_ISSET_ID);
  }

  public void setDataRealizacaoTesteOlhinhoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAOTESTEOLHINHO_ISSET_ID, value);
  }

  public long getCoResultadoTesteOlhinho() {
    return this.coResultadoTesteOlhinho;
  }

  public void setCoResultadoTesteOlhinho(long coResultadoTesteOlhinho) {
    this.coResultadoTesteOlhinho = coResultadoTesteOlhinho;
    setCoResultadoTesteOlhinhoIsSet(true);
  }

  public void unsetCoResultadoTesteOlhinho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADOTESTEOLHINHO_ISSET_ID);
  }

  /** Returns true if field coResultadoTesteOlhinho is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoTesteOlhinho() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADOTESTEOLHINHO_ISSET_ID);
  }

  public void setCoResultadoTesteOlhinhoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADOTESTEOLHINHO_ISSET_ID, value);
  }

  public long getDataRealizacaoExameFundoOlho() {
    return this.dataRealizacaoExameFundoOlho;
  }

  public void setDataRealizacaoExameFundoOlho(long dataRealizacaoExameFundoOlho) {
    this.dataRealizacaoExameFundoOlho = dataRealizacaoExameFundoOlho;
    setDataRealizacaoExameFundoOlhoIsSet(true);
  }

  public void unsetDataRealizacaoExameFundoOlho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAOEXAMEFUNDOOLHO_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoExameFundoOlho is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoExameFundoOlho() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAOEXAMEFUNDOOLHO_ISSET_ID);
  }

  public void setDataRealizacaoExameFundoOlhoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAOEXAMEFUNDOOLHO_ISSET_ID, value);
  }

  public long getCoResultadoExameFundoOlho() {
    return this.coResultadoExameFundoOlho;
  }

  public void setCoResultadoExameFundoOlho(long coResultadoExameFundoOlho) {
    this.coResultadoExameFundoOlho = coResultadoExameFundoOlho;
    setCoResultadoExameFundoOlhoIsSet(true);
  }

  public void unsetCoResultadoExameFundoOlho() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADOEXAMEFUNDOOLHO_ISSET_ID);
  }

  /** Returns true if field coResultadoExameFundoOlho is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoExameFundoOlho() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADOEXAMEFUNDOOLHO_ISSET_ID);
  }

  public void setCoResultadoExameFundoOlhoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADOEXAMEFUNDOOLHO_ISSET_ID, value);
  }

  public long getDataRealizacaoTesteOrelhinha() {
    return this.dataRealizacaoTesteOrelhinha;
  }

  public void setDataRealizacaoTesteOrelhinha(long dataRealizacaoTesteOrelhinha) {
    this.dataRealizacaoTesteOrelhinha = dataRealizacaoTesteOrelhinha;
    setDataRealizacaoTesteOrelhinhaIsSet(true);
  }

  public void unsetDataRealizacaoTesteOrelhinha() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAOTESTEORELHINHA_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoTesteOrelhinha is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoTesteOrelhinha() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAOTESTEORELHINHA_ISSET_ID);
  }

  public void setDataRealizacaoTesteOrelhinhaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAOTESTEORELHINHA_ISSET_ID, value);
  }

  public long getCoResultadoTesteOrelhinha() {
    return this.coResultadoTesteOrelhinha;
  }

  public void setCoResultadoTesteOrelhinha(long coResultadoTesteOrelhinha) {
    this.coResultadoTesteOrelhinha = coResultadoTesteOrelhinha;
    setCoResultadoTesteOrelhinhaIsSet(true);
  }

  public void unsetCoResultadoTesteOrelhinha() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADOTESTEORELHINHA_ISSET_ID);
  }

  /** Returns true if field coResultadoTesteOrelhinha is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoTesteOrelhinha() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADOTESTEORELHINHA_ISSET_ID);
  }

  public void setCoResultadoTesteOrelhinhaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADOTESTEORELHINHA_ISSET_ID, value);
  }

  public long getDataRealizacaoUSTransfontanela() {
    return this.dataRealizacaoUSTransfontanela;
  }

  public void setDataRealizacaoUSTransfontanela(long dataRealizacaoUSTransfontanela) {
    this.dataRealizacaoUSTransfontanela = dataRealizacaoUSTransfontanela;
    setDataRealizacaoUSTransfontanelaIsSet(true);
  }

  public void unsetDataRealizacaoUSTransfontanela() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAOUSTRANSFONTANELA_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoUSTransfontanela is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoUSTransfontanela() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAOUSTRANSFONTANELA_ISSET_ID);
  }

  public void setDataRealizacaoUSTransfontanelaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAOUSTRANSFONTANELA_ISSET_ID, value);
  }

  public long getCoResultadoUsTransfontanela() {
    return this.coResultadoUsTransfontanela;
  }

  public void setCoResultadoUsTransfontanela(long coResultadoUsTransfontanela) {
    this.coResultadoUsTransfontanela = coResultadoUsTransfontanela;
    setCoResultadoUsTransfontanelaIsSet(true);
  }

  public void unsetCoResultadoUsTransfontanela() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADOUSTRANSFONTANELA_ISSET_ID);
  }

  /** Returns true if field coResultadoUsTransfontanela is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoUsTransfontanela() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADOUSTRANSFONTANELA_ISSET_ID);
  }

  public void setCoResultadoUsTransfontanelaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADOUSTRANSFONTANELA_ISSET_ID, value);
  }

  public long getDataRealizacaoTomografiaComputadorizada() {
    return this.dataRealizacaoTomografiaComputadorizada;
  }

  public void setDataRealizacaoTomografiaComputadorizada(long dataRealizacaoTomografiaComputadorizada) {
    this.dataRealizacaoTomografiaComputadorizada = dataRealizacaoTomografiaComputadorizada;
    setDataRealizacaoTomografiaComputadorizadaIsSet(true);
  }

  public void unsetDataRealizacaoTomografiaComputadorizada() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoTomografiaComputadorizada is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoTomografiaComputadorizada() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID);
  }

  public void setDataRealizacaoTomografiaComputadorizadaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID, value);
  }

  public long getCoResultadoTomografiaComputadorizada() {
    return this.coResultadoTomografiaComputadorizada;
  }

  public void setCoResultadoTomografiaComputadorizada(long coResultadoTomografiaComputadorizada) {
    this.coResultadoTomografiaComputadorizada = coResultadoTomografiaComputadorizada;
    setCoResultadoTomografiaComputadorizadaIsSet(true);
  }

  public void unsetCoResultadoTomografiaComputadorizada() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID);
  }

  /** Returns true if field coResultadoTomografiaComputadorizada is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoTomografiaComputadorizada() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID);
  }

  public void setCoResultadoTomografiaComputadorizadaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADOTOMOGRAFIACOMPUTADORIZADA_ISSET_ID, value);
  }

  public long getDataRealizacaoRessonanciaMagnetica() {
    return this.dataRealizacaoRessonanciaMagnetica;
  }

  public void setDataRealizacaoRessonanciaMagnetica(long dataRealizacaoRessonanciaMagnetica) {
    this.dataRealizacaoRessonanciaMagnetica = dataRealizacaoRessonanciaMagnetica;
    setDataRealizacaoRessonanciaMagneticaIsSet(true);
  }

  public void unsetDataRealizacaoRessonanciaMagnetica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAREALIZACAORESSONANCIAMAGNETICA_ISSET_ID);
  }

  /** Returns true if field dataRealizacaoRessonanciaMagnetica is set (has been assigned a value) and false otherwise */
  public boolean isSetDataRealizacaoRessonanciaMagnetica() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAREALIZACAORESSONANCIAMAGNETICA_ISSET_ID);
  }

  public void setDataRealizacaoRessonanciaMagneticaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAREALIZACAORESSONANCIAMAGNETICA_ISSET_ID, value);
  }

  public long getCoResultadoRessonanciaMagnetica() {
    return this.coResultadoRessonanciaMagnetica;
  }

  public void setCoResultadoRessonanciaMagnetica(long coResultadoRessonanciaMagnetica) {
    this.coResultadoRessonanciaMagnetica = coResultadoRessonanciaMagnetica;
    setCoResultadoRessonanciaMagneticaIsSet(true);
  }

  public void unsetCoResultadoRessonanciaMagnetica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORESULTADORESSONANCIAMAGNETICA_ISSET_ID);
  }

  /** Returns true if field coResultadoRessonanciaMagnetica is set (has been assigned a value) and false otherwise */
  public boolean isSetCoResultadoRessonanciaMagnetica() {
    return EncodingUtils.testBit(__isset_bitfield, __CORESULTADORESSONANCIAMAGNETICA_ISSET_ID);
  }

  public void setCoResultadoRessonanciaMagneticaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORESULTADORESSONANCIAMAGNETICA_ISSET_ID, value);
  }

  public String getCpfCidadao() {
    return this.cpfCidadao;
  }

  public void setCpfCidadao(String cpfCidadao) {
    this.cpfCidadao = cpfCidadao;
  }

  public void unsetCpfCidadao() {
    this.cpfCidadao = null;
  }

  /** Returns true if field cpfCidadao is set (has been assigned a value) and false otherwise */
  public boolean isSetCpfCidadao() {
    return this.cpfCidadao != null;
  }

  public void setCpfCidadaoIsSet(boolean value) {
    if (!value) {
      this.cpfCidadao = null;
    }
  }

  public String getCpfResponsavelFamiliar() {
    return this.cpfResponsavelFamiliar;
  }

  public void setCpfResponsavelFamiliar(String cpfResponsavelFamiliar) {
    this.cpfResponsavelFamiliar = cpfResponsavelFamiliar;
  }

  public void unsetCpfResponsavelFamiliar() {
    this.cpfResponsavelFamiliar = null;
  }

  /** Returns true if field cpfResponsavelFamiliar is set (has been assigned a value) and false otherwise */
  public boolean isSetCpfResponsavelFamiliar() {
    return this.cpfResponsavelFamiliar != null;
  }

  public void setCpfResponsavelFamiliarIsSet(boolean value) {
    if (!value) {
      this.cpfResponsavelFamiliar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER_TRANSPORT:
      if (value == null) {
        unsetHeaderTransport();
      } else {
        setHeaderTransport((br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift)value);
      }
      break;

    case UUID_FICHA:
      if (value == null) {
        unsetUuidFicha();
      } else {
        setUuidFicha((String)value);
      }
      break;

    case TP_CDS_ORIGEM:
      if (value == null) {
        unsetTpCdsOrigem();
      } else {
        setTpCdsOrigem((Integer)value);
      }
      break;

    case TURNO:
      if (value == null) {
        unsetTurno();
      } else {
        setTurno((Long)value);
      }
      break;

    case CNS_CIDADAO:
      if (value == null) {
        unsetCnsCidadao();
      } else {
        setCnsCidadao((String)value);
      }
      break;

    case CNS_RESPONSAVEL_FAMILIAR:
      if (value == null) {
        unsetCnsResponsavelFamiliar();
      } else {
        setCnsResponsavelFamiliar((String)value);
      }
      break;

    case DATA_REALIZACAO_TESTE_OLHINHO:
      if (value == null) {
        unsetDataRealizacaoTesteOlhinho();
      } else {
        setDataRealizacaoTesteOlhinho((Long)value);
      }
      break;

    case CO_RESULTADO_TESTE_OLHINHO:
      if (value == null) {
        unsetCoResultadoTesteOlhinho();
      } else {
        setCoResultadoTesteOlhinho((Long)value);
      }
      break;

    case DATA_REALIZACAO_EXAME_FUNDO_OLHO:
      if (value == null) {
        unsetDataRealizacaoExameFundoOlho();
      } else {
        setDataRealizacaoExameFundoOlho((Long)value);
      }
      break;

    case CO_RESULTADO_EXAME_FUNDO_OLHO:
      if (value == null) {
        unsetCoResultadoExameFundoOlho();
      } else {
        setCoResultadoExameFundoOlho((Long)value);
      }
      break;

    case DATA_REALIZACAO_TESTE_ORELHINHA:
      if (value == null) {
        unsetDataRealizacaoTesteOrelhinha();
      } else {
        setDataRealizacaoTesteOrelhinha((Long)value);
      }
      break;

    case CO_RESULTADO_TESTE_ORELHINHA:
      if (value == null) {
        unsetCoResultadoTesteOrelhinha();
      } else {
        setCoResultadoTesteOrelhinha((Long)value);
      }
      break;

    case DATA_REALIZACAO_USTRANSFONTANELA:
      if (value == null) {
        unsetDataRealizacaoUSTransfontanela();
      } else {
        setDataRealizacaoUSTransfontanela((Long)value);
      }
      break;

    case CO_RESULTADO_US_TRANSFONTANELA:
      if (value == null) {
        unsetCoResultadoUsTransfontanela();
      } else {
        setCoResultadoUsTransfontanela((Long)value);
      }
      break;

    case DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA:
      if (value == null) {
        unsetDataRealizacaoTomografiaComputadorizada();
      } else {
        setDataRealizacaoTomografiaComputadorizada((Long)value);
      }
      break;

    case CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA:
      if (value == null) {
        unsetCoResultadoTomografiaComputadorizada();
      } else {
        setCoResultadoTomografiaComputadorizada((Long)value);
      }
      break;

    case DATA_REALIZACAO_RESSONANCIA_MAGNETICA:
      if (value == null) {
        unsetDataRealizacaoRessonanciaMagnetica();
      } else {
        setDataRealizacaoRessonanciaMagnetica((Long)value);
      }
      break;

    case CO_RESULTADO_RESSONANCIA_MAGNETICA:
      if (value == null) {
        unsetCoResultadoRessonanciaMagnetica();
      } else {
        setCoResultadoRessonanciaMagnetica((Long)value);
      }
      break;

    case CPF_CIDADAO:
      if (value == null) {
        unsetCpfCidadao();
      } else {
        setCpfCidadao((String)value);
      }
      break;

    case CPF_RESPONSAVEL_FAMILIAR:
      if (value == null) {
        unsetCpfResponsavelFamiliar();
      } else {
        setCpfResponsavelFamiliar((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER_TRANSPORT:
      return getHeaderTransport();

    case UUID_FICHA:
      return getUuidFicha();

    case TP_CDS_ORIGEM:
      return getTpCdsOrigem();

    case TURNO:
      return getTurno();

    case CNS_CIDADAO:
      return getCnsCidadao();

    case CNS_RESPONSAVEL_FAMILIAR:
      return getCnsResponsavelFamiliar();

    case DATA_REALIZACAO_TESTE_OLHINHO:
      return getDataRealizacaoTesteOlhinho();

    case CO_RESULTADO_TESTE_OLHINHO:
      return getCoResultadoTesteOlhinho();

    case DATA_REALIZACAO_EXAME_FUNDO_OLHO:
      return getDataRealizacaoExameFundoOlho();

    case CO_RESULTADO_EXAME_FUNDO_OLHO:
      return getCoResultadoExameFundoOlho();

    case DATA_REALIZACAO_TESTE_ORELHINHA:
      return getDataRealizacaoTesteOrelhinha();

    case CO_RESULTADO_TESTE_ORELHINHA:
      return getCoResultadoTesteOrelhinha();

    case DATA_REALIZACAO_USTRANSFONTANELA:
      return getDataRealizacaoUSTransfontanela();

    case CO_RESULTADO_US_TRANSFONTANELA:
      return getCoResultadoUsTransfontanela();

    case DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA:
      return getDataRealizacaoTomografiaComputadorizada();

    case CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA:
      return getCoResultadoTomografiaComputadorizada();

    case DATA_REALIZACAO_RESSONANCIA_MAGNETICA:
      return getDataRealizacaoRessonanciaMagnetica();

    case CO_RESULTADO_RESSONANCIA_MAGNETICA:
      return getCoResultadoRessonanciaMagnetica();

    case CPF_CIDADAO:
      return getCpfCidadao();

    case CPF_RESPONSAVEL_FAMILIAR:
      return getCpfResponsavelFamiliar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER_TRANSPORT:
      return isSetHeaderTransport();
    case UUID_FICHA:
      return isSetUuidFicha();
    case TP_CDS_ORIGEM:
      return isSetTpCdsOrigem();
    case TURNO:
      return isSetTurno();
    case CNS_CIDADAO:
      return isSetCnsCidadao();
    case CNS_RESPONSAVEL_FAMILIAR:
      return isSetCnsResponsavelFamiliar();
    case DATA_REALIZACAO_TESTE_OLHINHO:
      return isSetDataRealizacaoTesteOlhinho();
    case CO_RESULTADO_TESTE_OLHINHO:
      return isSetCoResultadoTesteOlhinho();
    case DATA_REALIZACAO_EXAME_FUNDO_OLHO:
      return isSetDataRealizacaoExameFundoOlho();
    case CO_RESULTADO_EXAME_FUNDO_OLHO:
      return isSetCoResultadoExameFundoOlho();
    case DATA_REALIZACAO_TESTE_ORELHINHA:
      return isSetDataRealizacaoTesteOrelhinha();
    case CO_RESULTADO_TESTE_ORELHINHA:
      return isSetCoResultadoTesteOrelhinha();
    case DATA_REALIZACAO_USTRANSFONTANELA:
      return isSetDataRealizacaoUSTransfontanela();
    case CO_RESULTADO_US_TRANSFONTANELA:
      return isSetCoResultadoUsTransfontanela();
    case DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA:
      return isSetDataRealizacaoTomografiaComputadorizada();
    case CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA:
      return isSetCoResultadoTomografiaComputadorizada();
    case DATA_REALIZACAO_RESSONANCIA_MAGNETICA:
      return isSetDataRealizacaoRessonanciaMagnetica();
    case CO_RESULTADO_RESSONANCIA_MAGNETICA:
      return isSetCoResultadoRessonanciaMagnetica();
    case CPF_CIDADAO:
      return isSetCpfCidadao();
    case CPF_RESPONSAVEL_FAMILIAR:
      return isSetCpfResponsavelFamiliar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FichaComplementarZikaMicrocefaliaThrift)
      return this.equals((FichaComplementarZikaMicrocefaliaThrift)that);
    return false;
  }

  public boolean equals(FichaComplementarZikaMicrocefaliaThrift that) {
    if (that == null)
      return false;

    boolean this_present_headerTransport = true && this.isSetHeaderTransport();
    boolean that_present_headerTransport = true && that.isSetHeaderTransport();
    if (this_present_headerTransport || that_present_headerTransport) {
      if (!(this_present_headerTransport && that_present_headerTransport))
        return false;
      if (!this.headerTransport.equals(that.headerTransport))
        return false;
    }

    boolean this_present_uuidFicha = true && this.isSetUuidFicha();
    boolean that_present_uuidFicha = true && that.isSetUuidFicha();
    if (this_present_uuidFicha || that_present_uuidFicha) {
      if (!(this_present_uuidFicha && that_present_uuidFicha))
        return false;
      if (!this.uuidFicha.equals(that.uuidFicha))
        return false;
    }

    boolean this_present_tpCdsOrigem = true && this.isSetTpCdsOrigem();
    boolean that_present_tpCdsOrigem = true && that.isSetTpCdsOrigem();
    if (this_present_tpCdsOrigem || that_present_tpCdsOrigem) {
      if (!(this_present_tpCdsOrigem && that_present_tpCdsOrigem))
        return false;
      if (this.tpCdsOrigem != that.tpCdsOrigem)
        return false;
    }

    boolean this_present_turno = true && this.isSetTurno();
    boolean that_present_turno = true && that.isSetTurno();
    if (this_present_turno || that_present_turno) {
      if (!(this_present_turno && that_present_turno))
        return false;
      if (this.turno != that.turno)
        return false;
    }

    boolean this_present_cnsCidadao = true && this.isSetCnsCidadao();
    boolean that_present_cnsCidadao = true && that.isSetCnsCidadao();
    if (this_present_cnsCidadao || that_present_cnsCidadao) {
      if (!(this_present_cnsCidadao && that_present_cnsCidadao))
        return false;
      if (!this.cnsCidadao.equals(that.cnsCidadao))
        return false;
    }

    boolean this_present_cnsResponsavelFamiliar = true && this.isSetCnsResponsavelFamiliar();
    boolean that_present_cnsResponsavelFamiliar = true && that.isSetCnsResponsavelFamiliar();
    if (this_present_cnsResponsavelFamiliar || that_present_cnsResponsavelFamiliar) {
      if (!(this_present_cnsResponsavelFamiliar && that_present_cnsResponsavelFamiliar))
        return false;
      if (!this.cnsResponsavelFamiliar.equals(that.cnsResponsavelFamiliar))
        return false;
    }

    boolean this_present_dataRealizacaoTesteOlhinho = true && this.isSetDataRealizacaoTesteOlhinho();
    boolean that_present_dataRealizacaoTesteOlhinho = true && that.isSetDataRealizacaoTesteOlhinho();
    if (this_present_dataRealizacaoTesteOlhinho || that_present_dataRealizacaoTesteOlhinho) {
      if (!(this_present_dataRealizacaoTesteOlhinho && that_present_dataRealizacaoTesteOlhinho))
        return false;
      if (this.dataRealizacaoTesteOlhinho != that.dataRealizacaoTesteOlhinho)
        return false;
    }

    boolean this_present_coResultadoTesteOlhinho = true && this.isSetCoResultadoTesteOlhinho();
    boolean that_present_coResultadoTesteOlhinho = true && that.isSetCoResultadoTesteOlhinho();
    if (this_present_coResultadoTesteOlhinho || that_present_coResultadoTesteOlhinho) {
      if (!(this_present_coResultadoTesteOlhinho && that_present_coResultadoTesteOlhinho))
        return false;
      if (this.coResultadoTesteOlhinho != that.coResultadoTesteOlhinho)
        return false;
    }

    boolean this_present_dataRealizacaoExameFundoOlho = true && this.isSetDataRealizacaoExameFundoOlho();
    boolean that_present_dataRealizacaoExameFundoOlho = true && that.isSetDataRealizacaoExameFundoOlho();
    if (this_present_dataRealizacaoExameFundoOlho || that_present_dataRealizacaoExameFundoOlho) {
      if (!(this_present_dataRealizacaoExameFundoOlho && that_present_dataRealizacaoExameFundoOlho))
        return false;
      if (this.dataRealizacaoExameFundoOlho != that.dataRealizacaoExameFundoOlho)
        return false;
    }

    boolean this_present_coResultadoExameFundoOlho = true && this.isSetCoResultadoExameFundoOlho();
    boolean that_present_coResultadoExameFundoOlho = true && that.isSetCoResultadoExameFundoOlho();
    if (this_present_coResultadoExameFundoOlho || that_present_coResultadoExameFundoOlho) {
      if (!(this_present_coResultadoExameFundoOlho && that_present_coResultadoExameFundoOlho))
        return false;
      if (this.coResultadoExameFundoOlho != that.coResultadoExameFundoOlho)
        return false;
    }

    boolean this_present_dataRealizacaoTesteOrelhinha = true && this.isSetDataRealizacaoTesteOrelhinha();
    boolean that_present_dataRealizacaoTesteOrelhinha = true && that.isSetDataRealizacaoTesteOrelhinha();
    if (this_present_dataRealizacaoTesteOrelhinha || that_present_dataRealizacaoTesteOrelhinha) {
      if (!(this_present_dataRealizacaoTesteOrelhinha && that_present_dataRealizacaoTesteOrelhinha))
        return false;
      if (this.dataRealizacaoTesteOrelhinha != that.dataRealizacaoTesteOrelhinha)
        return false;
    }

    boolean this_present_coResultadoTesteOrelhinha = true && this.isSetCoResultadoTesteOrelhinha();
    boolean that_present_coResultadoTesteOrelhinha = true && that.isSetCoResultadoTesteOrelhinha();
    if (this_present_coResultadoTesteOrelhinha || that_present_coResultadoTesteOrelhinha) {
      if (!(this_present_coResultadoTesteOrelhinha && that_present_coResultadoTesteOrelhinha))
        return false;
      if (this.coResultadoTesteOrelhinha != that.coResultadoTesteOrelhinha)
        return false;
    }

    boolean this_present_dataRealizacaoUSTransfontanela = true && this.isSetDataRealizacaoUSTransfontanela();
    boolean that_present_dataRealizacaoUSTransfontanela = true && that.isSetDataRealizacaoUSTransfontanela();
    if (this_present_dataRealizacaoUSTransfontanela || that_present_dataRealizacaoUSTransfontanela) {
      if (!(this_present_dataRealizacaoUSTransfontanela && that_present_dataRealizacaoUSTransfontanela))
        return false;
      if (this.dataRealizacaoUSTransfontanela != that.dataRealizacaoUSTransfontanela)
        return false;
    }

    boolean this_present_coResultadoUsTransfontanela = true && this.isSetCoResultadoUsTransfontanela();
    boolean that_present_coResultadoUsTransfontanela = true && that.isSetCoResultadoUsTransfontanela();
    if (this_present_coResultadoUsTransfontanela || that_present_coResultadoUsTransfontanela) {
      if (!(this_present_coResultadoUsTransfontanela && that_present_coResultadoUsTransfontanela))
        return false;
      if (this.coResultadoUsTransfontanela != that.coResultadoUsTransfontanela)
        return false;
    }

    boolean this_present_dataRealizacaoTomografiaComputadorizada = true && this.isSetDataRealizacaoTomografiaComputadorizada();
    boolean that_present_dataRealizacaoTomografiaComputadorizada = true && that.isSetDataRealizacaoTomografiaComputadorizada();
    if (this_present_dataRealizacaoTomografiaComputadorizada || that_present_dataRealizacaoTomografiaComputadorizada) {
      if (!(this_present_dataRealizacaoTomografiaComputadorizada && that_present_dataRealizacaoTomografiaComputadorizada))
        return false;
      if (this.dataRealizacaoTomografiaComputadorizada != that.dataRealizacaoTomografiaComputadorizada)
        return false;
    }

    boolean this_present_coResultadoTomografiaComputadorizada = true && this.isSetCoResultadoTomografiaComputadorizada();
    boolean that_present_coResultadoTomografiaComputadorizada = true && that.isSetCoResultadoTomografiaComputadorizada();
    if (this_present_coResultadoTomografiaComputadorizada || that_present_coResultadoTomografiaComputadorizada) {
      if (!(this_present_coResultadoTomografiaComputadorizada && that_present_coResultadoTomografiaComputadorizada))
        return false;
      if (this.coResultadoTomografiaComputadorizada != that.coResultadoTomografiaComputadorizada)
        return false;
    }

    boolean this_present_dataRealizacaoRessonanciaMagnetica = true && this.isSetDataRealizacaoRessonanciaMagnetica();
    boolean that_present_dataRealizacaoRessonanciaMagnetica = true && that.isSetDataRealizacaoRessonanciaMagnetica();
    if (this_present_dataRealizacaoRessonanciaMagnetica || that_present_dataRealizacaoRessonanciaMagnetica) {
      if (!(this_present_dataRealizacaoRessonanciaMagnetica && that_present_dataRealizacaoRessonanciaMagnetica))
        return false;
      if (this.dataRealizacaoRessonanciaMagnetica != that.dataRealizacaoRessonanciaMagnetica)
        return false;
    }

    boolean this_present_coResultadoRessonanciaMagnetica = true && this.isSetCoResultadoRessonanciaMagnetica();
    boolean that_present_coResultadoRessonanciaMagnetica = true && that.isSetCoResultadoRessonanciaMagnetica();
    if (this_present_coResultadoRessonanciaMagnetica || that_present_coResultadoRessonanciaMagnetica) {
      if (!(this_present_coResultadoRessonanciaMagnetica && that_present_coResultadoRessonanciaMagnetica))
        return false;
      if (this.coResultadoRessonanciaMagnetica != that.coResultadoRessonanciaMagnetica)
        return false;
    }

    boolean this_present_cpfCidadao = true && this.isSetCpfCidadao();
    boolean that_present_cpfCidadao = true && that.isSetCpfCidadao();
    if (this_present_cpfCidadao || that_present_cpfCidadao) {
      if (!(this_present_cpfCidadao && that_present_cpfCidadao))
        return false;
      if (!this.cpfCidadao.equals(that.cpfCidadao))
        return false;
    }

    boolean this_present_cpfResponsavelFamiliar = true && this.isSetCpfResponsavelFamiliar();
    boolean that_present_cpfResponsavelFamiliar = true && that.isSetCpfResponsavelFamiliar();
    if (this_present_cpfResponsavelFamiliar || that_present_cpfResponsavelFamiliar) {
      if (!(this_present_cpfResponsavelFamiliar && that_present_cpfResponsavelFamiliar))
        return false;
      if (!this.cpfResponsavelFamiliar.equals(that.cpfResponsavelFamiliar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_headerTransport = true && (isSetHeaderTransport());
    list.add(present_headerTransport);
    if (present_headerTransport)
      list.add(headerTransport);

    boolean present_uuidFicha = true && (isSetUuidFicha());
    list.add(present_uuidFicha);
    if (present_uuidFicha)
      list.add(uuidFicha);

    boolean present_tpCdsOrigem = true && (isSetTpCdsOrigem());
    list.add(present_tpCdsOrigem);
    if (present_tpCdsOrigem)
      list.add(tpCdsOrigem);

    boolean present_turno = true && (isSetTurno());
    list.add(present_turno);
    if (present_turno)
      list.add(turno);

    boolean present_cnsCidadao = true && (isSetCnsCidadao());
    list.add(present_cnsCidadao);
    if (present_cnsCidadao)
      list.add(cnsCidadao);

    boolean present_cnsResponsavelFamiliar = true && (isSetCnsResponsavelFamiliar());
    list.add(present_cnsResponsavelFamiliar);
    if (present_cnsResponsavelFamiliar)
      list.add(cnsResponsavelFamiliar);

    boolean present_dataRealizacaoTesteOlhinho = true && (isSetDataRealizacaoTesteOlhinho());
    list.add(present_dataRealizacaoTesteOlhinho);
    if (present_dataRealizacaoTesteOlhinho)
      list.add(dataRealizacaoTesteOlhinho);

    boolean present_coResultadoTesteOlhinho = true && (isSetCoResultadoTesteOlhinho());
    list.add(present_coResultadoTesteOlhinho);
    if (present_coResultadoTesteOlhinho)
      list.add(coResultadoTesteOlhinho);

    boolean present_dataRealizacaoExameFundoOlho = true && (isSetDataRealizacaoExameFundoOlho());
    list.add(present_dataRealizacaoExameFundoOlho);
    if (present_dataRealizacaoExameFundoOlho)
      list.add(dataRealizacaoExameFundoOlho);

    boolean present_coResultadoExameFundoOlho = true && (isSetCoResultadoExameFundoOlho());
    list.add(present_coResultadoExameFundoOlho);
    if (present_coResultadoExameFundoOlho)
      list.add(coResultadoExameFundoOlho);

    boolean present_dataRealizacaoTesteOrelhinha = true && (isSetDataRealizacaoTesteOrelhinha());
    list.add(present_dataRealizacaoTesteOrelhinha);
    if (present_dataRealizacaoTesteOrelhinha)
      list.add(dataRealizacaoTesteOrelhinha);

    boolean present_coResultadoTesteOrelhinha = true && (isSetCoResultadoTesteOrelhinha());
    list.add(present_coResultadoTesteOrelhinha);
    if (present_coResultadoTesteOrelhinha)
      list.add(coResultadoTesteOrelhinha);

    boolean present_dataRealizacaoUSTransfontanela = true && (isSetDataRealizacaoUSTransfontanela());
    list.add(present_dataRealizacaoUSTransfontanela);
    if (present_dataRealizacaoUSTransfontanela)
      list.add(dataRealizacaoUSTransfontanela);

    boolean present_coResultadoUsTransfontanela = true && (isSetCoResultadoUsTransfontanela());
    list.add(present_coResultadoUsTransfontanela);
    if (present_coResultadoUsTransfontanela)
      list.add(coResultadoUsTransfontanela);

    boolean present_dataRealizacaoTomografiaComputadorizada = true && (isSetDataRealizacaoTomografiaComputadorizada());
    list.add(present_dataRealizacaoTomografiaComputadorizada);
    if (present_dataRealizacaoTomografiaComputadorizada)
      list.add(dataRealizacaoTomografiaComputadorizada);

    boolean present_coResultadoTomografiaComputadorizada = true && (isSetCoResultadoTomografiaComputadorizada());
    list.add(present_coResultadoTomografiaComputadorizada);
    if (present_coResultadoTomografiaComputadorizada)
      list.add(coResultadoTomografiaComputadorizada);

    boolean present_dataRealizacaoRessonanciaMagnetica = true && (isSetDataRealizacaoRessonanciaMagnetica());
    list.add(present_dataRealizacaoRessonanciaMagnetica);
    if (present_dataRealizacaoRessonanciaMagnetica)
      list.add(dataRealizacaoRessonanciaMagnetica);

    boolean present_coResultadoRessonanciaMagnetica = true && (isSetCoResultadoRessonanciaMagnetica());
    list.add(present_coResultadoRessonanciaMagnetica);
    if (present_coResultadoRessonanciaMagnetica)
      list.add(coResultadoRessonanciaMagnetica);

    boolean present_cpfCidadao = true && (isSetCpfCidadao());
    list.add(present_cpfCidadao);
    if (present_cpfCidadao)
      list.add(cpfCidadao);

    boolean present_cpfResponsavelFamiliar = true && (isSetCpfResponsavelFamiliar());
    list.add(present_cpfResponsavelFamiliar);
    if (present_cpfResponsavelFamiliar)
      list.add(cpfResponsavelFamiliar);

    return list.hashCode();
  }

  @Override
  public int compareTo(FichaComplementarZikaMicrocefaliaThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeaderTransport()).compareTo(other.isSetHeaderTransport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderTransport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerTransport, other.headerTransport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuidFicha()).compareTo(other.isSetUuidFicha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuidFicha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuidFicha, other.uuidFicha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTpCdsOrigem()).compareTo(other.isSetTpCdsOrigem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTpCdsOrigem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpCdsOrigem, other.tpCdsOrigem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurno()).compareTo(other.isSetTurno());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurno()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turno, other.turno);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnsCidadao()).compareTo(other.isSetCnsCidadao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnsCidadao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnsCidadao, other.cnsCidadao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnsResponsavelFamiliar()).compareTo(other.isSetCnsResponsavelFamiliar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnsResponsavelFamiliar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnsResponsavelFamiliar, other.cnsResponsavelFamiliar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoTesteOlhinho()).compareTo(other.isSetDataRealizacaoTesteOlhinho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoTesteOlhinho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoTesteOlhinho, other.dataRealizacaoTesteOlhinho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoTesteOlhinho()).compareTo(other.isSetCoResultadoTesteOlhinho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoTesteOlhinho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoTesteOlhinho, other.coResultadoTesteOlhinho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoExameFundoOlho()).compareTo(other.isSetDataRealizacaoExameFundoOlho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoExameFundoOlho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoExameFundoOlho, other.dataRealizacaoExameFundoOlho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoExameFundoOlho()).compareTo(other.isSetCoResultadoExameFundoOlho());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoExameFundoOlho()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoExameFundoOlho, other.coResultadoExameFundoOlho);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoTesteOrelhinha()).compareTo(other.isSetDataRealizacaoTesteOrelhinha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoTesteOrelhinha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoTesteOrelhinha, other.dataRealizacaoTesteOrelhinha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoTesteOrelhinha()).compareTo(other.isSetCoResultadoTesteOrelhinha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoTesteOrelhinha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoTesteOrelhinha, other.coResultadoTesteOrelhinha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoUSTransfontanela()).compareTo(other.isSetDataRealizacaoUSTransfontanela());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoUSTransfontanela()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoUSTransfontanela, other.dataRealizacaoUSTransfontanela);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoUsTransfontanela()).compareTo(other.isSetCoResultadoUsTransfontanela());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoUsTransfontanela()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoUsTransfontanela, other.coResultadoUsTransfontanela);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoTomografiaComputadorizada()).compareTo(other.isSetDataRealizacaoTomografiaComputadorizada());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoTomografiaComputadorizada()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoTomografiaComputadorizada, other.dataRealizacaoTomografiaComputadorizada);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoTomografiaComputadorizada()).compareTo(other.isSetCoResultadoTomografiaComputadorizada());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoTomografiaComputadorizada()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoTomografiaComputadorizada, other.coResultadoTomografiaComputadorizada);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataRealizacaoRessonanciaMagnetica()).compareTo(other.isSetDataRealizacaoRessonanciaMagnetica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataRealizacaoRessonanciaMagnetica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataRealizacaoRessonanciaMagnetica, other.dataRealizacaoRessonanciaMagnetica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoResultadoRessonanciaMagnetica()).compareTo(other.isSetCoResultadoRessonanciaMagnetica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoResultadoRessonanciaMagnetica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coResultadoRessonanciaMagnetica, other.coResultadoRessonanciaMagnetica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpfCidadao()).compareTo(other.isSetCpfCidadao());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpfCidadao()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpfCidadao, other.cpfCidadao);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpfResponsavelFamiliar()).compareTo(other.isSetCpfResponsavelFamiliar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpfResponsavelFamiliar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpfResponsavelFamiliar, other.cpfResponsavelFamiliar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FichaComplementarZikaMicrocefaliaThrift(");
    boolean first = true;

    if (isSetHeaderTransport()) {
      sb.append("headerTransport:");
      if (this.headerTransport == null) {
        sb.append("null");
      } else {
        sb.append(this.headerTransport);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("uuidFicha:");
    if (this.uuidFicha == null) {
      sb.append("null");
    } else {
      sb.append(this.uuidFicha);
    }
    first = false;
    if (isSetTpCdsOrigem()) {
      if (!first) sb.append(", ");
      sb.append("tpCdsOrigem:");
      sb.append(this.tpCdsOrigem);
      first = false;
    }
    if (isSetTurno()) {
      if (!first) sb.append(", ");
      sb.append("turno:");
      sb.append(this.turno);
      first = false;
    }
    if (isSetCnsCidadao()) {
      if (!first) sb.append(", ");
      sb.append("cnsCidadao:");
      if (this.cnsCidadao == null) {
        sb.append("null");
      } else {
        sb.append(this.cnsCidadao);
      }
      first = false;
    }
    if (isSetCnsResponsavelFamiliar()) {
      if (!first) sb.append(", ");
      sb.append("cnsResponsavelFamiliar:");
      if (this.cnsResponsavelFamiliar == null) {
        sb.append("null");
      } else {
        sb.append(this.cnsResponsavelFamiliar);
      }
      first = false;
    }
    if (isSetDataRealizacaoTesteOlhinho()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoTesteOlhinho:");
      sb.append(this.dataRealizacaoTesteOlhinho);
      first = false;
    }
    if (isSetCoResultadoTesteOlhinho()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoTesteOlhinho:");
      sb.append(this.coResultadoTesteOlhinho);
      first = false;
    }
    if (isSetDataRealizacaoExameFundoOlho()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoExameFundoOlho:");
      sb.append(this.dataRealizacaoExameFundoOlho);
      first = false;
    }
    if (isSetCoResultadoExameFundoOlho()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoExameFundoOlho:");
      sb.append(this.coResultadoExameFundoOlho);
      first = false;
    }
    if (isSetDataRealizacaoTesteOrelhinha()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoTesteOrelhinha:");
      sb.append(this.dataRealizacaoTesteOrelhinha);
      first = false;
    }
    if (isSetCoResultadoTesteOrelhinha()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoTesteOrelhinha:");
      sb.append(this.coResultadoTesteOrelhinha);
      first = false;
    }
    if (isSetDataRealizacaoUSTransfontanela()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoUSTransfontanela:");
      sb.append(this.dataRealizacaoUSTransfontanela);
      first = false;
    }
    if (isSetCoResultadoUsTransfontanela()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoUsTransfontanela:");
      sb.append(this.coResultadoUsTransfontanela);
      first = false;
    }
    if (isSetDataRealizacaoTomografiaComputadorizada()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoTomografiaComputadorizada:");
      sb.append(this.dataRealizacaoTomografiaComputadorizada);
      first = false;
    }
    if (isSetCoResultadoTomografiaComputadorizada()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoTomografiaComputadorizada:");
      sb.append(this.coResultadoTomografiaComputadorizada);
      first = false;
    }
    if (isSetDataRealizacaoRessonanciaMagnetica()) {
      if (!first) sb.append(", ");
      sb.append("dataRealizacaoRessonanciaMagnetica:");
      sb.append(this.dataRealizacaoRessonanciaMagnetica);
      first = false;
    }
    if (isSetCoResultadoRessonanciaMagnetica()) {
      if (!first) sb.append(", ");
      sb.append("coResultadoRessonanciaMagnetica:");
      sb.append(this.coResultadoRessonanciaMagnetica);
      first = false;
    }
    if (isSetCpfCidadao()) {
      if (!first) sb.append(", ");
      sb.append("cpfCidadao:");
      if (this.cpfCidadao == null) {
        sb.append("null");
      } else {
        sb.append(this.cpfCidadao);
      }
      first = false;
    }
    if (isSetCpfResponsavelFamiliar()) {
      if (!first) sb.append(", ");
      sb.append("cpfResponsavelFamiliar:");
      if (this.cpfResponsavelFamiliar == null) {
        sb.append("null");
      } else {
        sb.append(this.cpfResponsavelFamiliar);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetUuidFicha()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuidFicha' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (headerTransport != null) {
      headerTransport.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FichaComplementarZikaMicrocefaliaThriftStandardSchemeFactory implements SchemeFactory {
    public FichaComplementarZikaMicrocefaliaThriftStandardScheme getScheme() {
      return new FichaComplementarZikaMicrocefaliaThriftStandardScheme();
    }
  }

  private static class FichaComplementarZikaMicrocefaliaThriftStandardScheme extends StandardScheme<FichaComplementarZikaMicrocefaliaThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FichaComplementarZikaMicrocefaliaThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER_TRANSPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.headerTransport = new br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift();
              struct.headerTransport.read(iprot);
              struct.setHeaderTransportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UUID_FICHA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuidFicha = iprot.readString();
              struct.setUuidFichaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TP_CDS_ORIGEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tpCdsOrigem = iprot.readI32();
              struct.setTpCdsOrigemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TURNO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.turno = iprot.readI64();
              struct.setTurnoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CNS_CIDADAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnsCidadao = iprot.readString();
              struct.setCnsCidadaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CNS_RESPONSAVEL_FAMILIAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnsResponsavelFamiliar = iprot.readString();
              struct.setCnsResponsavelFamiliarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_REALIZACAO_TESTE_OLHINHO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoTesteOlhinho = iprot.readI64();
              struct.setDataRealizacaoTesteOlhinhoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CO_RESULTADO_TESTE_OLHINHO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoTesteOlhinho = iprot.readI64();
              struct.setCoResultadoTesteOlhinhoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATA_REALIZACAO_EXAME_FUNDO_OLHO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoExameFundoOlho = iprot.readI64();
              struct.setDataRealizacaoExameFundoOlhoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CO_RESULTADO_EXAME_FUNDO_OLHO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoExameFundoOlho = iprot.readI64();
              struct.setCoResultadoExameFundoOlhoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATA_REALIZACAO_TESTE_ORELHINHA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoTesteOrelhinha = iprot.readI64();
              struct.setDataRealizacaoTesteOrelhinhaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CO_RESULTADO_TESTE_ORELHINHA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoTesteOrelhinha = iprot.readI64();
              struct.setCoResultadoTesteOrelhinhaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DATA_REALIZACAO_USTRANSFONTANELA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoUSTransfontanela = iprot.readI64();
              struct.setDataRealizacaoUSTransfontanelaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CO_RESULTADO_US_TRANSFONTANELA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoUsTransfontanela = iprot.readI64();
              struct.setCoResultadoUsTransfontanelaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoTomografiaComputadorizada = iprot.readI64();
              struct.setDataRealizacaoTomografiaComputadorizadaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoTomografiaComputadorizada = iprot.readI64();
              struct.setCoResultadoTomografiaComputadorizadaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DATA_REALIZACAO_RESSONANCIA_MAGNETICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataRealizacaoRessonanciaMagnetica = iprot.readI64();
              struct.setDataRealizacaoRessonanciaMagneticaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CO_RESULTADO_RESSONANCIA_MAGNETICA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.coResultadoRessonanciaMagnetica = iprot.readI64();
              struct.setCoResultadoRessonanciaMagneticaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CPF_CIDADAO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpfCidadao = iprot.readString();
              struct.setCpfCidadaoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CPF_RESPONSAVEL_FAMILIAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpfResponsavelFamiliar = iprot.readString();
              struct.setCpfResponsavelFamiliarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FichaComplementarZikaMicrocefaliaThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.headerTransport != null) {
        if (struct.isSetHeaderTransport()) {
          oprot.writeFieldBegin(HEADER_TRANSPORT_FIELD_DESC);
          struct.headerTransport.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uuidFicha != null) {
        oprot.writeFieldBegin(UUID_FICHA_FIELD_DESC);
        oprot.writeString(struct.uuidFicha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTpCdsOrigem()) {
        oprot.writeFieldBegin(TP_CDS_ORIGEM_FIELD_DESC);
        oprot.writeI32(struct.tpCdsOrigem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurno()) {
        oprot.writeFieldBegin(TURNO_FIELD_DESC);
        oprot.writeI64(struct.turno);
        oprot.writeFieldEnd();
      }
      if (struct.cnsCidadao != null) {
        if (struct.isSetCnsCidadao()) {
          oprot.writeFieldBegin(CNS_CIDADAO_FIELD_DESC);
          oprot.writeString(struct.cnsCidadao);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnsResponsavelFamiliar != null) {
        if (struct.isSetCnsResponsavelFamiliar()) {
          oprot.writeFieldBegin(CNS_RESPONSAVEL_FAMILIAR_FIELD_DESC);
          oprot.writeString(struct.cnsResponsavelFamiliar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDataRealizacaoTesteOlhinho()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_TESTE_OLHINHO_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoTesteOlhinho);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoTesteOlhinho()) {
        oprot.writeFieldBegin(CO_RESULTADO_TESTE_OLHINHO_FIELD_DESC);
        oprot.writeI64(struct.coResultadoTesteOlhinho);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataRealizacaoExameFundoOlho()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_EXAME_FUNDO_OLHO_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoExameFundoOlho);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoExameFundoOlho()) {
        oprot.writeFieldBegin(CO_RESULTADO_EXAME_FUNDO_OLHO_FIELD_DESC);
        oprot.writeI64(struct.coResultadoExameFundoOlho);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataRealizacaoTesteOrelhinha()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_TESTE_ORELHINHA_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoTesteOrelhinha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoTesteOrelhinha()) {
        oprot.writeFieldBegin(CO_RESULTADO_TESTE_ORELHINHA_FIELD_DESC);
        oprot.writeI64(struct.coResultadoTesteOrelhinha);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataRealizacaoUSTransfontanela()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_USTRANSFONTANELA_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoUSTransfontanela);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoUsTransfontanela()) {
        oprot.writeFieldBegin(CO_RESULTADO_US_TRANSFONTANELA_FIELD_DESC);
        oprot.writeI64(struct.coResultadoUsTransfontanela);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataRealizacaoTomografiaComputadorizada()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_TOMOGRAFIA_COMPUTADORIZADA_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoTomografiaComputadorizada);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoTomografiaComputadorizada()) {
        oprot.writeFieldBegin(CO_RESULTADO_TOMOGRAFIA_COMPUTADORIZADA_FIELD_DESC);
        oprot.writeI64(struct.coResultadoTomografiaComputadorizada);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataRealizacaoRessonanciaMagnetica()) {
        oprot.writeFieldBegin(DATA_REALIZACAO_RESSONANCIA_MAGNETICA_FIELD_DESC);
        oprot.writeI64(struct.dataRealizacaoRessonanciaMagnetica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoResultadoRessonanciaMagnetica()) {
        oprot.writeFieldBegin(CO_RESULTADO_RESSONANCIA_MAGNETICA_FIELD_DESC);
        oprot.writeI64(struct.coResultadoRessonanciaMagnetica);
        oprot.writeFieldEnd();
      }
      if (struct.cpfCidadao != null) {
        if (struct.isSetCpfCidadao()) {
          oprot.writeFieldBegin(CPF_CIDADAO_FIELD_DESC);
          oprot.writeString(struct.cpfCidadao);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cpfResponsavelFamiliar != null) {
        if (struct.isSetCpfResponsavelFamiliar()) {
          oprot.writeFieldBegin(CPF_RESPONSAVEL_FAMILIAR_FIELD_DESC);
          oprot.writeString(struct.cpfResponsavelFamiliar);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FichaComplementarZikaMicrocefaliaThriftTupleSchemeFactory implements SchemeFactory {
    public FichaComplementarZikaMicrocefaliaThriftTupleScheme getScheme() {
      return new FichaComplementarZikaMicrocefaliaThriftTupleScheme();
    }
  }

  private static class FichaComplementarZikaMicrocefaliaThriftTupleScheme extends TupleScheme<FichaComplementarZikaMicrocefaliaThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FichaComplementarZikaMicrocefaliaThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuidFicha);
      BitSet optionals = new BitSet();
      if (struct.isSetHeaderTransport()) {
        optionals.set(0);
      }
      if (struct.isSetTpCdsOrigem()) {
        optionals.set(1);
      }
      if (struct.isSetTurno()) {
        optionals.set(2);
      }
      if (struct.isSetCnsCidadao()) {
        optionals.set(3);
      }
      if (struct.isSetCnsResponsavelFamiliar()) {
        optionals.set(4);
      }
      if (struct.isSetDataRealizacaoTesteOlhinho()) {
        optionals.set(5);
      }
      if (struct.isSetCoResultadoTesteOlhinho()) {
        optionals.set(6);
      }
      if (struct.isSetDataRealizacaoExameFundoOlho()) {
        optionals.set(7);
      }
      if (struct.isSetCoResultadoExameFundoOlho()) {
        optionals.set(8);
      }
      if (struct.isSetDataRealizacaoTesteOrelhinha()) {
        optionals.set(9);
      }
      if (struct.isSetCoResultadoTesteOrelhinha()) {
        optionals.set(10);
      }
      if (struct.isSetDataRealizacaoUSTransfontanela()) {
        optionals.set(11);
      }
      if (struct.isSetCoResultadoUsTransfontanela()) {
        optionals.set(12);
      }
      if (struct.isSetDataRealizacaoTomografiaComputadorizada()) {
        optionals.set(13);
      }
      if (struct.isSetCoResultadoTomografiaComputadorizada()) {
        optionals.set(14);
      }
      if (struct.isSetDataRealizacaoRessonanciaMagnetica()) {
        optionals.set(15);
      }
      if (struct.isSetCoResultadoRessonanciaMagnetica()) {
        optionals.set(16);
      }
      if (struct.isSetCpfCidadao()) {
        optionals.set(17);
      }
      if (struct.isSetCpfResponsavelFamiliar()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetHeaderTransport()) {
        struct.headerTransport.write(oprot);
      }
      if (struct.isSetTpCdsOrigem()) {
        oprot.writeI32(struct.tpCdsOrigem);
      }
      if (struct.isSetTurno()) {
        oprot.writeI64(struct.turno);
      }
      if (struct.isSetCnsCidadao()) {
        oprot.writeString(struct.cnsCidadao);
      }
      if (struct.isSetCnsResponsavelFamiliar()) {
        oprot.writeString(struct.cnsResponsavelFamiliar);
      }
      if (struct.isSetDataRealizacaoTesteOlhinho()) {
        oprot.writeI64(struct.dataRealizacaoTesteOlhinho);
      }
      if (struct.isSetCoResultadoTesteOlhinho()) {
        oprot.writeI64(struct.coResultadoTesteOlhinho);
      }
      if (struct.isSetDataRealizacaoExameFundoOlho()) {
        oprot.writeI64(struct.dataRealizacaoExameFundoOlho);
      }
      if (struct.isSetCoResultadoExameFundoOlho()) {
        oprot.writeI64(struct.coResultadoExameFundoOlho);
      }
      if (struct.isSetDataRealizacaoTesteOrelhinha()) {
        oprot.writeI64(struct.dataRealizacaoTesteOrelhinha);
      }
      if (struct.isSetCoResultadoTesteOrelhinha()) {
        oprot.writeI64(struct.coResultadoTesteOrelhinha);
      }
      if (struct.isSetDataRealizacaoUSTransfontanela()) {
        oprot.writeI64(struct.dataRealizacaoUSTransfontanela);
      }
      if (struct.isSetCoResultadoUsTransfontanela()) {
        oprot.writeI64(struct.coResultadoUsTransfontanela);
      }
      if (struct.isSetDataRealizacaoTomografiaComputadorizada()) {
        oprot.writeI64(struct.dataRealizacaoTomografiaComputadorizada);
      }
      if (struct.isSetCoResultadoTomografiaComputadorizada()) {
        oprot.writeI64(struct.coResultadoTomografiaComputadorizada);
      }
      if (struct.isSetDataRealizacaoRessonanciaMagnetica()) {
        oprot.writeI64(struct.dataRealizacaoRessonanciaMagnetica);
      }
      if (struct.isSetCoResultadoRessonanciaMagnetica()) {
        oprot.writeI64(struct.coResultadoRessonanciaMagnetica);
      }
      if (struct.isSetCpfCidadao()) {
        oprot.writeString(struct.cpfCidadao);
      }
      if (struct.isSetCpfResponsavelFamiliar()) {
        oprot.writeString(struct.cpfResponsavelFamiliar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FichaComplementarZikaMicrocefaliaThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuidFicha = iprot.readString();
      struct.setUuidFichaIsSet(true);
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.headerTransport = new br.gov.saude.esusab.ras.common.UnicaLotacaoHeaderThrift();
        struct.headerTransport.read(iprot);
        struct.setHeaderTransportIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tpCdsOrigem = iprot.readI32();
        struct.setTpCdsOrigemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.turno = iprot.readI64();
        struct.setTurnoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cnsCidadao = iprot.readString();
        struct.setCnsCidadaoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cnsResponsavelFamiliar = iprot.readString();
        struct.setCnsResponsavelFamiliarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dataRealizacaoTesteOlhinho = iprot.readI64();
        struct.setDataRealizacaoTesteOlhinhoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.coResultadoTesteOlhinho = iprot.readI64();
        struct.setCoResultadoTesteOlhinhoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dataRealizacaoExameFundoOlho = iprot.readI64();
        struct.setDataRealizacaoExameFundoOlhoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.coResultadoExameFundoOlho = iprot.readI64();
        struct.setCoResultadoExameFundoOlhoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dataRealizacaoTesteOrelhinha = iprot.readI64();
        struct.setDataRealizacaoTesteOrelhinhaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.coResultadoTesteOrelhinha = iprot.readI64();
        struct.setCoResultadoTesteOrelhinhaIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dataRealizacaoUSTransfontanela = iprot.readI64();
        struct.setDataRealizacaoUSTransfontanelaIsSet(true);
      }
      if (incoming.get(12)) {
        struct.coResultadoUsTransfontanela = iprot.readI64();
        struct.setCoResultadoUsTransfontanelaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dataRealizacaoTomografiaComputadorizada = iprot.readI64();
        struct.setDataRealizacaoTomografiaComputadorizadaIsSet(true);
      }
      if (incoming.get(14)) {
        struct.coResultadoTomografiaComputadorizada = iprot.readI64();
        struct.setCoResultadoTomografiaComputadorizadaIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dataRealizacaoRessonanciaMagnetica = iprot.readI64();
        struct.setDataRealizacaoRessonanciaMagneticaIsSet(true);
      }
      if (incoming.get(16)) {
        struct.coResultadoRessonanciaMagnetica = iprot.readI64();
        struct.setCoResultadoRessonanciaMagneticaIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cpfCidadao = iprot.readString();
        struct.setCpfCidadaoIsSet(true);
      }
      if (incoming.get(18)) {
        struct.cpfResponsavelFamiliar = iprot.readString();
        struct.setCpfResponsavelFamiliarIsSet(true);
      }
    }
  }

}

